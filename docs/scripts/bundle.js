(()=>{var __webpack_modules__={531:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// NAMESPACE OBJECT: ./src/index.ts\nvar src_namespaceObject = {};\n__webpack_require__.r(src_namespaceObject);\n__webpack_require__.d(src_namespaceObject, {\n  "Axis": () => (Axis),\n  "IsometricCanvas": () => (IsometricCanvas),\n  "IsometricCircle": () => (IsometricCircle),\n  "IsometricGroup": () => (IsometricGroup),\n  "IsometricPath": () => (IsometricPath),\n  "IsometricRectangle": () => (IsometricRectangle),\n  "IsometricText": () => (IsometricText),\n  "LineCap": () => (LineCap),\n  "LineJoin": () => (LineJoin),\n  "PlaneView": () => (PlaneView)\n});\n\n// EXTERNAL MODULE: ./node_modules/google-code-prettify/bin/run_prettify.min.js\nvar run_prettify_min = __webpack_require__(538);\n;// CONCATENATED MODULE: ./src/@constants/index.ts\nvar SVG_NAMESPACE = \'http://www.w3.org/2000/svg\';\nvar SVG_ELEMENTS;\n(function (SVG_ELEMENTS) {\n    SVG_ELEMENTS["svg"] = "svg";\n    SVG_ELEMENTS["group"] = "g";\n    SVG_ELEMENTS["path"] = "path";\n    SVG_ELEMENTS["rect"] = "rect";\n    SVG_ELEMENTS["text"] = "text";\n    SVG_ELEMENTS["tspan"] = "tspan";\n    SVG_ELEMENTS["pattern"] = "pattern";\n    SVG_ELEMENTS["image"] = "image";\n    SVG_ELEMENTS["animate"] = "animate";\n    SVG_ELEMENTS["animateTransform"] = "animateTransform";\n})(SVG_ELEMENTS || (SVG_ELEMENTS = {}));\nvar SVG_PROPERTIES;\n(function (SVG_PROPERTIES) {\n    SVG_PROPERTIES["viewBox"] = "viewBox";\n})(SVG_PROPERTIES || (SVG_PROPERTIES = {}));\nvar DECIMALS = 6;\nvar SQRT3 = +(Math.sqrt(3).toFixed(DECIMALS));\nvar HSQRT3 = +((Math.sqrt(3) / 2).toFixed(DECIMALS));\nvar DEFAULT_WIDTH = 640;\nvar DEFAULT_HEIGHT = 480;\nvar N = \'(-?\\\\d+(?:\\\\.\\\\d+)?|-?\\\\.\\\\d+)\';\nvar S = \'\\\\s*\';\nvar SS = \'\\\\s+\';\nvar POINT = "".concat(N).concat(SS).concat(N).concat(SS).concat(N);\nvar CURVE = "".concat(POINT).concat(SS).concat(POINT);\nvar COMMANDS_REGEXP = new RegExp("(?:(M|L)".concat(S).concat(POINT).concat(S, "|(C)").concat(S).concat(CURVE, ")").concat(S), \'g\');\nvar SCALE = Math.sqrt(3 / 2);\nvar ROT_60 = Math.PI / 3;\nvar ROT_45 = Math.PI / 4;\nvar ROT_CMA = Math.atan(Math.SQRT2);\nvar Colors;\n(function (Colors) {\n    Colors["white"] = "white";\n    Colors["black"] = "black";\n})(Colors || (Colors = {}));\nvar LineCap;\n(function (LineCap) {\n    LineCap["butt"] = "butt";\n    LineCap["square"] = "square";\n    LineCap["round"] = "round";\n})(LineCap || (LineCap = {}));\nvar LineJoin;\n(function (LineJoin) {\n    LineJoin["miter"] = "miter";\n    LineJoin["round"] = "round";\n    LineJoin["bevel"] = "bevel";\n})(LineJoin || (LineJoin = {}));\nvar Command;\n(function (Command) {\n    Command["move"] = "move";\n    Command["line"] = "line";\n    Command["curve"] = "curve";\n})(Command || (Command = {}));\nvar PlaneView;\n(function (PlaneView) {\n    PlaneView["FRONT"] = "FRONT";\n    PlaneView["SIDE"] = "SIDE";\n    PlaneView["TOP"] = "TOP";\n})(PlaneView || (PlaneView = {}));\nvar Axis;\n(function (Axis) {\n    Axis["RIGHT"] = "RIGHT";\n    Axis["LEFT"] = "LEFT";\n    Axis["TOP"] = "TOP";\n})(Axis || (Axis = {}));\nvar Typeof;\n(function (Typeof) {\n    Typeof["UNDEFINED"] = "undefined";\n    Typeof["NUMBER"] = "number";\n})(Typeof || (Typeof = {}));\nvar EVENTS;\n(function (EVENTS) {\n    EVENTS["MOUSE_MOVE"] = "mousemove";\n    EVENTS["MOUSE_DOWN"] = "mousedown";\n    EVENTS["MOUSE_UP"] = "mouseup";\n    EVENTS["TOUCH_START"] = "touchstart";\n    EVENTS["TOUCH_MOVE"] = "touchmove";\n    EVENTS["TOUCH_END"] = "touchend";\n})(EVENTS || (EVENTS = {}));\nvar ORIGIN;\n(function (ORIGIN) {\n    ORIGIN["CENTER"] = "center";\n    ORIGIN["LEFT"] = "left";\n    ORIGIN["RIGHT"] = "right";\n    ORIGIN["TOP"] = "top";\n    ORIGIN["BOTTOM"] = "bottom";\n})(ORIGIN || (ORIGIN = {}));\n\n;// CONCATENATED MODULE: ./src/@utils/math.ts\n\nvar round = function (n, d) {\n    var exp = Math.pow(10, d);\n    return Math.round(n * exp) / exp;\n};\nvar radian = function (a) { return a * Math.PI / 180; };\nvar sincos = function (r) { return ({\n    sin: round(Math.sin(r), DECIMALS),\n    cos: round(Math.cos(r), DECIMALS)\n}); };\nvar getPointsDiff = function (pointA, pointB) { return ({\n    x: pointA.x - pointB.x,\n    y: pointA.y - pointB.y\n}); };\nvar getPointsDistance = function (pointA, pointB) {\n    var diff = getPointsDiff(pointA, pointB);\n    return Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.y, 2));\n};\nvar translatePoint = function (point, angle, distance) { return ({\n    x: point.x + Math.cos(angle) * distance,\n    y: point.y + Math.sin(angle) * distance\n}); };\nvar rotate = function (point, center, angle) {\n    var diff = getPointsDiff(point, center);\n    var x = diff.x * Math.cos(angle) - diff.y * Math.sin(angle);\n    var y = diff.x * Math.sin(angle) + diff.y * Math.cos(angle);\n    return {\n        x: center.x + x,\n        y: center.y + y\n    };\n};\nvar getPointsAngle = function (pointA, pointB) {\n    var diff = getPointsDiff(pointB, pointA);\n    return Math.atan2(diff.y, diff.x);\n};\nvar getOrientation = function (p1, p2, p3) {\n    var value = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);\n    return value >= 0 ? 0 : 1;\n};\nvar getPointFromIsometricPoint = function (centerX, centerY, point, scale) {\n    return {\n        x: round(centerX + (point.r - point.l) * scale * HSQRT3, DECIMALS),\n        y: round(centerY + ((point.r + point.l) / 2 - point.t) * scale, DECIMALS)\n    };\n};\nvar getTopPlanePointFromCoordinates = function (x, y) {\n    var XHSQRT3 = x / HSQRT3;\n    var right = (y * 2 + XHSQRT3) / 2;\n    var left = right - XHSQRT3;\n    return {\n        right: right,\n        left: left\n    };\n};\nvar getFrontPlanePointFromCoordinates = function (x, y) {\n    var left = -x / HSQRT3;\n    var top = left / 2 - y;\n    return {\n        left: left,\n        top: top\n    };\n};\nvar getSidePlanePointFromCoordinates = function (x, y) {\n    var right = x / HSQRT3;\n    var top = right / 2 - y;\n    return {\n        right: right,\n        top: top\n    };\n};\nvar getEllipsisSpecs = function (pointA, pointB, control) {\n    var diff = getPointsDiff(pointB, pointA);\n    var center = { x: pointA.x + diff.x / 2, y: pointA.y + diff.y / 2 };\n    var P = rotate(pointB, center, Math.PI / 2);\n    var D = { x: P.x + (control.x - P.x) / 2, y: P.y + (control.y - P.y) / 2 };\n    var radius = getPointsDistance(D, center);\n    var U = translatePoint(D, getPointsAngle(D, P), radius);\n    var V = translatePoint(D, getPointsAngle(D, control), radius);\n    return [\n        round(getPointsDistance(control, U), DECIMALS),\n        round(getPointsDistance(control, V), DECIMALS),\n        round(getPointsAngle(center, V) * 180 / Math.PI, DECIMALS)\n    ];\n};\nvar randomId = function () { return Math.random().toString(16).slice(2); };\nvar uuid = function () { return Array.from(Array(3)).map(function () { return randomId(); }).join(\'-\'); };\n\n;// CONCATENATED MODULE: ./src/@utils/matrix.ts\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\nvar multiplyMatrix = function (m1, m2) { return (m1.map(function (row, i) { return (m2[0].map(function (_, j) {\n    return row.reduce(function (acc, _, n) {\n        return acc + m1[i][n] * m2[n][j];\n    }, 0);\n})); })); };\nvar multiplyMatrices = function () {\n    var m = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n    }\n    var matrix = m[0];\n    for (var i = 1; i < m.length; i++) {\n        matrix = multiplyMatrix(matrix, m[i]);\n    }\n    return matrix;\n};\nvar rotateX = function (r) {\n    var sc = sincos(r);\n    return [\n        [1, 0, 0],\n        [0, sc.cos, -sc.sin],\n        [0, sc.sin, sc.cos]\n    ];\n};\nvar rotateY = function (r) {\n    var sc = sincos(r);\n    return [\n        [sc.cos, 0, sc.sin],\n        [0, 1, 0],\n        [-sc.sin, 0, sc.cos]\n    ];\n};\nvar rotateZ = function (r) {\n    var sc = sincos(r);\n    return [\n        [sc.cos, -sc.sin, 0],\n        [sc.sin, sc.cos, 0],\n        [0, 0, 1]\n    ];\n};\nvar topMatrix = multiplyMatrices(rotateX(ROT_CMA), rotateZ(-ROT_45));\nvar frontMatrix = multiplyMatrices(rotateZ(-ROT_60), rotateX(ROT_CMA), rotateZ(ROT_45));\nvar sideMatrix = multiplyMatrices(rotateZ(ROT_60), rotateX(ROT_CMA), rotateZ(-ROT_45));\nvar rotationToRotationMatrix = function (view, rotation) {\n    var value = radian(rotation.value);\n    switch (view) {\n        case PlaneView.TOP: {\n            switch (rotation.axis) {\n                case Axis.TOP:\n                    return rotateZ(value);\n                case Axis.LEFT:\n                    return rotateX(-value);\n                case Axis.RIGHT:\n                    return rotateY(value);\n                default:\n                    return null;\n            }\n        }\n        case PlaneView.FRONT: {\n            switch (rotation.axis) {\n                case Axis.TOP:\n                    return rotateY(value);\n                case Axis.LEFT:\n                    return rotateX(value);\n                case Axis.RIGHT:\n                    return rotateZ(value);\n                default:\n                    return null;\n            }\n        }\n        case PlaneView.SIDE: {\n            switch (rotation.axis) {\n                case Axis.TOP:\n                    return rotateY(value);\n                case Axis.LEFT:\n                    return rotateZ(value);\n                case Axis.RIGHT:\n                    return rotateX(-value);\n                default:\n                    return null;\n            }\n        }\n        default:\n            return null;\n    }\n};\nvar getViewMatrix = function (planeView, rotation) {\n    var rotationMatrices = [];\n    var rotationMatrix = rotation\n        ? rotationToRotationMatrix(planeView, rotation)\n        : null;\n    if (rotationMatrix)\n        rotationMatrices.push(rotationMatrix);\n    switch (planeView) {\n        case PlaneView.TOP: {\n            return multiplyMatrices.apply(void 0, __spreadArray([topMatrix], rotationMatrices, false));\n        }\n        case PlaneView.FRONT: {\n            return multiplyMatrices.apply(void 0, __spreadArray([frontMatrix], rotationMatrices, false));\n        }\n        case PlaneView.SIDE: {\n            return multiplyMatrices.apply(void 0, __spreadArray([sideMatrix], rotationMatrices, false));\n        }\n    }\n    return null;\n};\n\n;// CONCATENATED MODULE: ./src/@utils/svg.ts\nvar svg_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\nvar addSVGProperties = function (svg, props) {\n    Object.keys(props).forEach(function (prop) {\n        svg.setAttributeNS(null, prop, props[prop]);\n    });\n};\nvar getCommandsWithStart = function (commands) {\n    return commands.length === 0 || commands[0].command === Command.move\n        ? svg_spreadArray([], commands, true) : svg_spreadArray([\n        {\n            command: Command.move,\n            point: { r: 0, l: 0, t: 0 }\n        }\n    ], commands, true);\n};\nvar getSVGPath = function (commands, centerX, centerY, scale, autoclose) {\n    var drawCommands = getCommandsWithStart(commands);\n    var svgPaths = drawCommands.map(function (c, index) {\n        var point = getPointFromIsometricPoint(centerX, centerY, c.point, scale);\n        switch (c.command) {\n            case Command.move:\n                return "M".concat(point.x, " ").concat(point.y);\n            case Command.line:\n                return "L".concat(point.x, " ").concat(point.y);\n            case Command.curve: {\n                var start = getPointFromIsometricPoint(centerX, centerY, commands[index - 1].point, scale);\n                var control = getPointFromIsometricPoint(centerX, centerY, c.control, scale);\n                var ellipsisSpecs = getEllipsisSpecs(start, point, control);\n                var sweepFlag = getOrientation(start, control, point);\n                return "A ".concat(ellipsisSpecs[0], " ").concat(ellipsisSpecs[1], " ").concat(ellipsisSpecs[2], " 0 ").concat(sweepFlag, " ").concat(point.x, " ").concat(point.y);\n            }\n        }\n    });\n    if (svgPaths.length) {\n        var pathEnd = autoclose ? \'z\' : \'\';\n        return "".concat(svgPaths.join(\' \').trim()).concat(pathEnd);\n    }\n    return \'\';\n};\nvar parseDrawCommands = function (commands) {\n    var commandsArray = [];\n    var array;\n    while ((array = COMMANDS_REGEXP.exec(commands)) !== null) {\n        var command = array[5] || array[1];\n        switch (command) {\n            case \'M\':\n                commandsArray.push({\n                    command: Command.move,\n                    point: { r: +array[2], l: +array[3], t: +array[4] }\n                });\n                break;\n            case \'L\':\n                commandsArray.push({\n                    command: Command.line,\n                    point: { r: +array[2], l: +array[3], t: +array[4] }\n                });\n                break;\n            case \'C\':\n                commandsArray.push({\n                    command: Command.curve,\n                    control: { r: +array[6], l: +array[7], t: +array[8] },\n                    point: { r: +array[9], l: +array[10], t: +array[11] }\n                });\n        }\n    }\n    return commandsArray;\n};\nvar translateCommandPoints = function (commands, right, left, top) {\n    commands.forEach(function (command) {\n        command.point.r += right;\n        command.point.l += left;\n        command.point.t += top;\n        if (command.control) {\n            command.control.r += right;\n            command.control.l += left;\n            command.control.t += top;\n        }\n    });\n};\nvar getTextureCorner = function (commands, centerX, centerY, scale) {\n    var corner = {\n        x: Number.MAX_SAFE_INTEGER,\n        y: Number.MAX_SAFE_INTEGER\n    };\n    getCommandsWithStart(commands)\n        .forEach(function (c) {\n        var point = getPointFromIsometricPoint(centerX, centerY, c.point, scale);\n        if (point.x < corner.x ||\n            (point.x === corner.x &&\n                point.y < corner.y)) {\n            corner.x = point.x;\n            corner.y = point.y;\n        }\n    });\n    return corner;\n};\nvar isSVGProperty = function (property) {\n    return [\n        \'fillColor\',\n        \'fillOpacity\',\n        \'strokeColor\',\n        \'strokeOpacity\',\n        \'strokeWidth\'\n    ].includes(property);\n};\nvar getSVGProperty = function (property) {\n    return {\n        fillColor: \'fill\',\n        fillOpacity: \'fill-opacity\',\n        strokeColor: \'stroke\',\n        strokeOpacity: \'stroke-opacity\',\n        strokeWidth: \'stroke-width\'\n    }[property];\n};\nfunction addEventListenerToElement(element, listeners, event, callback, useCapture) {\n    var listener = {\n        fn: callback,\n        fnBind: callback.bind(this)\n    };\n    listeners.push(listener);\n    element.addEventListener(event, listener.fnBind, useCapture);\n}\nfunction removeEventListenerFromElement(element, listeners, event, callback, useCapture) {\n    var listener;\n    listeners.find(function (ln, index) {\n        if (ln.fn === callback) {\n            listener = listeners.splice(index, 1)[0];\n            return true;\n        }\n    });\n    if (listener) {\n        element.removeEventListener(event, listener.fnBind, useCapture);\n    }\n}\nvar getPatternTransform = function (corner, planeView, scale, rotation) {\n    var matrix = getViewMatrix(planeView, rotation);\n    var transform = "translate(".concat(corner.x, " ").concat(corner.y, ")");\n    if (matrix) {\n        var m1 = round(matrix[0][0], DECIMALS);\n        var m2 = round(matrix[1][0], DECIMALS);\n        var m3 = round(matrix[0][1], DECIMALS);\n        var m4 = round(matrix[1][1], DECIMALS);\n        transform += " matrix(".concat(m1, ",").concat(m2, ",").concat(m3, ",").concat(m4, ",0,0)");\n        transform += " scale(".concat(round(SCALE * (scale || 1), DECIMALS), ")");\n    }\n    else if (scale) {\n        transform += " scale(".concat(round(scale, DECIMALS), ")");\n    }\n    return transform;\n};\nvar elementHasSVGParent = function (element) {\n    if (element.parentNode) {\n        if (element.parentNode.constructor.name === \'SVGSVGElement\') {\n            return true;\n        }\n        return elementHasSVGParent(element.parentNode);\n    }\n    return false;\n};\n\n;// CONCATENATED MODULE: ./src/@store/index.ts\nvar Store = (function () {\n    function Store(width, height, scale) {\n        this.sizes = {\n            centerX: width / 2,\n            centerY: height / 2,\n            height: height,\n            width: width,\n            scale: scale\n        };\n    }\n    Object.defineProperty(Store.prototype, "width", {\n        get: function () {\n            return this.sizes.width;\n        },\n        set: function (value) {\n            this.sizes.width = value;\n            this.sizes.centerX = value / 2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, "height", {\n        get: function () {\n            return this.sizes.height;\n        },\n        set: function (value) {\n            this.sizes.height = value;\n            this.sizes.centerY = value / 2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, "scale", {\n        get: function () {\n            return this.sizes.scale;\n        },\n        set: function (value) {\n            this.sizes.scale = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, "centerX", {\n        get: function () {\n            return this.sizes.centerX;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Store.prototype, "centerY", {\n        get: function () {\n            return this.sizes.centerY;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Store;\n}());\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricStore/IsometricStore.ts\nvar IsometricStore = (function () {\n    function IsometricStore() {\n    }\n    Object.defineProperty(IsometricStore.prototype, "data", {\n        get: function () {\n            return this.dataStore;\n        },\n        set: function (store) {\n            this.dataStore = store;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IsometricStore;\n}());\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricStore/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricElementAbstract/IsometricElementAbstract.ts\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nvar IsometricElementAbstract = (function (_super) {\n    __extends(IsometricElementAbstract, _super);\n    function IsometricElementAbstract(svgElement) {\n        var _this = _super.call(this) || this;\n        _this.listeners = [];\n        _this.element = document.createElementNS(SVG_NAMESPACE, svgElement);\n        return _this;\n    }\n    IsometricElementAbstract.prototype.getElement = function () {\n        return this.element;\n    };\n    IsometricElementAbstract.prototype.addEventListener = function (event, callback, useCapture) {\n        if (useCapture === void 0) { useCapture = false; }\n        addEventListenerToElement.call(this, this.element, this.listeners, event, callback, useCapture);\n        return this;\n    };\n    IsometricElementAbstract.prototype.removeEventListener = function (event, callback, useCapture) {\n        if (useCapture === void 0) { useCapture = false; }\n        removeEventListenerFromElement(this.element, this.listeners, event, callback, useCapture);\n        return this;\n    };\n    return IsometricElementAbstract;\n}(IsometricStore));\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricElementAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricGraphicAbstract/IsometricGraphicAbstract.ts\nvar IsometricGraphicAbstract_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nvar defaultObjectProps = {\n    fillColor: Colors.white,\n    fillOpacity: 1,\n    strokeColor: Colors.black,\n    strokeDashArray: [],\n    strokeLinecap: LineCap.butt,\n    strokeLinejoin: LineJoin.round,\n    strokeOpacity: 1,\n    strokeWidth: 1\n};\nvar IsometricGraphicAbstract = (function (_super) {\n    IsometricGraphicAbstract_extends(IsometricGraphicAbstract, _super);\n    function IsometricGraphicAbstract(props, svgElement) {\n        var _this = _super.call(this, svgElement) || this;\n        _this.props = __assign(__assign({}, defaultObjectProps), props);\n        _this.animations = [];\n        if (_this.props.texture) {\n            _this.createTexture(_this.props.texture);\n        }\n        addSVGProperties(_this.element, {\n            \'fill\': _this.props.texture\n                ? "url(#".concat(_this.patternId, ") ").concat(_this.fillColor)\n                : _this.fillColor,\n            \'fill-opacity\': "".concat(_this.fillOpacity),\n            \'stroke\': _this.strokeColor,\n            \'stroke-dasharray\': _this.strokeDashArray.join(\' \'),\n            \'stroke-linecap\': _this.strokeLinecap,\n            \'stroke-linejoin\': _this.strokeLinejoin,\n            \'stroke-opacity\': "".concat(_this.strokeOpacity),\n            \'stroke-width\': "".concat(_this.strokeWidth)\n        });\n        return _this;\n    }\n    IsometricGraphicAbstract.prototype.createTexture = function (texture) {\n        this.patternId = uuid();\n        this.pattern = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.pattern);\n        addSVGProperties(this.pattern, {\n            \'id\': this.patternId,\n            \'preserveAspectRatio\': \'none\',\n            \'patternUnits\': \'userSpaceOnUse\'\n        });\n        var image = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.image);\n        addSVGProperties(image, {\n            \'href\': texture.url,\n            \'x\': \'0\',\n            \'y\': \'0\',\n            \'preserveAspectRatio\': \'none\'\n        });\n        if (texture.pixelated) {\n            addSVGProperties(image, {\n                \'style\': \'image-rendering: pixelated\'\n            });\n        }\n        this.pattern.appendChild(image);\n    };\n    IsometricGraphicAbstract.prototype._updateTexture = function () {\n        var image = this.pattern.firstChild;\n        if (this.props.texture.url &&\n            image.getAttribute(\'href\') !== this.props.texture.url) {\n            addSVGProperties(image, {\n                \'href\': this.props.texture.url\n            });\n        }\n        if (this.props.texture.pixelated) {\n            addSVGProperties(image, {\n                \'style\': \'image-rendering: pixelated\'\n            });\n        }\n        else {\n            image.removeAttribute(\'style\');\n        }\n        this.update();\n    };\n    IsometricGraphicAbstract.prototype.addAnimationBasicProperties = function (attributeName, animation) {\n        addSVGProperties(animation.element, {\n            repeatCount: "".concat(animation.repeat || \'indefinite\'),\n            attributeName: attributeName,\n            dur: "".concat(animation.duration || 1, "s")\n        });\n    };\n    IsometricGraphicAbstract.prototype.updateAnimations = function () {\n        var _this = this;\n        this.animations.forEach(function (animation) {\n            var isNativeSVGProperty = isSVGProperty(animation.property);\n            if (isNativeSVGProperty) {\n                var property = getSVGProperty(animation.property);\n                if (!animation.element) {\n                    animation.element = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.animate);\n                }\n                if (!animation.element.parentNode) {\n                    _this.element.appendChild(animation.element);\n                }\n                _this.addAnimationBasicProperties(property, animation);\n                if (animation.values) {\n                    addSVGProperties(animation.element, {\n                        values: Array.isArray(animation.values)\n                            ? animation.values.map(function (value) { return "".concat(value); }).join(\';\')\n                            : "".concat(animation.values)\n                    });\n                }\n                else {\n                    addSVGProperties(animation.element, {\n                        from: "".concat(animation.from),\n                        to: "".concat(animation.to)\n                    });\n                }\n            }\n        });\n        this.updateSubClassAnimations();\n    };\n    IsometricGraphicAbstract.prototype.updatePatternTransform = function (corner, planeView) {\n        var _a, _b, _c;\n        if (this.props.texture) {\n            var height = this.props.texture.height\n                ? "".concat(this.props.texture.height * this.data.scale)\n                : \'100%\';\n            var width = this.props.texture.width\n                ? "".concat(this.props.texture.width * this.data.scale)\n                : \'100%\';\n            var shift = getPointFromIsometricPoint(0, 0, {\n                r: ((_a = this.props.texture.shift) === null || _a === void 0 ? void 0 : _a.right) || 0,\n                l: ((_b = this.props.texture.shift) === null || _b === void 0 ? void 0 : _b.left) || 0,\n                t: ((_c = this.props.texture.shift) === null || _c === void 0 ? void 0 : _c.top) || 0\n            }, this.data.scale);\n            var transform = getPatternTransform({\n                x: round(corner.x + shift.x, DECIMALS),\n                y: round(corner.y + shift.y, DECIMALS)\n            }, this.props.texture.planeView || planeView, this.props.texture.scale, this.props.texture.rotation);\n            addSVGProperties(this.pattern, {\n                \'patternTransform\': transform,\n                \'height\': height,\n                \'width\': width\n            });\n            addSVGProperties(this.pattern.firstChild, {\n                \'height\': height,\n                \'width\': width\n            });\n        }\n    };\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "fillColor", {\n        get: function () {\n            return this.props.fillColor;\n        },\n        set: function (value) {\n            this.props.fillColor = value;\n            addSVGProperties(this.element, {\n                \'fill\': this.props.texture\n                    ? "url(#".concat(this.patternId, ") ").concat(this.fillColor)\n                    : this.fillColor\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "fillOpacity", {\n        get: function () {\n            return this.props.fillOpacity;\n        },\n        set: function (value) {\n            this.props.fillOpacity = value;\n            addSVGProperties(this.element, { \'fill-opacity\': "".concat(this.fillOpacity) });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "texture", {\n        get: function () {\n            return this.props.texture;\n        },\n        set: function (value) {\n            var hasTexture = !!this.props.texture;\n            this.props.texture = value;\n            if (hasTexture) {\n                this._updateTexture();\n            }\n            else {\n                this.createTexture(this.props.texture);\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeColor", {\n        get: function () {\n            return this.props.strokeColor;\n        },\n        set: function (value) {\n            this.props.strokeColor = value;\n            addSVGProperties(this.element, { \'stroke\': this.strokeColor });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeDashArray", {\n        get: function () {\n            return this.props.strokeDashArray;\n        },\n        set: function (value) {\n            this.props.strokeDashArray = value;\n            addSVGProperties(this.element, { \'stroke-dasharray\': this.strokeDashArray.join(\' \') });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeLinecap", {\n        get: function () {\n            return this.props.strokeLinecap;\n        },\n        set: function (value) {\n            this.props.strokeLinecap = LineCap[value];\n            addSVGProperties(this.element, { \'stroke-linecap\': this.strokeLinecap });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeLinejoin", {\n        get: function () {\n            return this.props.strokeLinejoin;\n        },\n        set: function (value) {\n            this.props.strokeLinejoin = LineJoin[value];\n            addSVGProperties(this.element, { \'stroke-linejoin\': this.strokeLinejoin });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeOpacity", {\n        get: function () {\n            return this.props.strokeOpacity;\n        },\n        set: function (value) {\n            this.props.strokeOpacity = value;\n            addSVGProperties(this.element, { \'stroke-opacity\': "".concat(this.strokeOpacity) });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricGraphicAbstract.prototype, "strokeWidth", {\n        get: function () {\n            return this.props.strokeWidth;\n        },\n        set: function (value) {\n            this.props.strokeWidth = value;\n            addSVGProperties(this.element, { \'stroke-width\': "".concat(this.strokeWidth) });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricGraphicAbstract.prototype.getPattern = function () {\n        return this.pattern;\n    };\n    IsometricGraphicAbstract.prototype.updateTexture = function (value) {\n        var hasTexture = !!this.props.texture;\n        if (hasTexture || value.url) {\n            var shift = value.shift, rotation = value.rotation, newProps = __rest(value, ["shift", "rotation"]);\n            this.props.texture = hasTexture\n                ? __assign(__assign({}, this.props.texture), newProps) : __assign({}, newProps);\n            if (shift) {\n                this.props.texture.shift = __assign(__assign({}, (this.props.texture.shift || {})), shift);\n            }\n            if (rotation) {\n                this.props.texture.rotation = rotation;\n            }\n            if (hasTexture) {\n                this._updateTexture();\n            }\n            else {\n                this.createTexture(this.props.texture);\n                this.update();\n            }\n        }\n        return this;\n    };\n    IsometricGraphicAbstract.prototype.addAnimation = function (animation) {\n        this.animations.push(__assign({}, animation));\n        this.update();\n        return this;\n    };\n    IsometricGraphicAbstract.prototype.removeAnimationByIndex = function (index) {\n        if (index >= 0 && index < this.animations.length) {\n            var animation = this.animations.splice(index, 1)[0];\n            if (animation.element && animation.element.parentNode) {\n                animation.element.parentNode.removeChild(animation.element);\n            }\n        }\n        return this;\n    };\n    IsometricGraphicAbstract.prototype.removeAnimations = function () {\n        var animations = this.animations.splice(0);\n        animations.forEach(function (animation) {\n            if (animation.element && animation.element.parentNode) {\n                animation.element.parentNode.removeChild(animation.element);\n            }\n        });\n        return this;\n    };\n    return IsometricGraphicAbstract;\n}(IsometricElementAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricGraphicAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricContainerAbstract/IsometricContainerAbstract.ts\nvar IsometricContainerAbstract_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nvar IsometricContainerAbstract = (function (_super) {\n    IsometricContainerAbstract_extends(IsometricContainerAbstract, _super);\n    function IsometricContainerAbstract(svgElement) {\n        var _this = _super.call(this, svgElement) || this;\n        _this._children = [];\n        return _this;\n    }\n    IsometricContainerAbstract.prototype.getChildIndex = function (child) {\n        return this._children.indexOf(child);\n    };\n    IsometricContainerAbstract.prototype.throwChildError = function () {\n        throw new Error(\'You cannot provide a child that is not a children of the container\');\n    };\n    IsometricContainerAbstract.prototype.removeSVGChild = function (child) {\n        var svgChild = child.getElement();\n        if (child instanceof IsometricGraphicAbstract) {\n            var svgPatternChild = child.getPattern();\n            if (svgPatternChild && svgPatternChild.parentNode) {\n                this.element.removeChild(svgPatternChild);\n            }\n        }\n        if (svgChild.parentNode) {\n            this.element.removeChild(svgChild);\n        }\n    };\n    IsometricContainerAbstract.prototype.insertPattern = function (pattern) {\n        if (pattern) {\n            this.element.insertBefore(pattern, this.element.firstChild);\n        }\n    };\n    Object.defineProperty(IsometricContainerAbstract.prototype, "children", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricContainerAbstract.prototype.update = function () {\n        var _this = this;\n        if (elementHasSVGParent(this.element)) {\n            this._children.forEach(function (child) {\n                child.data = _this.data;\n                child.update();\n            });\n        }\n        return this;\n    };\n    IsometricContainerAbstract.prototype.clear = function () {\n        var _this = this;\n        var children = this._children.splice(0);\n        children.forEach(function (child) {\n            _this.removeSVGChild(child);\n        });\n        return this;\n    };\n    IsometricContainerAbstract.prototype.addChild = function (child) {\n        child.data = this.data;\n        this._children.push(child);\n        if (child instanceof IsometricGraphicAbstract) {\n            this.insertPattern(child.getPattern());\n        }\n        this.element.appendChild(child.getElement());\n        child.update();\n        return this;\n    };\n    IsometricContainerAbstract.prototype.addChildren = function () {\n        var _this = this;\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments[_i];\n        }\n        children.forEach(function (child) { return _this.addChild(child); });\n        return this;\n    };\n    IsometricContainerAbstract.prototype.removeChild = function (child) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            this._children.splice(childIndex, 1);\n            this.removeSVGChild(child);\n            return this;\n        }\n        this.throwChildError();\n    };\n    IsometricContainerAbstract.prototype.removeChildren = function () {\n        var _this = this;\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments[_i];\n        }\n        children.forEach(function (child) {\n            var childIndex = _this.getChildIndex(child);\n            if (childIndex === -1) {\n                _this.throwChildError();\n            }\n            _this.removeChild(child);\n        });\n        return this;\n    };\n    IsometricContainerAbstract.prototype.removeChildByIndex = function (index) {\n        if (index >= 0 && index < this._children.length) {\n            var child = this._children.splice(index, 1)[0];\n            this.removeSVGChild(child);\n        }\n        return this;\n    };\n    IsometricContainerAbstract.prototype.setChildIndex = function (child, index) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            index = Math.min(Math.max(0, index), this._children.length - 1);\n            var movedElement = child.getElement();\n            var replacedElement = this._children[index].getElement();\n            if (this._children[index] !== child) {\n                this._children.splice(childIndex, 1);\n                this._children.splice(index, 0, child);\n                if (childIndex > index) {\n                    this.element.insertBefore(movedElement, replacedElement);\n                }\n                else {\n                    if (replacedElement.nextSibling) {\n                        this.element.insertBefore(movedElement, replacedElement.nextSibling);\n                    }\n                    else {\n                        this.element.appendChild(movedElement);\n                    }\n                }\n            }\n            return this;\n        }\n        this.throwChildError();\n    };\n    IsometricContainerAbstract.prototype.bringChildToFront = function (child) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            this.setChildIndex(child, this._children.length - 1);\n            return this;\n        }\n        this.throwChildError();\n    };\n    IsometricContainerAbstract.prototype.bringChildForward = function (child) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            if (childIndex < this._children.length - 1) {\n                this.setChildIndex(child, childIndex + 1);\n            }\n            return this;\n        }\n        this.throwChildError();\n    };\n    IsometricContainerAbstract.prototype.sendChildToBack = function (child) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            this.setChildIndex(child, 0);\n            return this;\n        }\n        this.throwChildError();\n    };\n    IsometricContainerAbstract.prototype.sendChildBackward = function (child) {\n        var childIndex = this.getChildIndex(child);\n        if (childIndex > -1) {\n            if (childIndex > 0) {\n                this.setChildIndex(child, childIndex - 1);\n            }\n            return this;\n        }\n        this.throwChildError();\n    };\n    return IsometricContainerAbstract;\n}(IsometricElementAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricContainerAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricCanvas/IsometricCanvas.ts\nvar IsometricCanvas_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricCanvas_assign = (undefined && undefined.__assign) || function () {\n    IsometricCanvas_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricCanvas_assign.apply(this, arguments);\n};\n\n\n\n\nvar defaultProps = {\n    container: \'body\',\n    backgroundColor: Colors.white,\n    scale: 1,\n    height: DEFAULT_HEIGHT,\n    width: DEFAULT_WIDTH\n};\nvar IsometricCanvas = (function (_super) {\n    IsometricCanvas_extends(IsometricCanvas, _super);\n    function IsometricCanvas(props) {\n        var _a;\n        if (props === void 0) { props = {}; }\n        var _this = _super.call(this, SVG_ELEMENTS.svg) || this;\n        _this.props = IsometricCanvas_assign(IsometricCanvas_assign({}, defaultProps), props);\n        _this.isAnimated = true;\n        _this.data = new Store(_this.props.width, _this.props.height, _this.props.scale);\n        addSVGProperties(_this.element, (_a = {},\n            _a[SVG_PROPERTIES.viewBox] = "0 0 ".concat(_this.data.width, " ").concat(_this.data.height),\n            _a.width = "".concat(_this.data.width, "px"),\n            _a.height = "".concat(_this.data.height, "px"),\n            _a));\n        _this.background = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.rect);\n        addSVGProperties(_this.background, {\n            fill: _this.backgroundColor,\n            x: \'0\',\n            y: \'0\',\n            width: "".concat(_this.data.width, "px"),\n            height: "".concat(_this.data.height, "px")\n        });\n        _this.element.appendChild(_this.background);\n        var containerElement = typeof _this.props.container === \'string\'\n            ? document.querySelector(_this.props.container)\n            : _this.props.container;\n        containerElement.appendChild(_this.element);\n        return _this;\n    }\n    IsometricCanvas.prototype.getSVGCode = function () {\n        return this.element.outerHTML;\n    };\n    Object.defineProperty(IsometricCanvas.prototype, "backgroundColor", {\n        get: function () {\n            return this.props.backgroundColor;\n        },\n        set: function (value) {\n            this.props.backgroundColor = value;\n            addSVGProperties(this.background, { fill: this.backgroundColor });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricCanvas.prototype, "scale", {\n        get: function () {\n            return this.data.scale;\n        },\n        set: function (value) {\n            this.data.scale = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricCanvas.prototype, "height", {\n        get: function () {\n            return this.data.height;\n        },\n        set: function (value) {\n            var _a;\n            this.data.height = value;\n            addSVGProperties(this.element, (_a = {},\n                _a[SVG_PROPERTIES.viewBox] = "0 0 ".concat(this.data.width, " ").concat(this.data.height),\n                _a.height = "".concat(this.data.height, "px"),\n                _a));\n            addSVGProperties(this.background, {\n                height: "".concat(this.data.height, "px")\n            });\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricCanvas.prototype, "width", {\n        get: function () {\n            return this.data.width;\n        },\n        set: function (value) {\n            var _a;\n            this.data.width = value;\n            addSVGProperties(this.element, (_a = {},\n                _a[SVG_PROPERTIES.viewBox] = "0 0 ".concat(this.data.width, " ").concat(this.data.height),\n                _a.width = "".concat(this.data.width, "px"),\n                _a));\n            addSVGProperties(this.background, {\n                width: "".concat(this.data.width, "px")\n            });\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricCanvas.prototype, "animated", {\n        get: function () {\n            return this.isAnimated;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricCanvas.prototype.pauseAnimations = function () {\n        var svg = this.element;\n        if (typeof svg.pauseAnimations === \'function\') {\n            svg.pauseAnimations();\n        }\n        this.isAnimated = false;\n        return this;\n    };\n    IsometricCanvas.prototype.resumeAnimations = function () {\n        var svg = this.element;\n        if (typeof svg.unpauseAnimations === \'function\') {\n            svg.unpauseAnimations();\n        }\n        this.isAnimated = true;\n        return this;\n    };\n    return IsometricCanvas;\n}(IsometricContainerAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricCanvas/index.ts\n\n\n\n;// CONCATENATED MODULE: ./src/@utils/other.ts\nvar applyMixins = function (BaseClass, constructor) {\n    Object.getOwnPropertyNames(constructor.prototype).forEach(function (name) {\n        Object.defineProperty(BaseClass.prototype, name, Object.getOwnPropertyDescriptor(constructor.prototype, name));\n    });\n};\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricDraggableAbstract/constants.ts\nvar NO_LIMITS = [\n    Number.MIN_SAFE_INTEGER,\n    Number.MAX_SAFE_INTEGER\n];\nvar DRAG_EVENT;\n(function (DRAG_EVENT) {\n    DRAG_EVENT["DRAG_START"] = "dragstart";\n    DRAG_EVENT["DRAG"] = "drag";\n    DRAG_EVENT["DRAG_END"] = "dragend";\n})(DRAG_EVENT || (DRAG_EVENT = {}));\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricDraggableAbstract/IsometricDraggableAbstract.ts\nvar IsometricDraggableAbstract_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricDraggableAbstract_assign = (undefined && undefined.__assign) || function () {\n    IsometricDraggableAbstract_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricDraggableAbstract_assign.apply(this, arguments);\n};\nvar IsometricDraggableAbstract_spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\nvar _isBrowser = typeof window !== Typeof.UNDEFINED;\nvar _requestAnimationFrame = _isBrowser\n    ? (window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame)\n    : null;\nvar _dragStoreDefault = {\n    right: 0,\n    left: 0,\n    top: 0,\n    x: 0,\n    y: 0\n};\nvar isMouseEvent = function (event) { return \'clientX\' in event; };\nvar getClientCoords = function (event) {\n    if (event instanceof Event) {\n        if (isMouseEvent(event)) {\n            return {\n                clientX: event.clientX,\n                clientY: event.clientY\n            };\n        }\n        return {\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY\n        };\n    }\n    return event;\n};\nvar IsometricDraggableAbstract = (function (_super) {\n    IsometricDraggableAbstract_extends(IsometricDraggableAbstract, _super);\n    function IsometricDraggableAbstract() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IsometricDraggableAbstract.prototype.setup = function () {\n        this.startDrag = this.startDrag.bind(this);\n        this.stopDrag = this.stopDrag.bind(this);\n        this.moveElement = this.moveElement.bind(this);\n        this.dropElement = this.dropElement.bind(this);\n        this.animate = this.animate.bind(this);\n        if (typeof this._bounds === Typeof.UNDEFINED) {\n            this._bounds = false;\n        }\n        if (typeof this._dragStore === Typeof.UNDEFINED) {\n            this._dragStore = _dragStoreDefault;\n        }\n        if (typeof this._coords === Typeof.UNDEFINED) {\n            this._coords = {};\n        }\n    };\n    IsometricDraggableAbstract.prototype.betweenBounds = function (value, bounds) {\n        var orderedBounds = IsometricDraggableAbstract_spreadArray([], bounds, true).sort();\n        return round(Math.min(Math.max(value, orderedBounds[0]), orderedBounds[1]), DECIMALS);\n    };\n    IsometricDraggableAbstract.prototype.getRight = function (value) {\n        var bounds = this._bounds && this._bounds.right || NO_LIMITS;\n        return this.betweenBounds(this._dragStore.right + value / this.data.scale, bounds);\n    };\n    IsometricDraggableAbstract.prototype.getLeft = function (value) {\n        var bounds = this._bounds && this._bounds.left || NO_LIMITS;\n        return this.betweenBounds(this._dragStore.left + value / this.data.scale, bounds);\n    };\n    IsometricDraggableAbstract.prototype.getTop = function (value) {\n        var bounds = this._bounds && this._bounds.top || NO_LIMITS;\n        return this.betweenBounds(this._dragStore.top + value / this.data.scale, bounds);\n    };\n    IsometricDraggableAbstract.prototype.getFixedCoordinates = function (coords) {\n        var _this = this;\n        return Object.entries(coords).reduce(function (acc, entry) {\n            var fixedCoords = IsometricDraggableAbstract_assign({}, acc);\n            switch (entry[0]) {\n                case \'right\':\n                    fixedCoords.right = _this.getRight(entry[1]);\n                    break;\n                case \'left\':\n                    fixedCoords.left = _this.getLeft(entry[1]);\n                    break;\n                default:\n                    fixedCoords.top = _this.getTop(entry[1]);\n            }\n            return fixedCoords;\n        }, {});\n    };\n    IsometricDraggableAbstract.prototype.dispatchEvent = function (eventType) {\n        var dragEvent = new CustomEvent(eventType, {\n            cancelable: eventType === DRAG_EVENT.DRAG,\n            detail: {\n                right: this._coords.right || this.right,\n                left: this._coords.left || this.left,\n                top: this._coords.top || this.top\n            }\n        });\n        this.element.dispatchEvent(dragEvent);\n        return dragEvent;\n    };\n    IsometricDraggableAbstract.prototype.animate = function () {\n        if (this._update) {\n            if (!this._prevented) {\n                if (typeof this._coords.right === Typeof.NUMBER) {\n                    this.right = this._coords.right;\n                }\n                if (typeof this._coords.left === Typeof.NUMBER) {\n                    this.left = this._coords.left;\n                }\n                if (typeof this._coords.top === Typeof.NUMBER) {\n                    this.top = this._coords.top;\n                }\n            }\n            _requestAnimationFrame(this.animate);\n        }\n    };\n    IsometricDraggableAbstract.prototype.startDrag = function (event) {\n        event.preventDefault();\n        var _a = getClientCoords(event), clientX = _a.clientX, clientY = _a.clientY;\n        this._dragStore.x = clientX;\n        this._dragStore.y = clientY;\n        this._dragStore.right = this.right;\n        this._dragStore.left = this.left;\n        this._dragStore.top = this.top;\n        this._update = true;\n        this.moveElement({ clientX: clientX, clientY: clientY });\n        this.element.addEventListener(EVENTS.TOUCH_MOVE, this.moveElement, true);\n        this.element.addEventListener(EVENTS.TOUCH_END, this.dropElement, true);\n        document.addEventListener(EVENTS.MOUSE_MOVE, this.moveElement, true);\n        document.addEventListener(EVENTS.MOUSE_UP, this.dropElement, true);\n        _requestAnimationFrame(this.animate);\n    };\n    IsometricDraggableAbstract.prototype.moveElement = function (event) {\n        var _a = getClientCoords(event), clientX = _a.clientX, clientY = _a.clientY;\n        var diffX = clientX - this._dragStore.x;\n        var diffY = clientY - this._dragStore.y;\n        if (this._drag === PlaneView.TOP) {\n            this._coords = this.getFixedCoordinates(getTopPlanePointFromCoordinates(diffX, diffY));\n        }\n        else if (this._drag === PlaneView.FRONT) {\n            this._coords = this.getFixedCoordinates(getFrontPlanePointFromCoordinates(diffX, diffY));\n        }\n        else {\n            this._coords = this.getFixedCoordinates(getSidePlanePointFromCoordinates(diffX, diffY));\n        }\n        var dragEvent;\n        if (event instanceof Event) {\n            event.preventDefault();\n            if (!this._dragging) {\n                this.dispatchEvent(DRAG_EVENT.DRAG_START);\n            }\n            this._dragging = true;\n            dragEvent = this.dispatchEvent(DRAG_EVENT.DRAG);\n        }\n        this._prevented = !!(dragEvent && dragEvent.defaultPrevented);\n    };\n    IsometricDraggableAbstract.prototype.dropElement = function () {\n        this._update = false;\n        this._dragging = false;\n        this.element.removeEventListener(EVENTS.TOUCH_MOVE, this.moveElement, true);\n        this.element.removeEventListener(EVENTS.TOUCH_END, this.dropElement, true);\n        document.removeEventListener(EVENTS.MOUSE_MOVE, this.moveElement, true);\n        document.removeEventListener(EVENTS.MOUSE_UP, this.dropElement, true);\n        this.dispatchEvent(DRAG_EVENT.DRAG_END);\n    };\n    IsometricDraggableAbstract.prototype.beginDrag = function () {\n        this.element.addEventListener(EVENTS.TOUCH_START, this.startDrag, true);\n        this.element.addEventListener(EVENTS.MOUSE_DOWN, this.startDrag, true);\n    };\n    IsometricDraggableAbstract.prototype.stopDrag = function () {\n        this.element.removeEventListener(EVENTS.TOUCH_START, this.startDrag, true);\n        this.element.removeEventListener(EVENTS.TOUCH_MOVE, this.moveElement, true);\n        this.element.removeEventListener(EVENTS.TOUCH_END, this.dropElement, true);\n        this.element.removeEventListener(EVENTS.MOUSE_DOWN, this.startDrag, true);\n        document.removeEventListener(EVENTS.MOUSE_MOVE, this.moveElement, true);\n        document.removeEventListener(EVENTS.MOUSE_UP, this.dropElement, true);\n    };\n    Object.defineProperty(IsometricDraggableAbstract.prototype, "right", {\n        get: function () {\n            return this.props.right;\n        },\n        set: function (value) {\n            if (this.props.right !== value) {\n                this.props.right = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricDraggableAbstract.prototype, "left", {\n        get: function () {\n            return this.props.left;\n        },\n        set: function (value) {\n            if (this.props.left !== value) {\n                this.props.left = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricDraggableAbstract.prototype, "top", {\n        get: function () {\n            return this.props.top;\n        },\n        set: function (value) {\n            if (this.props.top !== value) {\n                this.props.top = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricDraggableAbstract.prototype, "drag", {\n        get: function () {\n            return this._drag || false;\n        },\n        set: function (value) {\n            if (typeof this._drag === Typeof.UNDEFINED) {\n                this.setup();\n            }\n            this._drag = value;\n            if (_isBrowser) {\n                this.stopDrag();\n                this.beginDrag();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricDraggableAbstract.prototype, "bounds", {\n        get: function () {\n            return this._bounds || false;\n        },\n        set: function (value) {\n            this._bounds = value;\n            var boundsRight = this._bounds && this._bounds.right || NO_LIMITS;\n            var boundsLeft = this._bounds && this._bounds.left || NO_LIMITS;\n            var boundsTop = this._bounds && this._bounds.top || NO_LIMITS;\n            this.right = this.betweenBounds(this.right, boundsRight);\n            this.left = this.betweenBounds(this.left, boundsLeft);\n            this.top = this.betweenBounds(this.top, boundsTop);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IsometricDraggableAbstract;\n}(IsometricElementAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricDraggableAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricGroup/IsometricGroup.ts\nvar IsometricGroup_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricGroup_assign = (undefined && undefined.__assign) || function () {\n    IsometricGroup_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricGroup_assign.apply(this, arguments);\n};\n\n\n\n\n\n\nvar IsometricGroup_defaultProps = {\n    right: 0,\n    left: 0,\n    top: 0,\n};\nvar IsometricGroup = (function (_super) {\n    IsometricGroup_extends(IsometricGroup, _super);\n    function IsometricGroup(props) {\n        if (props === void 0) { props = {}; }\n        var _this = _super.call(this, SVG_ELEMENTS.group) || this;\n        _this.props = IsometricGroup_assign(IsometricGroup_assign({}, IsometricGroup_defaultProps), props);\n        return _this;\n    }\n    IsometricGroup.prototype.update = function () {\n        if (elementHasSVGParent(this.element)) {\n            var point = getPointFromIsometricPoint(0, 0, {\n                r: this.props.right,\n                l: this.props.left,\n                t: this.props.top\n            }, this.data.scale);\n            addSVGProperties(this.element, {\n                transform: "translate(".concat(point.x, ", ").concat(point.y, ")")\n            });\n        }\n        return _super.prototype.update.call(this);\n    };\n    return IsometricGroup;\n}(IsometricContainerAbstract));\n\napplyMixins(IsometricGroup, IsometricDraggableAbstract);\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricGroup/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricPathAbstract/IsometricPathAbstract.ts\nvar IsometricPathAbstract_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar IsometricPathAbstract = (function (_super) {\n    IsometricPathAbstract_extends(IsometricPathAbstract, _super);\n    function IsometricPathAbstract(props, svgElement) {\n        return _super.call(this, props, svgElement) || this;\n    }\n    IsometricPathAbstract.prototype.updateGraphic = function (planeView, autoclose) {\n        if (autoclose === void 0) { autoclose = true; }\n        if (elementHasSVGParent(this.element)) {\n            var commands = this.getCommands();\n            var corner = getTextureCorner(commands, this.data.centerX, this.data.centerY, this.data.scale);\n            addSVGProperties(this.element, {\n                d: getSVGPath(commands, this.data.centerX, this.data.centerY, this.data.scale, autoclose)\n            });\n            this.updatePatternTransform(corner, planeView);\n            this.updateAnimations();\n        }\n    };\n    return IsometricPathAbstract;\n}(IsometricGraphicAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricPathAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricShapeAbstract/IsometricShapeAbstract.ts\nvar IsometricShapeAbstract_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricShapeAbstract_assign = (undefined && undefined.__assign) || function () {\n    IsometricShapeAbstract_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricShapeAbstract_assign.apply(this, arguments);\n};\n\n\n\n\n\nvar IsometricShapeAbstract_defaultProps = {\n    right: 0,\n    left: 0,\n    top: 0,\n};\nvar IsometricShapeAbstract = (function (_super) {\n    IsometricShapeAbstract_extends(IsometricShapeAbstract, _super);\n    function IsometricShapeAbstract(props) {\n        return _super.call(this, IsometricShapeAbstract_assign(IsometricShapeAbstract_assign({}, IsometricShapeAbstract_defaultProps), props), SVG_ELEMENTS.path) || this;\n    }\n    IsometricShapeAbstract.prototype.update = function () {\n        this.updateGraphic(this.planeView);\n        return this;\n    };\n    IsometricShapeAbstract.prototype.clear = function () {\n        addSVGProperties(this.element, {\n            d: \'\'\n        });\n        return this;\n    };\n    Object.defineProperty(IsometricShapeAbstract.prototype, "planeView", {\n        get: function () {\n            return this.props.planeView;\n        },\n        set: function (value) {\n            this.props.planeView = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IsometricShapeAbstract;\n}(IsometricPathAbstract));\n\napplyMixins(IsometricShapeAbstract, IsometricDraggableAbstract);\n\n;// CONCATENATED MODULE: ./src/@classes/abstract/IsometricShapeAbstract/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricRectangle/IsometricRectangle.ts\nvar IsometricRectangle_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricRectangle_assign = (undefined && undefined.__assign) || function () {\n    IsometricRectangle_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricRectangle_assign.apply(this, arguments);\n};\nvar IsometricRectangle_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nvar IsometricRectangle = (function (_super) {\n    IsometricRectangle_extends(IsometricRectangle, _super);\n    function IsometricRectangle(props) {\n        var _this = this;\n        var height = props.height, width = props.width, rest = IsometricRectangle_rest(props, ["height", "width"]);\n        _this = _super.call(this, rest) || this;\n        _this._width = width;\n        _this._height = height;\n        return _this;\n    }\n    IsometricRectangle.prototype.getCommands = function (args) {\n        var right = (args === null || args === void 0 ? void 0 : args.right) || this.right;\n        var left = (args === null || args === void 0 ? void 0 : args.left) || this.left;\n        var top = (args === null || args === void 0 ? void 0 : args.top) || this.top;\n        var width = (args === null || args === void 0 ? void 0 : args.width) || this.width;\n        var height = (args === null || args === void 0 ? void 0 : args.height) || this.height;\n        var commands = [{ command: Command.move, point: { r: 0, l: 0, t: 0 } }];\n        switch (this.planeView) {\n            case PlaneView.FRONT:\n                commands.push({ command: Command.line, point: { r: 0, l: width, t: 0 } }, { command: Command.line, point: { r: 0, l: width, t: height } }, { command: Command.line, point: { r: 0, l: 0, t: height } });\n                break;\n            case PlaneView.SIDE:\n                commands.push({ command: Command.line, point: { r: width, l: 0, t: 0 } }, { command: Command.line, point: { r: width, l: 0, t: height } }, { command: Command.line, point: { r: 0, l: 0, t: height } });\n                break;\n            case PlaneView.TOP:\n                commands.push({ command: Command.line, point: { r: width, l: 0, t: 0 } }, { command: Command.line, point: { r: width, l: height, t: 0 } }, { command: Command.line, point: { r: 0, l: height, t: 0 } });\n                break;\n        }\n        translateCommandPoints(commands, right, left, top);\n        return commands;\n    };\n    IsometricRectangle.prototype.getRectanglePath = function (args) {\n        var commands = this.getCommands(args);\n        return getSVGPath(commands, this.data.centerX, this.data.centerY, this.data.scale, true);\n    };\n    IsometricRectangle.prototype.updateSubClassAnimations = function () {\n        var _this = this;\n        this.animations.forEach(function (animation) {\n            var isNativeSVGProperty = isSVGProperty(animation.property);\n            if (!isNativeSVGProperty) {\n                var props_1 = {\n                    right: _this.right,\n                    left: _this.left,\n                    top: _this.top,\n                    width: _this.width,\n                    height: _this.height\n                };\n                if (Object.prototype.hasOwnProperty.call(props_1, animation.property)) {\n                    var property_1 = animation.property;\n                    var properties = void 0;\n                    if (animation.values) {\n                        if (Array.isArray(animation.values)) {\n                            properties = {\n                                values: animation.values.map(function (value) {\n                                    var modifiedArgs = IsometricRectangle_assign({}, props_1);\n                                    modifiedArgs[property_1] = +value;\n                                    return _this.getRectanglePath(modifiedArgs);\n                                }).join(\';\')\n                            };\n                        }\n                        else {\n                            var modifiedArgs = IsometricRectangle_assign({}, props_1);\n                            modifiedArgs[property_1] = +animation.values;\n                            properties = {\n                                values: _this.getRectanglePath(modifiedArgs)\n                            };\n                        }\n                    }\n                    else {\n                        var fromArgs = IsometricRectangle_assign({}, props_1);\n                        var toArgs = IsometricRectangle_assign({}, props_1);\n                        fromArgs[property_1] = +animation.from;\n                        toArgs[property_1] = +animation.to;\n                        properties = {\n                            from: _this.getRectanglePath(fromArgs),\n                            to: _this.getRectanglePath(toArgs)\n                        };\n                    }\n                    if (!animation.element) {\n                        animation.element = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.animate);\n                    }\n                    if (!animation.element.parentNode) {\n                        _this.element.appendChild(animation.element);\n                    }\n                    _this.addAnimationBasicProperties(\'d\', animation);\n                    addSVGProperties(animation.element, properties);\n                }\n            }\n        });\n    };\n    Object.defineProperty(IsometricRectangle.prototype, "width", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricRectangle.prototype, "height", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricRectangle.prototype.addAnimation = function (animation) {\n        return _super.prototype.addAnimation.call(this, animation);\n    };\n    return IsometricRectangle;\n}(IsometricShapeAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricRectangle/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricCircle/IsometricCircle.ts\nvar IsometricCircle_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricCircle_assign = (undefined && undefined.__assign) || function () {\n    IsometricCircle_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricCircle_assign.apply(this, arguments);\n};\nvar IsometricCircle_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nvar IsometricCircle = (function (_super) {\n    IsometricCircle_extends(IsometricCircle, _super);\n    function IsometricCircle(props) {\n        var _this = this;\n        var radius = props.radius, rest = IsometricCircle_rest(props, ["radius"]);\n        _this = _super.call(this, rest) || this;\n        _this._radius = radius;\n        return _this;\n    }\n    IsometricCircle.prototype.getCommands = function (args) {\n        var right = (args === null || args === void 0 ? void 0 : args.right) || this.right;\n        var left = (args === null || args === void 0 ? void 0 : args.left) || this.left;\n        var top = (args === null || args === void 0 ? void 0 : args.top) || this.top;\n        var radius = (args === null || args === void 0 ? void 0 : args.radius) || this.radius;\n        var commands = [];\n        switch (this.planeView) {\n            case PlaneView.FRONT:\n                commands.push({\n                    command: Command.move,\n                    point: { r: 0, l: radius, t: 0 }\n                }, {\n                    command: Command.curve,\n                    point: { r: 0, l: -radius, t: 0 },\n                    control: { r: 0, l: 0, t: -radius }\n                }, {\n                    command: Command.curve,\n                    point: { r: 0, l: radius, t: 0 },\n                    control: { r: 0, l: 0, t: radius }\n                });\n                break;\n            case PlaneView.SIDE:\n                commands.push({\n                    command: Command.move,\n                    point: { r: -radius, l: 0, t: 0 }\n                }, {\n                    command: Command.curve,\n                    point: { r: radius, l: 0, t: 0 },\n                    control: { r: 0, l: 0, t: -radius }\n                }, {\n                    command: Command.curve,\n                    point: { r: -radius, l: 0, t: 0 },\n                    control: { r: 0, l: 0, t: radius }\n                });\n                break;\n            case PlaneView.TOP:\n                commands.push({\n                    command: Command.move,\n                    point: { r: 0, l: radius, t: 0 }\n                }, {\n                    command: Command.curve,\n                    point: { r: 0, l: -radius, t: 0 },\n                    control: { r: radius, l: 0, t: 0 }\n                }, {\n                    command: Command.curve,\n                    point: { r: 0, l: radius, t: 0 },\n                    control: { r: -radius, l: 0, t: 0 }\n                });\n                break;\n        }\n        translateCommandPoints(commands, right, left, top);\n        return commands;\n    };\n    IsometricCircle.prototype.getCirclePath = function (args) {\n        var commands = this.getCommands(args);\n        return getSVGPath(commands, this.data.centerX, this.data.centerY, this.data.scale, true);\n    };\n    IsometricCircle.prototype.updateSubClassAnimations = function () {\n        var _this = this;\n        this.animations.forEach(function (animation) {\n            var isNativeSVGProperty = isSVGProperty(animation.property);\n            if (!isNativeSVGProperty) {\n                var props_1 = {\n                    right: _this.right,\n                    left: _this.left,\n                    top: _this.top,\n                    radius: _this.radius\n                };\n                if (Object.prototype.hasOwnProperty.call(props_1, animation.property)) {\n                    var property_1 = animation.property;\n                    var properties = void 0;\n                    if (animation.values) {\n                        if (Array.isArray(animation.values)) {\n                            properties = {\n                                values: animation.values.map(function (value) {\n                                    var modifiedArgs = IsometricCircle_assign({}, props_1);\n                                    modifiedArgs[property_1] = +value;\n                                    return _this.getCirclePath(modifiedArgs);\n                                }).join(\';\')\n                            };\n                        }\n                        else {\n                            var modifiedArgs = IsometricCircle_assign({}, props_1);\n                            modifiedArgs[property_1] = +animation.values;\n                            properties = {\n                                values: _this.getCirclePath(modifiedArgs)\n                            };\n                        }\n                    }\n                    else {\n                        var fromArgs = IsometricCircle_assign({}, props_1);\n                        var toArgs = IsometricCircle_assign({}, props_1);\n                        fromArgs[property_1] = +animation.from;\n                        toArgs[property_1] = +animation.to;\n                        properties = {\n                            from: _this.getCirclePath(fromArgs),\n                            to: _this.getCirclePath(toArgs)\n                        };\n                    }\n                    if (!animation.element) {\n                        animation.element = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.animate);\n                    }\n                    if (!animation.element.parentNode) {\n                        _this.element.appendChild(animation.element);\n                    }\n                    _this.addAnimationBasicProperties(\'d\', animation);\n                    addSVGProperties(animation.element, properties);\n                }\n            }\n        });\n    };\n    Object.defineProperty(IsometricCircle.prototype, "radius", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (value) {\n            this._radius = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricCircle.prototype.addAnimation = function (animation) {\n        return _super.prototype.addAnimation.call(this, animation);\n    };\n    return IsometricCircle;\n}(IsometricShapeAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricCircle/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricPath/IsometricPath.ts\nvar IsometricPath_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nvar IsometricPath = (function (_super) {\n    IsometricPath_extends(IsometricPath, _super);\n    function IsometricPath(props) {\n        if (props === void 0) { props = {}; }\n        var _this = _super.call(this, props, SVG_ELEMENTS.path) || this;\n        _this.getPathFromCommands = function (commands) { return getSVGPath(parseDrawCommands(commands), _this.data.centerX, _this.data.centerY, _this.data.scale, _this._autoclose); };\n        _this.commands = [];\n        _this._autoclose = \'autoclose\' in props\n            ? props.autoclose\n            : true;\n        return _this;\n    }\n    IsometricPath.prototype.updateSubClassAnimations = function () {\n        var _this = this;\n        this.animations.forEach(function (animation) {\n            if (animation.property === \'path\') {\n                var properties = void 0;\n                if (animation.values) {\n                    properties = {\n                        values: Array.isArray(animation.values)\n                            ? animation.values.map(function (value) {\n                                return _this.getPathFromCommands("".concat(value));\n                            }).join(\';\')\n                            : _this.getPathFromCommands("".concat(animation.values))\n                    };\n                }\n                else {\n                    properties = {\n                        from: _this.getPathFromCommands("".concat(animation.from)),\n                        to: _this.getPathFromCommands("".concat(animation.to))\n                    };\n                }\n                if (!animation.element) {\n                    animation.element = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.animate);\n                }\n                if (!animation.element.parentNode) {\n                    _this.element.appendChild(animation.element);\n                }\n                _this.addAnimationBasicProperties(\'d\', animation);\n                addSVGProperties(animation.element, properties);\n            }\n        });\n    };\n    IsometricPath.prototype.getCommands = function () {\n        return this.commands;\n    };\n    Object.defineProperty(IsometricPath.prototype, "autoclose", {\n        get: function () {\n            return this._autoclose;\n        },\n        set: function (value) {\n            this._autoclose = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IsometricPath.prototype.update = function () {\n        this.updateGraphic(undefined, this.autoclose);\n        return this;\n    };\n    IsometricPath.prototype.clear = function () {\n        this.commands.splice(0);\n        addSVGProperties(this.element, {\n            d: \'\'\n        });\n        return this;\n    };\n    IsometricPath.prototype.moveTo = function (right, left, top) {\n        this.commands.push({\n            command: Command.move,\n            point: { r: right, l: left, t: top }\n        });\n        this.update();\n        return this;\n    };\n    IsometricPath.prototype.lineTo = function (right, left, top) {\n        this.commands.push({\n            command: Command.line,\n            point: { r: right, l: left, t: top }\n        });\n        this.update();\n        return this;\n    };\n    IsometricPath.prototype.curveTo = function (controlRight, controlLeft, controlTop, right, left, top) {\n        this.commands.push({\n            command: Command.curve,\n            control: { r: controlRight, l: controlLeft, t: controlTop },\n            point: { r: right, l: left, t: top }\n        });\n        this.update();\n        return this;\n    };\n    IsometricPath.prototype.mt = function (right, left, top) {\n        return this.moveTo(right, left, top);\n    };\n    IsometricPath.prototype.lt = function (right, left, top) {\n        return this.lineTo(right, left, top);\n    };\n    IsometricPath.prototype.ct = function (controlRight, controlLeft, controlTop, right, left, top) {\n        return this.curveTo(controlRight, controlLeft, controlTop, right, left, top);\n    };\n    IsometricPath.prototype.draw = function (commands) {\n        this.commands = parseDrawCommands(commands);\n        this.update();\n        return this;\n    };\n    IsometricPath.prototype.addAnimation = function (animation) {\n        return _super.prototype.addAnimation.call(this, animation);\n    };\n    return IsometricPath;\n}(IsometricPathAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricPath/index.ts\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricText/IsometricText.ts\nvar IsometricText_extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar IsometricText_assign = (undefined && undefined.__assign) || function () {\n    IsometricText_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return IsometricText_assign.apply(this, arguments);\n};\nvar IsometricText_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nvar IsometricText = (function (_super) {\n    IsometricText_extends(IsometricText, _super);\n    function IsometricText(props) {\n        var _a;\n        var _this = this;\n        var planeView = props.planeView, _b = props.text, text = _b === void 0 ? \'\' : _b, _c = props.fontFamily, fontFamily = _c === void 0 ? \'Arial\' : _c, _d = props.fontSize, fontSize = _d === void 0 ? 12 : _d, _e = props.fontStyle, fontStyle = _e === void 0 ? \'normal\' : _e, _f = props.fontWeight, fontWeight = _f === void 0 ? \'normal\' : _f, _g = props.origin, origin = _g === void 0 ? [\'center\', \'center\'] : _g, _h = props.right, right = _h === void 0 ? 0 : _h, _j = props.left, left = _j === void 0 ? 0 : _j, _k = props.top, top = _k === void 0 ? 0 : _k, _l = props.rotation, rotation = _l === void 0 ? 0 : _l, _m = props.selectable, selectable = _m === void 0 ? true : _m, rest = IsometricText_rest(props, ["planeView", "text", "fontFamily", "fontSize", "fontStyle", "fontWeight", "origin", "right", "left", "top", "rotation", "selectable"]);\n        _this = _super.call(this, rest, SVG_ELEMENTS.group) || this;\n        _this._originHash = (_a = {},\n            _a[ORIGIN.CENTER] = \'middle\',\n            _a[ORIGIN.LEFT] = \'start\',\n            _a[ORIGIN.RIGHT] = \'end\',\n            _a[ORIGIN.TOP] = \'hanging\',\n            _a[ORIGIN.BOTTOM] = \'baseline\',\n            _a);\n        _this.commonAnimationAttributes = {\n            attributeName: \'transform\',\n            attributeType: \'XML\',\n            additive: \'sum\',\n            fill: \'freeze\'\n        };\n        _this.getMatrixTransform = function (props) {\n            var transformMatrix = getPatternTransform(_this.getPositionTransform(props), _this.planeView, 1);\n            return "".concat(transformMatrix, " rotate(").concat(_this.rotation, ")");\n        };\n        _this._textElement = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.text);\n        _this._tspan = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.tspan);\n        _this._textElement.appendChild(_this._tspan);\n        _this.element.appendChild(_this._textElement);\n        _this.planeView = planeView;\n        _this.fontFamily = fontFamily;\n        _this.fontSize = fontSize;\n        _this.fontStyle = fontStyle;\n        _this.fontWeight = fontWeight;\n        _this.selectable = selectable;\n        _this.origin = origin;\n        _this.right = right;\n        _this.left = left;\n        _this.top = top;\n        _this.rotation = rotation;\n        _this.text = text;\n        return _this;\n    }\n    IsometricText.prototype.getPositionTransform = function (props, fromCenter) {\n        if (fromCenter === void 0) { fromCenter = true; }\n        return getPointFromIsometricPoint(fromCenter\n            ? this.data.centerX\n            : 0, fromCenter\n            ? this.data.centerY\n            : 0, {\n            r: props.right,\n            l: props.left,\n            t: props.top\n        }, this.data.scale);\n    };\n    IsometricText.prototype.updateSubClassAnimations = function () {\n        var _this = this;\n        var props = {\n            right: 0,\n            left: 0,\n            top: 0,\n            rotation: 0,\n        };\n        this.animations.forEach(function (animation) {\n            var isNativeSVGProperty = isSVGProperty(animation.property);\n            if (!isNativeSVGProperty) {\n                if (Object.prototype.hasOwnProperty.call(props, animation.property)) {\n                    var property_1 = animation.property;\n                    var isRotation_1 = property_1 === \'rotation\';\n                    var commonProps = IsometricText_assign(IsometricText_assign({}, _this.commonAnimationAttributes), { type: isRotation_1\n                            ? \'rotate\'\n                            : \'translate\', begin: \'indefinite\' });\n                    var properties = void 0;\n                    if (animation.values) {\n                        if (Array.isArray(animation.values)) {\n                            properties = IsometricText_assign({ values: animation.values.map(function (value) {\n                                    if (isRotation_1) {\n                                        return "".concat(value);\n                                    }\n                                    else {\n                                        var modifiedArgs = IsometricText_assign({}, props);\n                                        modifiedArgs[property_1] = +value - _this[property_1];\n                                        var coords = _this.getPositionTransform(modifiedArgs, false);\n                                        return "".concat(coords.x, ",").concat(coords.y);\n                                    }\n                                }).join(\';\') }, commonProps);\n                        }\n                        else {\n                            if (isRotation_1) {\n                                properties = IsometricText_assign({ values: "".concat(animation.values) }, commonProps);\n                            }\n                            else {\n                                var modifiedArgs = IsometricText_assign({}, props);\n                                modifiedArgs[property_1] = +animation.values - _this[property_1];\n                                var coords = _this.getPositionTransform(modifiedArgs, false);\n                                properties = IsometricText_assign({ values: "".concat(coords.x, ",").concat(coords.y) }, commonProps);\n                            }\n                        }\n                    }\n                    else {\n                        if (isRotation_1) {\n                            properties = IsometricText_assign({ from: "".concat(animation.from), to: "".concat(animation.to) }, commonProps);\n                        }\n                        else {\n                            var fromArgs = IsometricText_assign({}, props);\n                            var toArgs = IsometricText_assign({}, props);\n                            fromArgs[property_1] = +animation.from - _this[property_1];\n                            toArgs[property_1] = +animation.to - _this[property_1];\n                            var coordsFrom = _this.getPositionTransform(fromArgs, false);\n                            var coordsTo = _this.getPositionTransform(toArgs, false);\n                            properties = IsometricText_assign({ from: "".concat(coordsFrom.x, ",").concat(coordsFrom.y), to: "".concat(coordsTo.x, ",").concat(coordsTo.y) }, commonProps);\n                        }\n                    }\n                    if (!animation.element) {\n                        animation.element = document.createElementNS(SVG_NAMESPACE, SVG_ELEMENTS.animateTransform);\n                    }\n                    _this.addAnimationBasicProperties(\'transform\', animation);\n                    addSVGProperties(animation.element, properties);\n                    if (!animation.element.parentNode) {\n                        if (isRotation_1) {\n                            _this._textElement.appendChild(animation.element);\n                        }\n                        else {\n                            _this.element.appendChild(animation.element);\n                        }\n                    }\n                    window.requestAnimationFrame(function () {\n                        animation.element.beginElement();\n                    });\n                }\n            }\n        });\n    };\n    IsometricText.prototype.update = function () {\n        if (elementHasSVGParent(this.element)) {\n            var transform = this.getMatrixTransform({\n                right: this.right,\n                left: this.left,\n                top: this.top\n            });\n            addSVGProperties(this._textElement, { transform: transform });\n            this._tspan.textContent = this._text;\n            this.updatePatternTransform({ x: 0, y: 0 }, this.planeView);\n            this.updateAnimations();\n        }\n        return this;\n    };\n    IsometricText.prototype.clear = function () {\n        this.text = \'\';\n        this.update();\n        return this;\n    };\n    Object.defineProperty(IsometricText.prototype, "text", {\n        get: function () {\n            return this._text;\n        },\n        set: function (value) {\n            this._text = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "planeView", {\n        get: function () {\n            return this._planeView;\n        },\n        set: function (value) {\n            this._planeView = value;\n            this.update();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "fontFamily", {\n        get: function () {\n            return this._fontFamily;\n        },\n        set: function (value) {\n            this._fontFamily = value;\n            addSVGProperties(this._tspan, {\n                \'font-family\': this._fontFamily\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "fontSize", {\n        get: function () {\n            return this._fontSize;\n        },\n        set: function (value) {\n            this._fontSize = value;\n            addSVGProperties(this._tspan, {\n                \'font-size\': "".concat(this._fontSize, "px")\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "fontStyle", {\n        get: function () {\n            return this._fontStyle;\n        },\n        set: function (value) {\n            this._fontStyle = value;\n            addSVGProperties(this._tspan, {\n                \'font-style\': "".concat(this._fontStyle)\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "fontWeight", {\n        get: function () {\n            return this._fontWeight;\n        },\n        set: function (value) {\n            this._fontWeight = value;\n            addSVGProperties(this._tspan, {\n                \'font-weight\': "".concat(this._fontWeight)\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "selectable", {\n        get: function () {\n            return this._selectable;\n        },\n        set: function (value) {\n            this._selectable = value;\n            if (this._selectable) {\n                this._textElement.removeAttribute(\'style\');\n            }\n            else {\n                addSVGProperties(this._textElement, {\n                    style: [\n                        \'-webkit-user-select\',\n                        \'-moz-user-select\',\n                        \'-ms-user-select\',\n                        \'user-select\',\n                        \'pointer-events\'\n                    ].map(function (decl) { return "".concat(decl, ": none"); }).join(\';\')\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "origin", {\n        get: function () {\n            return this._origin;\n        },\n        set: function (value) {\n            this._origin = value;\n            var _a = this._origin, textAnchor = _a[0], alignmentBaseline = _a[1];\n            addSVGProperties(this._tspan, {\n                \'text-anchor\': this._originHash[textAnchor],\n                \'alignment-baseline\': this._originHash[alignmentBaseline]\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "right", {\n        get: function () {\n            return this._right;\n        },\n        set: function (value) {\n            if (this._right !== value) {\n                this._right = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "left", {\n        get: function () {\n            return this._left;\n        },\n        set: function (value) {\n            if (this._left !== value) {\n                this._left = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "top", {\n        get: function () {\n            return this._top;\n        },\n        set: function (value) {\n            if (this._top !== value) {\n                this._top = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IsometricText.prototype, "rotation", {\n        get: function () {\n            return this._rotation;\n        },\n        set: function (value) {\n            if (this._rotation !== value) {\n                this._rotation = value;\n                this.update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IsometricText;\n}(IsometricGraphicAbstract));\n\n\n;// CONCATENATED MODULE: ./src/@classes/public/IsometricText/index.ts\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demo/demo1/index.js\n/* harmony default export */ const demo1 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricRectangle, PlaneView } = IsometricModule;\n\n    function toggleColor() {\n        this.fillColor = this.fillColor === \'white\' ? \'#EEE\' : \'white\';\n    }\n\n    const cube = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const commonProps = {height: 1, width: 1};\n    const topPiece = new IsometricRectangle({...commonProps, planeView: PlaneView.TOP});\n    const rightPiece = new IsometricRectangle({...commonProps, planeView: PlaneView.FRONT});\n    const leftPiece = new IsometricRectangle({...commonProps, planeView: PlaneView.SIDE});\n\n    topPiece.top = 1;\n    topPiece.addEventListener(\'click\', toggleColor, true);\n\n    rightPiece.right = 1;\n    rightPiece.addEventListener(\'click\', toggleColor, true);\n\n    leftPiece.left = 1;\n    leftPiece.addEventListener(\'click\', toggleColor, true);\n\n    cube\n        .addChild(topPiece)\n        .addChild(rightPiece)\n        .addChild(leftPiece);\n\n});\n;// CONCATENATED MODULE: ./demo/demo2/index.js\n/* harmony default export */ const demo2 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricPath, IsometricRectangle, PlaneView } = IsometricModule;\n\n    const cube = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const commonProps = {height: 1, width: 1};\n\n    const duration = 3;\n\n    const rectangleAnimationProps = {\n        property: \'height\',\n        duration,\n        values: [1, 0.5, 1]\n    };\n\n    const colorAnimationProps = {\n        property: \'fillColor\',\n        duration,\n        values: [\'#FFF\', \'#DDD\', \'#FFF\']\n    };\n\n    const topPiece = new IsometricPath();\n    const rightPiece = new IsometricRectangle({...commonProps, planeView: PlaneView.FRONT, right: 1});\n    const leftPiece = new IsometricRectangle({...commonProps, planeView: PlaneView.SIDE, left: 1});\n\n    topPiece\n        .moveTo(0, 0, 1)\n        .lineTo(1, 0, 1)\n        .lineTo(1, 1, 1)\n        .lineTo(0, 1, 1);\n\n    topPiece\n        .addAnimation({\n            property: \'path\',\n            duration,\n            values: [\n                \'M0 0 1 L1 0 1 L1 1 1 L0 1 1\',\n                \'M0 0 0.5 L1 0 0.5 L1 1 0.5 L0 1 0.5\',\n                \'M0 0 1 L1 0 1 L1 1 1 L0 1 1\'\n            ]\n        })\n        .addAnimation(colorAnimationProps);\n\n    rightPiece\n        .addAnimation(rectangleAnimationProps)\n        .addAnimation(colorAnimationProps);\n\n    leftPiece\n        .addAnimation(rectangleAnimationProps)\n        .addAnimation(colorAnimationProps);\n\n    cube.addEventListener(\'click\', function() {\n        if (this.animated) {\n            this.pauseAnimations();\n        } else {\n            this.resumeAnimations();\n        }\n    });\n\n    cube.addChildren(topPiece, rightPiece, leftPiece);\n\n});\n;// CONCATENATED MODULE: ./demo/images/block_side.png\nconst block_side_namespaceObject = __webpack_require__.p + "images/block_side.png";\n;// CONCATENATED MODULE: ./demo/images/block_top.png\nconst block_top_namespaceObject = __webpack_require__.p + "images/block_top.png";\n;// CONCATENATED MODULE: ./demo/demo3/index.js\n\n\n\n/* harmony default export */ const demo3 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricRectangle, IsometricText, PlaneView } = IsometricModule;\n\n    const cube = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const rectangleCommonProps = { height: 1, width: 1 };\n\n    const textCommonProps = {\n        fontSize: 15,\n        fillColor: \'#666\',\n        strokeWidth: 0,\n        right: 0.5,\n        left: 0.5,\n        top: 0.5,\n        selectable: false\n    };\n\n    const pieces = [PlaneView.TOP, PlaneView.FRONT, PlaneView.SIDE].map((view, index) => {\n        return {\n            face: new IsometricRectangle({...rectangleCommonProps, planeView: view}),\n            label: new IsometricText({...textCommonProps, planeView: view}),\n            property: [\'top\', \'right\', \'left\'][index]\n        };\n    });\n\n    pieces.forEach((piece) => {\n\n        const { face, label, property } = piece;\n\n        face[property] = 1;\n        label[property] = 1;\n        label.text = `${property.toUpperCase()} 0º`;\n\n        face.addEventListener(\'click\', () => {\n            const rotation = label.rotation + 45;\n            label.rotation = rotation === 360 ? 0 : rotation;\n            label.text = label.text.replace(/\\d+/, label.rotation);\n        });\n\n        cube.addChild(piece.face);\n        cube.addChild(piece.label);\n    });\n\n});\n;// CONCATENATED MODULE: ./demo/demo4/index.js\n/* harmony default export */ const demo4 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricGroup, IsometricPath } = IsometricModule;\n\n    const isometric = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const bottomT = new IsometricPath();\n    const bottomR = new IsometricPath();\n    const bottomL = new IsometricPath();\n\n    const topT = new IsometricPath();\n    const topR = new IsometricPath();\n    const topL = new IsometricPath();\n\n    bottomT.mt(0, 0, .5).lt(1, 0, .5).lt(1, 1, .5).lt(0, 1, .5);\n    bottomR.mt(1, 0, .5).lt(1, 0, 0).lt(1, 1, 0).lt(1, 1, .5);\n    bottomL.mt(1, 1, .5).lt(1, 1, 0).lt(0, 1, 0).lt(0, 1, .5);\n\n    topT.mt(.25, .25, 1).lt(.75, .25, 1).lt(.75, .75, .75).lt(.25, .75, .75);\n    topR.mt(.75, .25, 1).lt(.75, .75, .75).lt(.75, .75, .25).lt(.75, .25, .25);\n    topL.mt(.75, .75, .75).lt(.25, .75, .75).lt(.25, .75, .25).lt(.75, .75, .25);\n\n    const bottomPiece = new IsometricGroup();\n    const topPiece = new IsometricGroup();\n    topPiece.top = .25;\n\n    bottomPiece.addChildren(bottomT, bottomR, bottomL);\n    topPiece.addChildren(topT, topR, topL);\n\n    let flip = true;\n\n    topPiece.addEventListener(\'click\', function() {\n        if (this.right) {\n            this.right = 0;\n            return;\n        }\n        this.right = flip ? 0.25 : -0.25;\n        flip = !flip;\n    });\n\n    isometric.addChildren(bottomPiece, topPiece);\n\n});\n;// CONCATENATED MODULE: ./demo/demo5/index.js\n/* harmony default export */ const demo5 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricPath } = IsometricModule;\n\n    const isometric = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const right = new IsometricPath();\n    const top1 = new IsometricPath();\n    const top2 = new IsometricPath();\n    const top3 = new IsometricPath();\n    const top4 = new IsometricPath();\n    const left1 = new IsometricPath();\n    const left2 = new IsometricPath();\n\n    // M r l t (Move to right left top)\n    // L r l t (Line to right left top)\n    // C cr cl ct r l t (Curve to control-right control-left control-top right left top)\n    right.draw(\'M1 0 0 L1 1 0 L1 1 0.25 L1 0.5 0.25 L1 0.5 1 L1 0 1\');\n    top1.draw(\'M0.25 0.5 1 C0.5 0.5 0.75 0.75 0.5 1 L0.75 0 1 C0.5 0 0.75 0.25 0 1 L0.25 0.5 1\');\n    top2.draw(\'M1 0 1 L0.75 0 1 L0.75 0.5 1 L1 0.5 1 L1 0 1 M0 0 1 L0.25 0 1 L0.25 0.5 1 L0 0.5 1 L0 0 1\');\n    top3.draw(\'M0 0.5 0.5 L0.5 0.5 0.5 L0.5 1 0.5 L0 1 0.5\');\n    top4.draw(\'M0.5 0.5 0.5 L1 0.5 0.25 L1 1 0.25 L0.5 1 0.5\');\n    left1.draw(\'M0 0.5 1 L0 0.5 0.5 L0.5 0.5 0.5 L1 0.5 0.25 L1 0.5 1 L0.75 0.5 1 C0.5 0.5 0.75 0.25 0.5 1 L0 0.5 1\');\n    left2.draw(\'M0 1 0.5 L0.5 1 0.5 L1 1 0.25 L1 1 0 L0 1 0\');\n\n    isometric.addChildren(right, top1, top2, top3, top4, left1, left2);\n\n});\n;// CONCATENATED MODULE: ./demo/demo6/index.js\n/* harmony default export */ const demo6 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricPath } = IsometricModule;\n\n    const cube = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const under = new IsometricPath({ fillColor: \'#EEE\' });\n    const top = new IsometricPath();\n    const right = new IsometricPath();\n    const left = new IsometricPath();\n\n    under\n        .mt(0, 0, 1)\n        .mt(0.25, 0, 1).ct(0.5, 0, 0.75, 0.75, 0, 1).lt(1, 0, 1)\n        .lt(1, 0, 0.75).ct(0.75, 0, 0.5, 1, 0, 0.25).lt(1, 0, 0)\n        .lt(1, 0.25, 0).ct(0.75, 0.5, 0, 1, 0.75, 0).lt(1, 1, 0)\n        .lt(0.75, 1, 0).ct(0.5, 0.75, 0, 0.25, 1, 0).lt(0, 1, 0)\n        .lt(0, 1, 0.25).ct(0, 0.75, 0.5, 0, 1, 0.75).lt(0, 1, 1)\n        .lt(0, 0.75, 1).ct(0, 0.5, 0.75, 0, 0.25, 1).lt(0, 0, 1);\n\n    top\n        .mt(0, 0, 1)\n        .lt(0.25, 0, 1).ct(0.5, 0.25, 1, 0.75, 0, 1).lt(1, 0, 1)\n        .lt(1, 0.25, 1).ct(0.75, 0.5, 1, 1, 0.75, 1).lt(1, 1, 1)\n        .lt(0.75, 1, 1).ct(0.5, 0.75, 1, 0.25, 1, 1).lt(0, 1, 1)\n        .lt(0, 0.75, 1).ct(0.25, 0.5, 1, 0, 0.25, 1).lt(0, 0, 1);\n\n    right\n        .mt(1, 0, 1)\n        .lt(1, 0, 0.75).ct(1, 0.25, 0.5, 1, 0, 0.25).lt(1, 0, 0)\n        .lt(1, 0.25, 0).ct(1, 0.5, 0.25, 1, 0.75, 0).lt(1, 1, 0)\n        .lt(1, 1, 0.25).ct(1, 0.75, 0.5, 1, 1, 0.75).lt(1, 1, 1)\n        .lt(1, 0.75, 1).ct(1, 0.5, 0.75, 1, 0.25, 1).lt(1, 0, 1);\n\n    left\n        .mt(1, 1, 1)\n        .lt(1, 1, 0.75).ct(0.75, 1, 0.5, 1, 1, 0.25).lt(1, 1, 0)\n        .lt(0.75, 1, 0).ct(0.5, 1, 0.25, 0.25, 1, 0).lt(0, 1, 0)\n        .lt(0, 1, 0.25).ct(0.25, 1, 0.5, 0, 1, 0.75).lt(0, 1, 1)\n        .lt(0.25, 1, 1).ct(0.5, 1, 0.75, 0.75, 1, 1).lt(1, 1, 1);\n\n    cube.addChildren(under, top, right, left);\n\n});\n;// CONCATENATED MODULE: ./demo/demo7/index.js\n/* harmony default export */ const demo7 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricGroup, IsometricRectangle, PlaneView } = IsometricModule;\n\n    const canvas = new IsometricCanvas({\n        container,\n        backgroundColor: \'#CCC\',\n        scale: 20,\n        width: 500,\n        height: 320\n    });\n\n    function resetPlanes() {\n        cube.right = cube.left = cube.top = 0;\n        planeTop.fillOpacity = planeRight.fillOpacity = planeLeft.fillOpacity = 0.25;\n    }\n\n    function changePlane() {\n        resetPlanes();\n        this.fillOpacity = 1;\n        cube.drag = this.planeView;\n    }\n\n    const planeProps = { height: 6, width: 6, fillOpacity: 0.25 };\n    const planeTop = new IsometricRectangle({ ...planeProps, planeView: PlaneView.TOP, fillOpacity: 1 });\n    const planeRight = new IsometricRectangle({ ...planeProps, planeView: PlaneView.FRONT });\n    const planeLeft = new IsometricRectangle({ ...planeProps, planeView: PlaneView.SIDE });\n\n    const cubeProps = { height: 1, width: 1 };\n    const cubeTop = new IsometricRectangle({ ...cubeProps, planeView: PlaneView.TOP, top: 1 });\n    const cubeRight = new IsometricRectangle({ ...cubeProps, planeView: PlaneView.FRONT, right: 1 });\n    const cubeLeft = new IsometricRectangle({ ...cubeProps, planeView: PlaneView.SIDE, left: 1 });\n\n    const cube = new IsometricGroup();\n\n    const bounds = [0, 5];\n    cube.drag = \'TOP\';\n    cube.bounds = { top: bounds, right: bounds, left: bounds };\n\n    planeTop.addEventListener(\'click\', changePlane, true);\n    planeRight.addEventListener(\'click\', changePlane, true);\n    planeLeft.addEventListener(\'click\', changePlane, true);\n\n    cube.addChildren(cubeTop, cubeRight, cubeLeft);\n    canvas.addChildren(planeTop, planeRight, planeLeft, cube);\n\n});\n;// CONCATENATED MODULE: ./demo/demo8/index.js\n\n\n\n/* harmony default export */ const demo8 = (( IsometricModule, container ) => {\n\n    const { IsometricCanvas, IsometricPath, IsometricRectangle, PlaneView, Axis } = IsometricModule;\n\n    const isometric = new IsometricCanvas({\n        container,\n        backgroundColor: \'#8AAA3F\',\n        scale: 120,\n        width: 500,\n        height: 320\n    });\n\n    const commonTextureProps = {\n        height: 1,\n        width: 1,\n        pixelated: true\n    };\n\n    const textureSides = {\n        url: \'images/block_side.png\',\n        ...commonTextureProps\n    };\n\n    const textureTop = {\n        url: \'images/block_top.png\',\n        planeView: PlaneView.TOP,\n        rotation: {\n            axis: Axis.LEFT,\n            value: 26.5650\n        },\n        ...commonTextureProps\n    };\n\n    const side = new IsometricPath({\n        texture: {\n            planeView: PlaneView.SIDE,\n            ...textureSides\n        }\n    });\n\n    const front = new IsometricRectangle({\n        planeView: PlaneView.FRONT,\n        height: 0.5,\n        width: 1,\n        texture: textureSides\n    });\n\n    const chop = new IsometricPath({\n        texture: textureTop\n    });\n\n    side.draw(\'M1 1 0 L1 1 0.5 L0 1 1 L0 1 0\');\n    chop.draw(\'M1 1 0.5 L0 1 1 L0 0 1 L1 0 0.5\');\n\n    side.left = 1;\n    front.right = 1;\n\n    isometric.addChildren(side, front, chop);\n\n});\n;// CONCATENATED MODULE: ./demo/demo.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst functioToString = (fn) => {\n    const article = document.createElement(\'article\');\n    const pre = document.createElement(\'pre\');\n    article.classList.add(\'function-container\');\n    pre.classList.add(\'prettyprint\');\n    article.appendChild(pre);\n    pre.innerHTML = fn.toString();\n    return article;\n};\n\nconst demos = new Map([\n    [\'demo1\', demo1],\n    [\'demo2\', demo2],\n    [\'demo3\', demo3],\n    [\'demo4\', demo4],\n    [\'demo5\', demo5],\n    [\'demo6\', demo6],\n    [\'demo7\', demo7],\n    [\'demo8\', demo8],\n]);\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n\n    demos.forEach((module, div) => {\n        const demo = document.getElementById(div);\n        const container = document.createElement(\'div\');\n        const wrapper = document.createElement(\'div\');\n\n        container.classList.add(\'demo-container\');\n        wrapper.classList.add(\'demo-wrapper\');\n\n        module(src_namespaceObject, wrapper);\n        container.appendChild(wrapper);\n        demo.appendChild(container);\n        demo.appendChild(functioToString(module));\n    });\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFOztBQzlEa0Q7QUFDZ0I7QUFDdkM7QUFDTDtBQUNtQjtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsS0FBSztBQUNuQixjQUFjLEtBQUs7QUFDbkIsY0FBYyxLQUFLO0FBQ25CLGNBQWMsS0FBSztBQUNuQixjQUFjLEtBQUs7QUFDbkIsY0FBYyxLQUFLO0FBQ25CLGNBQWMsS0FBSztBQUNuQixjQUFjLEtBQUs7QUFDbkI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxlQUFlLG1CQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY29uc3RhbnRzL2luZGV4LnRzPzQ3ZWEiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0B1dGlscy9tYXRoLnRzP2U5MTIiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0B1dGlscy9tYXRyaXgudHM/OTA2MSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQHV0aWxzL3N2Zy50cz9iNzVjIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9Ac3RvcmUvaW5kZXgudHM/NDUzMSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljU3RvcmUvSXNvbWV0cmljU3RvcmUudHM/YTk1MCIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljU3RvcmUvaW5kZXgudHM/ZTlhMSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljRWxlbWVudEFic3RyYWN0L0lzb21ldHJpY0VsZW1lbnRBYnN0cmFjdC50cz8zODYwIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNFbGVtZW50QWJzdHJhY3QvaW5kZXgudHM/MDdjZSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0L0lzb21ldHJpY0dyYXBoaWNBYnN0cmFjdC50cz8yZjFiIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNHcmFwaGljQWJzdHJhY3QvaW5kZXgudHM/OTJlMCIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QvSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QudHM/Mzg4MyIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QvaW5kZXgudHM/ZjhjNiIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY0NhbnZhcy9Jc29tZXRyaWNDYW52YXMudHM/YzMxZCIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY0NhbnZhcy9pbmRleC50cz80YzFmIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AdXRpbHMvb3RoZXIudHM/NGZiNCIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QvY29uc3RhbnRzLnRzP2E3N2YiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0L0lzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0LnRzPzY1MzUiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0L2luZGV4LnRzP2MwNTMiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0BjbGFzc2VzL3B1YmxpYy9Jc29tZXRyaWNHcm91cC9Jc29tZXRyaWNHcm91cC50cz84NDQwIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljR3JvdXAvaW5kZXgudHM/MmQ5NiIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljUGF0aEFic3RyYWN0L0lzb21ldHJpY1BhdGhBYnN0cmFjdC50cz83ZWMyIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNQYXRoQWJzdHJhY3QvaW5kZXgudHM/NTQ5YSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljU2hhcGVBYnN0cmFjdC9Jc29tZXRyaWNTaGFwZUFic3RyYWN0LnRzP2Y3YmQiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY1NoYXBlQWJzdHJhY3QvaW5kZXgudHM/NGVkNSIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY1JlY3RhbmdsZS9Jc29tZXRyaWNSZWN0YW5nbGUudHM/ZjQxYiIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY1JlY3RhbmdsZS9pbmRleC50cz8yNTM4Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljQ2lyY2xlL0lzb21ldHJpY0NpcmNsZS50cz8yNWY3Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljQ2lyY2xlL2luZGV4LnRzPzIwNzciLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vc3JjL0BjbGFzc2VzL3B1YmxpYy9Jc29tZXRyaWNQYXRoL0lzb21ldHJpY1BhdGgudHM/MjJkMyIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY1BhdGgvaW5kZXgudHM/NDkzYiIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9zcmMvQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY1RleHQvSXNvbWV0cmljVGV4dC50cz80ODY2Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9AY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljVGV4dC9pbmRleC50cz85NGU3Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL3NyYy9pbmRleC50cz9lOTRlIiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL2RlbW8vZGVtbzEvaW5kZXguanM/OGUxMyIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9kZW1vL2RlbW8yL2luZGV4LmpzPzdiNmQiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vZGVtby9kZW1vMy9pbmRleC5qcz82ZDg3Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL2RlbW8vZGVtbzQvaW5kZXguanM/NDVhZCIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9kZW1vL2RlbW81L2luZGV4LmpzP2I0YjEiLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vZGVtby9kZW1vNi9pbmRleC5qcz9mZGE1Iiwid2VicGFjazovL0BlbGNoaW5pbmV0L2lzb21ldHJpYy8uL2RlbW8vZGVtbzcvaW5kZXguanM/MGFmYiIsIndlYnBhY2s6Ly9AZWxjaGluaW5ldC9pc29tZXRyaWMvLi9kZW1vL2RlbW84L2luZGV4LmpzPzRjMDciLCJ3ZWJwYWNrOi8vQGVsY2hpbmluZXQvaXNvbWV0cmljLy4vZGVtby9kZW1vLmpzP2ZjZGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBTVkdfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmV4cG9ydCB2YXIgU1ZHX0VMRU1FTlRTO1xuKGZ1bmN0aW9uIChTVkdfRUxFTUVOVFMpIHtcbiAgICBTVkdfRUxFTUVOVFNbXCJzdmdcIl0gPSBcInN2Z1wiO1xuICAgIFNWR19FTEVNRU5UU1tcImdyb3VwXCJdID0gXCJnXCI7XG4gICAgU1ZHX0VMRU1FTlRTW1wicGF0aFwiXSA9IFwicGF0aFwiO1xuICAgIFNWR19FTEVNRU5UU1tcInJlY3RcIl0gPSBcInJlY3RcIjtcbiAgICBTVkdfRUxFTUVOVFNbXCJ0ZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgU1ZHX0VMRU1FTlRTW1widHNwYW5cIl0gPSBcInRzcGFuXCI7XG4gICAgU1ZHX0VMRU1FTlRTW1wicGF0dGVyblwiXSA9IFwicGF0dGVyblwiO1xuICAgIFNWR19FTEVNRU5UU1tcImltYWdlXCJdID0gXCJpbWFnZVwiO1xuICAgIFNWR19FTEVNRU5UU1tcImFuaW1hdGVcIl0gPSBcImFuaW1hdGVcIjtcbiAgICBTVkdfRUxFTUVOVFNbXCJhbmltYXRlVHJhbnNmb3JtXCJdID0gXCJhbmltYXRlVHJhbnNmb3JtXCI7XG59KShTVkdfRUxFTUVOVFMgfHwgKFNWR19FTEVNRU5UUyA9IHt9KSk7XG5leHBvcnQgdmFyIFNWR19QUk9QRVJUSUVTO1xuKGZ1bmN0aW9uIChTVkdfUFJPUEVSVElFUykge1xuICAgIFNWR19QUk9QRVJUSUVTW1widmlld0JveFwiXSA9IFwidmlld0JveFwiO1xufSkoU1ZHX1BST1BFUlRJRVMgfHwgKFNWR19QUk9QRVJUSUVTID0ge30pKTtcbmV4cG9ydCB2YXIgREVDSU1BTFMgPSA2O1xuZXhwb3J0IHZhciBTUVJUMyA9ICsoTWF0aC5zcXJ0KDMpLnRvRml4ZWQoREVDSU1BTFMpKTtcbmV4cG9ydCB2YXIgSFNRUlQzID0gKygoTWF0aC5zcXJ0KDMpIC8gMikudG9GaXhlZChERUNJTUFMUykpO1xuZXhwb3J0IHZhciBERUZBVUxUX1dJRFRIID0gNjQwO1xuZXhwb3J0IHZhciBERUZBVUxUX0hFSUdIVCA9IDQ4MDtcbnZhciBOID0gJygtP1xcXFxkKyg/OlxcXFwuXFxcXGQrKT98LT9cXFxcLlxcXFxkKyknO1xudmFyIFMgPSAnXFxcXHMqJztcbnZhciBTUyA9ICdcXFxccysnO1xudmFyIFBPSU5UID0gXCJcIi5jb25jYXQoTikuY29uY2F0KFNTKS5jb25jYXQoTikuY29uY2F0KFNTKS5jb25jYXQoTik7XG52YXIgQ1VSVkUgPSBcIlwiLmNvbmNhdChQT0lOVCkuY29uY2F0KFNTKS5jb25jYXQoUE9JTlQpO1xuZXhwb3J0IHZhciBDT01NQU5EU19SRUdFWFAgPSBuZXcgUmVnRXhwKFwiKD86KE18TClcIi5jb25jYXQoUykuY29uY2F0KFBPSU5UKS5jb25jYXQoUywgXCJ8KEMpXCIpLmNvbmNhdChTKS5jb25jYXQoQ1VSVkUsIFwiKVwiKS5jb25jYXQoUyksICdnJyk7XG5leHBvcnQgdmFyIFNDQUxFID0gTWF0aC5zcXJ0KDMgLyAyKTtcbmV4cG9ydCB2YXIgUk9UXzYwID0gTWF0aC5QSSAvIDM7XG5leHBvcnQgdmFyIFJPVF80NSA9IE1hdGguUEkgLyA0O1xuZXhwb3J0IHZhciBST1RfQ01BID0gTWF0aC5hdGFuKE1hdGguU1FSVDIpO1xuZXhwb3J0IHZhciBDb2xvcnM7XG4oZnVuY3Rpb24gKENvbG9ycykge1xuICAgIENvbG9yc1tcIndoaXRlXCJdID0gXCJ3aGl0ZVwiO1xuICAgIENvbG9yc1tcImJsYWNrXCJdID0gXCJibGFja1wiO1xufSkoQ29sb3JzIHx8IChDb2xvcnMgPSB7fSkpO1xuZXhwb3J0IHZhciBMaW5lQ2FwO1xuKGZ1bmN0aW9uIChMaW5lQ2FwKSB7XG4gICAgTGluZUNhcFtcImJ1dHRcIl0gPSBcImJ1dHRcIjtcbiAgICBMaW5lQ2FwW1wic3F1YXJlXCJdID0gXCJzcXVhcmVcIjtcbiAgICBMaW5lQ2FwW1wicm91bmRcIl0gPSBcInJvdW5kXCI7XG59KShMaW5lQ2FwIHx8IChMaW5lQ2FwID0ge30pKTtcbmV4cG9ydCB2YXIgTGluZUpvaW47XG4oZnVuY3Rpb24gKExpbmVKb2luKSB7XG4gICAgTGluZUpvaW5bXCJtaXRlclwiXSA9IFwibWl0ZXJcIjtcbiAgICBMaW5lSm9pbltcInJvdW5kXCJdID0gXCJyb3VuZFwiO1xuICAgIExpbmVKb2luW1wiYmV2ZWxcIl0gPSBcImJldmVsXCI7XG59KShMaW5lSm9pbiB8fCAoTGluZUpvaW4gPSB7fSkpO1xuZXhwb3J0IHZhciBDb21tYW5kO1xuKGZ1bmN0aW9uIChDb21tYW5kKSB7XG4gICAgQ29tbWFuZFtcIm1vdmVcIl0gPSBcIm1vdmVcIjtcbiAgICBDb21tYW5kW1wibGluZVwiXSA9IFwibGluZVwiO1xuICAgIENvbW1hbmRbXCJjdXJ2ZVwiXSA9IFwiY3VydmVcIjtcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBQbGFuZVZpZXc7XG4oZnVuY3Rpb24gKFBsYW5lVmlldykge1xuICAgIFBsYW5lVmlld1tcIkZST05UXCJdID0gXCJGUk9OVFwiO1xuICAgIFBsYW5lVmlld1tcIlNJREVcIl0gPSBcIlNJREVcIjtcbiAgICBQbGFuZVZpZXdbXCJUT1BcIl0gPSBcIlRPUFwiO1xufSkoUGxhbmVWaWV3IHx8IChQbGFuZVZpZXcgPSB7fSkpO1xuZXhwb3J0IHZhciBBeGlzO1xuKGZ1bmN0aW9uIChBeGlzKSB7XG4gICAgQXhpc1tcIlJJR0hUXCJdID0gXCJSSUdIVFwiO1xuICAgIEF4aXNbXCJMRUZUXCJdID0gXCJMRUZUXCI7XG4gICAgQXhpc1tcIlRPUFwiXSA9IFwiVE9QXCI7XG59KShBeGlzIHx8IChBeGlzID0ge30pKTtcbmV4cG9ydCB2YXIgVHlwZW9mO1xuKGZ1bmN0aW9uIChUeXBlb2YpIHtcbiAgICBUeXBlb2ZbXCJVTkRFRklORURcIl0gPSBcInVuZGVmaW5lZFwiO1xuICAgIFR5cGVvZltcIk5VTUJFUlwiXSA9IFwibnVtYmVyXCI7XG59KShUeXBlb2YgfHwgKFR5cGVvZiA9IHt9KSk7XG5leHBvcnQgdmFyIEVWRU5UUztcbihmdW5jdGlvbiAoRVZFTlRTKSB7XG4gICAgRVZFTlRTW1wiTU9VU0VfTU9WRVwiXSA9IFwibW91c2Vtb3ZlXCI7XG4gICAgRVZFTlRTW1wiTU9VU0VfRE9XTlwiXSA9IFwibW91c2Vkb3duXCI7XG4gICAgRVZFTlRTW1wiTU9VU0VfVVBcIl0gPSBcIm1vdXNldXBcIjtcbiAgICBFVkVOVFNbXCJUT1VDSF9TVEFSVFwiXSA9IFwidG91Y2hzdGFydFwiO1xuICAgIEVWRU5UU1tcIlRPVUNIX01PVkVcIl0gPSBcInRvdWNobW92ZVwiO1xuICAgIEVWRU5UU1tcIlRPVUNIX0VORFwiXSA9IFwidG91Y2hlbmRcIjtcbn0pKEVWRU5UUyB8fCAoRVZFTlRTID0ge30pKTtcbmV4cG9ydCB2YXIgT1JJR0lOO1xuKGZ1bmN0aW9uIChPUklHSU4pIHtcbiAgICBPUklHSU5bXCJDRU5URVJcIl0gPSBcImNlbnRlclwiO1xuICAgIE9SSUdJTltcIkxFRlRcIl0gPSBcImxlZnRcIjtcbiAgICBPUklHSU5bXCJSSUdIVFwiXSA9IFwicmlnaHRcIjtcbiAgICBPUklHSU5bXCJUT1BcIl0gPSBcInRvcFwiO1xuICAgIE9SSUdJTltcIkJPVFRPTVwiXSA9IFwiYm90dG9tXCI7XG59KShPUklHSU4gfHwgKE9SSUdJTiA9IHt9KSk7XG4iLCJpbXBvcnQgeyBIU1FSVDMsIERFQ0lNQUxTIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5leHBvcnQgdmFyIHJvdW5kID0gZnVuY3Rpb24gKG4sIGQpIHtcbiAgICB2YXIgZXhwID0gTWF0aC5wb3coMTAsIGQpO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG4gKiBleHApIC8gZXhwO1xufTtcbmV4cG9ydCB2YXIgcmFkaWFuID0gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgKiBNYXRoLlBJIC8gMTgwOyB9O1xuZXhwb3J0IHZhciBzaW5jb3MgPSBmdW5jdGlvbiAocikgeyByZXR1cm4gKHtcbiAgICBzaW46IHJvdW5kKE1hdGguc2luKHIpLCBERUNJTUFMUyksXG4gICAgY29zOiByb3VuZChNYXRoLmNvcyhyKSwgREVDSU1BTFMpXG59KTsgfTtcbnZhciBnZXRQb2ludHNEaWZmID0gZnVuY3Rpb24gKHBvaW50QSwgcG9pbnRCKSB7IHJldHVybiAoe1xuICAgIHg6IHBvaW50QS54IC0gcG9pbnRCLngsXG4gICAgeTogcG9pbnRBLnkgLSBwb2ludEIueVxufSk7IH07XG52YXIgZ2V0UG9pbnRzRGlzdGFuY2UgPSBmdW5jdGlvbiAocG9pbnRBLCBwb2ludEIpIHtcbiAgICB2YXIgZGlmZiA9IGdldFBvaW50c0RpZmYocG9pbnRBLCBwb2ludEIpO1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGlmZi54LCAyKSArIE1hdGgucG93KGRpZmYueSwgMikpO1xufTtcbnZhciB0cmFuc2xhdGVQb2ludCA9IGZ1bmN0aW9uIChwb2ludCwgYW5nbGUsIGRpc3RhbmNlKSB7IHJldHVybiAoe1xuICAgIHg6IHBvaW50LnggKyBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZSxcbiAgICB5OiBwb2ludC55ICsgTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2Vcbn0pOyB9O1xudmFyIHJvdGF0ZSA9IGZ1bmN0aW9uIChwb2ludCwgY2VudGVyLCBhbmdsZSkge1xuICAgIHZhciBkaWZmID0gZ2V0UG9pbnRzRGlmZihwb2ludCwgY2VudGVyKTtcbiAgICB2YXIgeCA9IGRpZmYueCAqIE1hdGguY29zKGFuZ2xlKSAtIGRpZmYueSAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICB2YXIgeSA9IGRpZmYueCAqIE1hdGguc2luKGFuZ2xlKSArIGRpZmYueSAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBjZW50ZXIueCArIHgsXG4gICAgICAgIHk6IGNlbnRlci55ICsgeVxuICAgIH07XG59O1xudmFyIGdldFBvaW50c0FuZ2xlID0gZnVuY3Rpb24gKHBvaW50QSwgcG9pbnRCKSB7XG4gICAgdmFyIGRpZmYgPSBnZXRQb2ludHNEaWZmKHBvaW50QiwgcG9pbnRBKTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihkaWZmLnksIGRpZmYueCk7XG59O1xuZXhwb3J0IHZhciBnZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uIChwMSwgcDIsIHAzKSB7XG4gICAgdmFyIHZhbHVlID0gKHAyLnkgLSBwMS55KSAqIChwMy54IC0gcDIueCkgLSAocDIueCAtIHAxLngpICogKHAzLnkgLSBwMi55KTtcbiAgICByZXR1cm4gdmFsdWUgPj0gMCA/IDAgOiAxO1xufTtcbmV4cG9ydCB2YXIgZ2V0UG9pbnRGcm9tSXNvbWV0cmljUG9pbnQgPSBmdW5jdGlvbiAoY2VudGVyWCwgY2VudGVyWSwgcG9pbnQsIHNjYWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcm91bmQoY2VudGVyWCArIChwb2ludC5yIC0gcG9pbnQubCkgKiBzY2FsZSAqIEhTUVJUMywgREVDSU1BTFMpLFxuICAgICAgICB5OiByb3VuZChjZW50ZXJZICsgKChwb2ludC5yICsgcG9pbnQubCkgLyAyIC0gcG9pbnQudCkgKiBzY2FsZSwgREVDSU1BTFMpXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGdldFRvcFBsYW5lUG9pbnRGcm9tQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHZhciBYSFNRUlQzID0geCAvIEhTUVJUMztcbiAgICB2YXIgcmlnaHQgPSAoeSAqIDIgKyBYSFNRUlQzKSAvIDI7XG4gICAgdmFyIGxlZnQgPSByaWdodCAtIFhIU1FSVDM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGdldEZyb250UGxhbmVQb2ludEZyb21Db29yZGluYXRlcyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdmFyIGxlZnQgPSAteCAvIEhTUVJUMztcbiAgICB2YXIgdG9wID0gbGVmdCAvIDIgLSB5O1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIHRvcDogdG9wXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGdldFNpZGVQbGFuZVBvaW50RnJvbUNvb3JkaW5hdGVzID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgcmlnaHQgPSB4IC8gSFNRUlQzO1xuICAgIHZhciB0b3AgPSByaWdodCAvIDIgLSB5O1xuICAgIHJldHVybiB7XG4gICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgdG9wOiB0b3BcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgZ2V0RWxsaXBzaXNTcGVjcyA9IGZ1bmN0aW9uIChwb2ludEEsIHBvaW50QiwgY29udHJvbCkge1xuICAgIHZhciBkaWZmID0gZ2V0UG9pbnRzRGlmZihwb2ludEIsIHBvaW50QSk7XG4gICAgdmFyIGNlbnRlciA9IHsgeDogcG9pbnRBLnggKyBkaWZmLnggLyAyLCB5OiBwb2ludEEueSArIGRpZmYueSAvIDIgfTtcbiAgICB2YXIgUCA9IHJvdGF0ZShwb2ludEIsIGNlbnRlciwgTWF0aC5QSSAvIDIpO1xuICAgIHZhciBEID0geyB4OiBQLnggKyAoY29udHJvbC54IC0gUC54KSAvIDIsIHk6IFAueSArIChjb250cm9sLnkgLSBQLnkpIC8gMiB9O1xuICAgIHZhciByYWRpdXMgPSBnZXRQb2ludHNEaXN0YW5jZShELCBjZW50ZXIpO1xuICAgIHZhciBVID0gdHJhbnNsYXRlUG9pbnQoRCwgZ2V0UG9pbnRzQW5nbGUoRCwgUCksIHJhZGl1cyk7XG4gICAgdmFyIFYgPSB0cmFuc2xhdGVQb2ludChELCBnZXRQb2ludHNBbmdsZShELCBjb250cm9sKSwgcmFkaXVzKTtcbiAgICByZXR1cm4gW1xuICAgICAgICByb3VuZChnZXRQb2ludHNEaXN0YW5jZShjb250cm9sLCBVKSwgREVDSU1BTFMpLFxuICAgICAgICByb3VuZChnZXRQb2ludHNEaXN0YW5jZShjb250cm9sLCBWKSwgREVDSU1BTFMpLFxuICAgICAgICByb3VuZChnZXRQb2ludHNBbmdsZShjZW50ZXIsIFYpICogMTgwIC8gTWF0aC5QSSwgREVDSU1BTFMpXG4gICAgXTtcbn07XG52YXIgcmFuZG9tSWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgyKTsgfTtcbmV4cG9ydCB2YXIgdXVpZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmZyb20oQXJyYXkoMykpLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiByYW5kb21JZCgpOyB9KS5qb2luKCctJyk7IH07XG4iLCJ2YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5pbXBvcnQgeyBQbGFuZVZpZXcsIEF4aXMsIFJPVF80NSwgUk9UXzYwLCBST1RfQ01BIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBzaW5jb3MsIHJhZGlhbiB9IGZyb20gJ0B1dGlscy9tYXRoJztcbnZhciBtdWx0aXBseU1hdHJpeCA9IGZ1bmN0aW9uIChtMSwgbTIpIHsgcmV0dXJuIChtMS5tYXAoZnVuY3Rpb24gKHJvdywgaSkgeyByZXR1cm4gKG0yWzBdLm1hcChmdW5jdGlvbiAoXywgaikge1xuICAgIHJldHVybiByb3cucmVkdWNlKGZ1bmN0aW9uIChhY2MsIF8sIG4pIHtcbiAgICAgICAgcmV0dXJuIGFjYyArIG0xW2ldW25dICogbTJbbl1bal07XG4gICAgfSwgMCk7XG59KSk7IH0pKTsgfTtcbnZhciBtdWx0aXBseU1hdHJpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgbVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbWF0cml4ID0gbVswXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWF0cml4ID0gbXVsdGlwbHlNYXRyaXgobWF0cml4LCBtW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbn07XG52YXIgcm90YXRlWCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgdmFyIHNjID0gc2luY29zKHIpO1xuICAgIHJldHVybiBbXG4gICAgICAgIFsxLCAwLCAwXSxcbiAgICAgICAgWzAsIHNjLmNvcywgLXNjLnNpbl0sXG4gICAgICAgIFswLCBzYy5zaW4sIHNjLmNvc11cbiAgICBdO1xufTtcbnZhciByb3RhdGVZID0gZnVuY3Rpb24gKHIpIHtcbiAgICB2YXIgc2MgPSBzaW5jb3Mocik7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgW3NjLmNvcywgMCwgc2Muc2luXSxcbiAgICAgICAgWzAsIDEsIDBdLFxuICAgICAgICBbLXNjLnNpbiwgMCwgc2MuY29zXVxuICAgIF07XG59O1xudmFyIHJvdGF0ZVogPSBmdW5jdGlvbiAocikge1xuICAgIHZhciBzYyA9IHNpbmNvcyhyKTtcbiAgICByZXR1cm4gW1xuICAgICAgICBbc2MuY29zLCAtc2Muc2luLCAwXSxcbiAgICAgICAgW3NjLnNpbiwgc2MuY29zLCAwXSxcbiAgICAgICAgWzAsIDAsIDFdXG4gICAgXTtcbn07XG52YXIgdG9wTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyhyb3RhdGVYKFJPVF9DTUEpLCByb3RhdGVaKC1ST1RfNDUpKTtcbnZhciBmcm9udE1hdHJpeCA9IG11bHRpcGx5TWF0cmljZXMocm90YXRlWigtUk9UXzYwKSwgcm90YXRlWChST1RfQ01BKSwgcm90YXRlWihST1RfNDUpKTtcbnZhciBzaWRlTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyhyb3RhdGVaKFJPVF82MCksIHJvdGF0ZVgoUk9UX0NNQSksIHJvdGF0ZVooLVJPVF80NSkpO1xudmFyIHJvdGF0aW9uVG9Sb3RhdGlvbk1hdHJpeCA9IGZ1bmN0aW9uICh2aWV3LCByb3RhdGlvbikge1xuICAgIHZhciB2YWx1ZSA9IHJhZGlhbihyb3RhdGlvbi52YWx1ZSk7XG4gICAgc3dpdGNoICh2aWV3KSB7XG4gICAgICAgIGNhc2UgUGxhbmVWaWV3LlRPUDoge1xuICAgICAgICAgICAgc3dpdGNoIChyb3RhdGlvbi5heGlzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBBeGlzLlRPUDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdGF0ZVoodmFsdWUpO1xuICAgICAgICAgICAgICAgIGNhc2UgQXhpcy5MRUZUOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm90YXRlWCgtdmFsdWUpO1xuICAgICAgICAgICAgICAgIGNhc2UgQXhpcy5SSUdIVDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdGF0ZVkodmFsdWUpO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgUGxhbmVWaWV3LkZST05UOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJvdGF0aW9uLmF4aXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEF4aXMuVE9QOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm90YXRlWSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY2FzZSBBeGlzLkxFRlQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3RhdGVYKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjYXNlIEF4aXMuUklHSFQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3RhdGVaKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXNlIFBsYW5lVmlldy5TSURFOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJvdGF0aW9uLmF4aXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEF4aXMuVE9QOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm90YXRlWSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY2FzZSBBeGlzLkxFRlQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3RhdGVaKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjYXNlIEF4aXMuUklHSFQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3RhdGVYKC12YWx1ZSk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5leHBvcnQgdmFyIGdldFZpZXdNYXRyaXggPSBmdW5jdGlvbiAocGxhbmVWaWV3LCByb3RhdGlvbikge1xuICAgIHZhciByb3RhdGlvbk1hdHJpY2VzID0gW107XG4gICAgdmFyIHJvdGF0aW9uTWF0cml4ID0gcm90YXRpb25cbiAgICAgICAgPyByb3RhdGlvblRvUm90YXRpb25NYXRyaXgocGxhbmVWaWV3LCByb3RhdGlvbilcbiAgICAgICAgOiBudWxsO1xuICAgIGlmIChyb3RhdGlvbk1hdHJpeClcbiAgICAgICAgcm90YXRpb25NYXRyaWNlcy5wdXNoKHJvdGF0aW9uTWF0cml4KTtcbiAgICBzd2l0Y2ggKHBsYW5lVmlldykge1xuICAgICAgICBjYXNlIFBsYW5lVmlldy5UT1A6IHtcbiAgICAgICAgICAgIHJldHVybiBtdWx0aXBseU1hdHJpY2VzLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbdG9wTWF0cml4XSwgcm90YXRpb25NYXRyaWNlcywgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFBsYW5lVmlldy5GUk9OVDoge1xuICAgICAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtmcm9udE1hdHJpeF0sIHJvdGF0aW9uTWF0cmljZXMsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBQbGFuZVZpZXcuU0lERToge1xuICAgICAgICAgICAgcmV0dXJuIG11bHRpcGx5TWF0cmljZXMuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtzaWRlTWF0cml4XSwgcm90YXRpb25NYXRyaWNlcywgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG4iLCJ2YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5pbXBvcnQgeyBDT01NQU5EU19SRUdFWFAsIENvbW1hbmQsIERFQ0lNQUxTLCBTQ0FMRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0UG9pbnRGcm9tSXNvbWV0cmljUG9pbnQsIGdldEVsbGlwc2lzU3BlY3MsIGdldE9yaWVudGF0aW9uLCByb3VuZCB9IGZyb20gJ0B1dGlscy9tYXRoJztcbmltcG9ydCB7IGdldFZpZXdNYXRyaXggfSBmcm9tICdAdXRpbHMvbWF0cml4JztcbmV4cG9ydCB2YXIgYWRkU1ZHUHJvcGVydGllcyA9IGZ1bmN0aW9uIChzdmcsIHByb3BzKSB7XG4gICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsIHByb3AsIHByb3BzW3Byb3BdKTtcbiAgICB9KTtcbn07XG52YXIgZ2V0Q29tbWFuZHNXaXRoU3RhcnQgPSBmdW5jdGlvbiAoY29tbWFuZHMpIHtcbiAgICByZXR1cm4gY29tbWFuZHMubGVuZ3RoID09PSAwIHx8IGNvbW1hbmRzWzBdLmNvbW1hbmQgPT09IENvbW1hbmQubW92ZVxuICAgICAgICA/IF9fc3ByZWFkQXJyYXkoW10sIGNvbW1hbmRzLCB0cnVlKSA6IF9fc3ByZWFkQXJyYXkoW1xuICAgICAgICB7XG4gICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLm1vdmUsXG4gICAgICAgICAgICBwb2ludDogeyByOiAwLCBsOiAwLCB0OiAwIH1cbiAgICAgICAgfVxuICAgIF0sIGNvbW1hbmRzLCB0cnVlKTtcbn07XG5leHBvcnQgdmFyIGdldFNWR1BhdGggPSBmdW5jdGlvbiAoY29tbWFuZHMsIGNlbnRlclgsIGNlbnRlclksIHNjYWxlLCBhdXRvY2xvc2UpIHtcbiAgICB2YXIgZHJhd0NvbW1hbmRzID0gZ2V0Q29tbWFuZHNXaXRoU3RhcnQoY29tbWFuZHMpO1xuICAgIHZhciBzdmdQYXRocyA9IGRyYXdDb21tYW5kcy5tYXAoZnVuY3Rpb24gKGMsIGluZGV4KSB7XG4gICAgICAgIHZhciBwb2ludCA9IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50KGNlbnRlclgsIGNlbnRlclksIGMucG9pbnQsIHNjYWxlKTtcbiAgICAgICAgc3dpdGNoIChjLmNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZC5tb3ZlOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1cIi5jb25jYXQocG9pbnQueCwgXCIgXCIpLmNvbmNhdChwb2ludC55KTtcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZC5saW5lOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxcIi5jb25jYXQocG9pbnQueCwgXCIgXCIpLmNvbmNhdChwb2ludC55KTtcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZC5jdXJ2ZToge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50KGNlbnRlclgsIGNlbnRlclksIGNvbW1hbmRzW2luZGV4IC0gMV0ucG9pbnQsIHNjYWxlKTtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50KGNlbnRlclgsIGNlbnRlclksIGMuY29udHJvbCwgc2NhbGUpO1xuICAgICAgICAgICAgICAgIHZhciBlbGxpcHNpc1NwZWNzID0gZ2V0RWxsaXBzaXNTcGVjcyhzdGFydCwgcG9pbnQsIGNvbnRyb2wpO1xuICAgICAgICAgICAgICAgIHZhciBzd2VlcEZsYWcgPSBnZXRPcmllbnRhdGlvbihzdGFydCwgY29udHJvbCwgcG9pbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkEgXCIuY29uY2F0KGVsbGlwc2lzU3BlY3NbMF0sIFwiIFwiKS5jb25jYXQoZWxsaXBzaXNTcGVjc1sxXSwgXCIgXCIpLmNvbmNhdChlbGxpcHNpc1NwZWNzWzJdLCBcIiAwIFwiKS5jb25jYXQoc3dlZXBGbGFnLCBcIiBcIikuY29uY2F0KHBvaW50LngsIFwiIFwiKS5jb25jYXQocG9pbnQueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3ZnUGF0aHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoRW5kID0gYXV0b2Nsb3NlID8gJ3onIDogJyc7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzdmdQYXRocy5qb2luKCcgJykudHJpbSgpKS5jb25jYXQocGF0aEVuZCk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn07XG5leHBvcnQgdmFyIHBhcnNlRHJhd0NvbW1hbmRzID0gZnVuY3Rpb24gKGNvbW1hbmRzKSB7XG4gICAgdmFyIGNvbW1hbmRzQXJyYXkgPSBbXTtcbiAgICB2YXIgYXJyYXk7XG4gICAgd2hpbGUgKChhcnJheSA9IENPTU1BTkRTX1JFR0VYUC5leGVjKGNvbW1hbmRzKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGNvbW1hbmQgPSBhcnJheVs1XSB8fCBhcnJheVsxXTtcbiAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjb21tYW5kc0FycmF5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLm1vdmUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50OiB7IHI6ICthcnJheVsyXSwgbDogK2FycmF5WzNdLCB0OiArYXJyYXlbNF0gfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgY29tbWFuZHNBcnJheS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogQ29tbWFuZC5saW5lLFxuICAgICAgICAgICAgICAgICAgICBwb2ludDogeyByOiArYXJyYXlbMl0sIGw6ICthcnJheVszXSwgdDogK2FycmF5WzRdIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIGNvbW1hbmRzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQuY3VydmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2w6IHsgcjogK2FycmF5WzZdLCBsOiArYXJyYXlbN10sIHQ6ICthcnJheVs4XSB9LFxuICAgICAgICAgICAgICAgICAgICBwb2ludDogeyByOiArYXJyYXlbOV0sIGw6ICthcnJheVsxMF0sIHQ6ICthcnJheVsxMV0gfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb21tYW5kc0FycmF5O1xufTtcbmV4cG9ydCB2YXIgdHJhbnNsYXRlQ29tbWFuZFBvaW50cyA9IGZ1bmN0aW9uIChjb21tYW5kcywgcmlnaHQsIGxlZnQsIHRvcCkge1xuICAgIGNvbW1hbmRzLmZvckVhY2goZnVuY3Rpb24gKGNvbW1hbmQpIHtcbiAgICAgICAgY29tbWFuZC5wb2ludC5yICs9IHJpZ2h0O1xuICAgICAgICBjb21tYW5kLnBvaW50LmwgKz0gbGVmdDtcbiAgICAgICAgY29tbWFuZC5wb2ludC50ICs9IHRvcDtcbiAgICAgICAgaWYgKGNvbW1hbmQuY29udHJvbCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb250cm9sLnIgKz0gcmlnaHQ7XG4gICAgICAgICAgICBjb21tYW5kLmNvbnRyb2wubCArPSBsZWZ0O1xuICAgICAgICAgICAgY29tbWFuZC5jb250cm9sLnQgKz0gdG9wO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0IHZhciBnZXRUZXh0dXJlQ29ybmVyID0gZnVuY3Rpb24gKGNvbW1hbmRzLCBjZW50ZXJYLCBjZW50ZXJZLCBzY2FsZSkge1xuICAgIHZhciBjb3JuZXIgPSB7XG4gICAgICAgIHg6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgICB5OiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgIH07XG4gICAgZ2V0Q29tbWFuZHNXaXRoU3RhcnQoY29tbWFuZHMpXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBwb2ludCA9IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50KGNlbnRlclgsIGNlbnRlclksIGMucG9pbnQsIHNjYWxlKTtcbiAgICAgICAgaWYgKHBvaW50LnggPCBjb3JuZXIueCB8fFxuICAgICAgICAgICAgKHBvaW50LnggPT09IGNvcm5lci54ICYmXG4gICAgICAgICAgICAgICAgcG9pbnQueSA8IGNvcm5lci55KSkge1xuICAgICAgICAgICAgY29ybmVyLnggPSBwb2ludC54O1xuICAgICAgICAgICAgY29ybmVyLnkgPSBwb2ludC55O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcm5lcjtcbn07XG5leHBvcnQgdmFyIGlzU1ZHUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnZmlsbENvbG9yJyxcbiAgICAgICAgJ2ZpbGxPcGFjaXR5JyxcbiAgICAgICAgJ3N0cm9rZUNvbG9yJyxcbiAgICAgICAgJ3N0cm9rZU9wYWNpdHknLFxuICAgICAgICAnc3Ryb2tlV2lkdGgnXG4gICAgXS5pbmNsdWRlcyhwcm9wZXJ0eSk7XG59O1xuZXhwb3J0IHZhciBnZXRTVkdQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZpbGxDb2xvcjogJ2ZpbGwnLFxuICAgICAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgICAgIHN0cm9rZUNvbG9yOiAnc3Ryb2tlJyxcbiAgICAgICAgc3Ryb2tlT3BhY2l0eTogJ3N0cm9rZS1vcGFjaXR5JyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnXG4gICAgfVtwcm9wZXJ0eV07XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJUb0VsZW1lbnQoZWxlbWVudCwgbGlzdGVuZXJzLCBldmVudCwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICB2YXIgbGlzdGVuZXIgPSB7XG4gICAgICAgIGZuOiBjYWxsYmFjayxcbiAgICAgICAgZm5CaW5kOiBjYWxsYmFjay5iaW5kKHRoaXMpXG4gICAgfTtcbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lci5mbkJpbmQsIHVzZUNhcHR1cmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJGcm9tRWxlbWVudChlbGVtZW50LCBsaXN0ZW5lcnMsIGV2ZW50LCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIHZhciBsaXN0ZW5lcjtcbiAgICBsaXN0ZW5lcnMuZmluZChmdW5jdGlvbiAobG4sIGluZGV4KSB7XG4gICAgICAgIGlmIChsbi5mbiA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLmZuQmluZCwgdXNlQ2FwdHVyZSk7XG4gICAgfVxufVxuZXhwb3J0IHZhciBnZXRQYXR0ZXJuVHJhbnNmb3JtID0gZnVuY3Rpb24gKGNvcm5lciwgcGxhbmVWaWV3LCBzY2FsZSwgcm90YXRpb24pIHtcbiAgICB2YXIgbWF0cml4ID0gZ2V0Vmlld01hdHJpeChwbGFuZVZpZXcsIHJvdGF0aW9uKTtcbiAgICB2YXIgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGNvcm5lci54LCBcIiBcIikuY29uY2F0KGNvcm5lci55LCBcIilcIik7XG4gICAgaWYgKG1hdHJpeCkge1xuICAgICAgICB2YXIgbTEgPSByb3VuZChtYXRyaXhbMF1bMF0sIERFQ0lNQUxTKTtcbiAgICAgICAgdmFyIG0yID0gcm91bmQobWF0cml4WzFdWzBdLCBERUNJTUFMUyk7XG4gICAgICAgIHZhciBtMyA9IHJvdW5kKG1hdHJpeFswXVsxXSwgREVDSU1BTFMpO1xuICAgICAgICB2YXIgbTQgPSByb3VuZChtYXRyaXhbMV1bMV0sIERFQ0lNQUxTKTtcbiAgICAgICAgdHJhbnNmb3JtICs9IFwiIG1hdHJpeChcIi5jb25jYXQobTEsIFwiLFwiKS5jb25jYXQobTIsIFwiLFwiKS5jb25jYXQobTMsIFwiLFwiKS5jb25jYXQobTQsIFwiLDAsMClcIik7XG4gICAgICAgIHRyYW5zZm9ybSArPSBcIiBzY2FsZShcIi5jb25jYXQocm91bmQoU0NBTEUgKiAoc2NhbGUgfHwgMSksIERFQ0lNQUxTKSwgXCIpXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2FsZSkge1xuICAgICAgICB0cmFuc2Zvcm0gKz0gXCIgc2NhbGUoXCIuY29uY2F0KHJvdW5kKHNjYWxlLCBERUNJTUFMUyksIFwiKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcbn07XG5leHBvcnQgdmFyIGVsZW1lbnRIYXNTVkdQYXJlbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU1ZHU1ZHRWxlbWVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50SGFzU1ZHUGFyZW50KGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG4iLCJ2YXIgU3RvcmUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0b3JlKHdpZHRoLCBoZWlnaHQsIHNjYWxlKSB7XG4gICAgICAgIHRoaXMuc2l6ZXMgPSB7XG4gICAgICAgICAgICBjZW50ZXJYOiB3aWR0aCAvIDIsXG4gICAgICAgICAgICBjZW50ZXJZOiBoZWlnaHQgLyAyLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBzY2FsZTogc2NhbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0b3JlLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZXMud2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNpemVzLndpZHRoID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNpemVzLmNlbnRlclggPSB2YWx1ZSAvIDI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RvcmUucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZXMuaGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zaXplcy5oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZXMuY2VudGVyWSA9IHZhbHVlIC8gMjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdG9yZS5wcm90b3R5cGUsIFwic2NhbGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpemVzLnNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zaXplcy5zY2FsZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0b3JlLnByb3RvdHlwZSwgXCJjZW50ZXJYXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplcy5jZW50ZXJYO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0b3JlLnByb3RvdHlwZSwgXCJjZW50ZXJZXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplcy5jZW50ZXJZO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFN0b3JlO1xufSgpKTtcbmV4cG9ydCB7IFN0b3JlIH07XG4iLCJ2YXIgSXNvbWV0cmljU3RvcmUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElzb21ldHJpY1N0b3JlKCkge1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljU3RvcmUucHJvdG90eXBlLCBcImRhdGFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVN0b3JlID0gc3RvcmU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gSXNvbWV0cmljU3RvcmU7XG59KCkpO1xuZXhwb3J0IHsgSXNvbWV0cmljU3RvcmUgfTtcbiIsImV4cG9ydCB7IElzb21ldHJpY1N0b3JlIH0gZnJvbSAnLi9Jc29tZXRyaWNTdG9yZSc7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgU1ZHX05BTUVTUEFDRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgSXNvbWV0cmljU3RvcmUgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNTdG9yZSc7XG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyVG9FbGVtZW50LCByZW1vdmVFdmVudExpc3RlbmVyRnJvbUVsZW1lbnQgfSBmcm9tICdAdXRpbHMvc3ZnJztcbnZhciBJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljRWxlbWVudEFic3RyYWN0KHN2Z0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIF90aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgc3ZnRWxlbWVudCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljRWxlbWVudEFic3RyYWN0LnByb3RvdHlwZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH07XG4gICAgSXNvbWV0cmljRWxlbWVudEFic3RyYWN0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAodXNlQ2FwdHVyZSA9PT0gdm9pZCAwKSB7IHVzZUNhcHR1cmUgPSBmYWxzZTsgfVxuICAgICAgICBhZGRFdmVudExpc3RlbmVyVG9FbGVtZW50LmNhbGwodGhpcywgdGhpcy5lbGVtZW50LCB0aGlzLmxpc3RlbmVycywgZXZlbnQsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIGlmICh1c2VDYXB0dXJlID09PSB2b2lkIDApIHsgdXNlQ2FwdHVyZSA9IGZhbHNlOyB9XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGcm9tRWxlbWVudCh0aGlzLmVsZW1lbnQsIHRoaXMubGlzdGVuZXJzLCBldmVudCwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBJc29tZXRyaWNFbGVtZW50QWJzdHJhY3Q7XG59KElzb21ldHJpY1N0b3JlKSk7XG5leHBvcnQgeyBJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QgfTtcbiIsImV4cG9ydCB7IElzb21ldHJpY0VsZW1lbnRBYnN0cmFjdCB9IGZyb20gJy4vSXNvbWV0cmljRWxlbWVudEFic3RyYWN0JztcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgQ29sb3JzLCBMaW5lQ2FwLCBMaW5lSm9pbiwgREVDSU1BTFMsIFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUyB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgYWRkU1ZHUHJvcGVydGllcywgZ2V0U1ZHUHJvcGVydHksIGdldFBhdHRlcm5UcmFuc2Zvcm0sIGlzU1ZHUHJvcGVydHkgfSBmcm9tICdAdXRpbHMvc3ZnJztcbmltcG9ydCB7IHV1aWQsIHJvdW5kLCBnZXRQb2ludEZyb21Jc29tZXRyaWNQb2ludCB9IGZyb20gJ0B1dGlscy9tYXRoJztcbmltcG9ydCB7IElzb21ldHJpY0VsZW1lbnRBYnN0cmFjdCB9IGZyb20gJy4uL0lzb21ldHJpY0VsZW1lbnRBYnN0cmFjdCc7XG52YXIgZGVmYXVsdE9iamVjdFByb3BzID0ge1xuICAgIGZpbGxDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgIGZpbGxPcGFjaXR5OiAxLFxuICAgIHN0cm9rZUNvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgc3Ryb2tlRGFzaEFycmF5OiBbXSxcbiAgICBzdHJva2VMaW5lY2FwOiBMaW5lQ2FwLmJ1dHQsXG4gICAgc3Ryb2tlTGluZWpvaW46IExpbmVKb2luLnJvdW5kLFxuICAgIHN0cm9rZU9wYWNpdHk6IDEsXG4gICAgc3Ryb2tlV2lkdGg6IDFcbn07XG52YXIgSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdChwcm9wcywgc3ZnRWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzdmdFbGVtZW50KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0T2JqZWN0UHJvcHMpLCBwcm9wcyk7XG4gICAgICAgIF90aGlzLmFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnRleHR1cmUpIHtcbiAgICAgICAgICAgIF90aGlzLmNyZWF0ZVRleHR1cmUoX3RoaXMucHJvcHMudGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhfdGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAnZmlsbCc6IF90aGlzLnByb3BzLnRleHR1cmVcbiAgICAgICAgICAgICAgICA/IFwidXJsKCNcIi5jb25jYXQoX3RoaXMucGF0dGVybklkLCBcIikgXCIpLmNvbmNhdChfdGhpcy5maWxsQ29sb3IpXG4gICAgICAgICAgICAgICAgOiBfdGhpcy5maWxsQ29sb3IsXG4gICAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogXCJcIi5jb25jYXQoX3RoaXMuZmlsbE9wYWNpdHkpLFxuICAgICAgICAgICAgJ3N0cm9rZSc6IF90aGlzLnN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiBfdGhpcy5zdHJva2VEYXNoQXJyYXkuam9pbignICcpLFxuICAgICAgICAgICAgJ3N0cm9rZS1saW5lY2FwJzogX3RoaXMuc3Ryb2tlTGluZWNhcCxcbiAgICAgICAgICAgICdzdHJva2UtbGluZWpvaW4nOiBfdGhpcy5zdHJva2VMaW5lam9pbixcbiAgICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6IFwiXCIuY29uY2F0KF90aGlzLnN0cm9rZU9wYWNpdHkpLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IFwiXCIuY29uY2F0KF90aGlzLnN0cm9rZVdpZHRoKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLmNyZWF0ZVRleHR1cmUgPSBmdW5jdGlvbiAodGV4dHVyZSkge1xuICAgICAgICB0aGlzLnBhdHRlcm5JZCA9IHV1aWQoKTtcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUy5wYXR0ZXJuKTtcbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLnBhdHRlcm4sIHtcbiAgICAgICAgICAgICdpZCc6IHRoaXMucGF0dGVybklkLFxuICAgICAgICAgICAgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nOiAnbm9uZScsXG4gICAgICAgICAgICAncGF0dGVyblVuaXRzJzogJ3VzZXJTcGFjZU9uVXNlJ1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUy5pbWFnZSk7XG4gICAgICAgIGFkZFNWR1Byb3BlcnRpZXMoaW1hZ2UsIHtcbiAgICAgICAgICAgICdocmVmJzogdGV4dHVyZS51cmwsXG4gICAgICAgICAgICAneCc6ICcwJyxcbiAgICAgICAgICAgICd5JzogJzAnLFxuICAgICAgICAgICAgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nOiAnbm9uZSdcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0ZXh0dXJlLnBpeGVsYXRlZCkge1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhpbWFnZSwge1xuICAgICAgICAgICAgICAgICdzdHlsZSc6ICdpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGF0dGVybi5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLl91cGRhdGVUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW1hZ2UgPSB0aGlzLnBhdHRlcm4uZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dHVyZS51cmwgJiZcbiAgICAgICAgICAgIGltYWdlLmdldEF0dHJpYnV0ZSgnaHJlZicpICE9PSB0aGlzLnByb3BzLnRleHR1cmUudXJsKSB7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKGltYWdlLCB7XG4gICAgICAgICAgICAgICAgJ2hyZWYnOiB0aGlzLnByb3BzLnRleHR1cmUudXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy50ZXh0dXJlLnBpeGVsYXRlZCkge1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhpbWFnZSwge1xuICAgICAgICAgICAgICAgICdzdHlsZSc6ICdpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW1hZ2UucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lLCBhbmltYXRpb24pIHtcbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhhbmltYXRpb24uZWxlbWVudCwge1xuICAgICAgICAgICAgcmVwZWF0Q291bnQ6IFwiXCIuY29uY2F0KGFuaW1hdGlvbi5yZXBlYXQgfHwgJ2luZGVmaW5pdGUnKSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IGF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgICBkdXI6IFwiXCIuY29uY2F0KGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAxLCBcInNcIilcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLnVwZGF0ZUFuaW1hdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBpc05hdGl2ZVNWR1Byb3BlcnR5ID0gaXNTVkdQcm9wZXJ0eShhbmltYXRpb24ucHJvcGVydHkpO1xuICAgICAgICAgICAgaWYgKGlzTmF0aXZlU1ZHUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBnZXRTVkdQcm9wZXJ0eShhbmltYXRpb24ucHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgU1ZHX0VMRU1FTlRTLmFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChhbmltYXRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcyhwcm9wZXJ0eSwgYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLnZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKGFuaW1hdGlvbi5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IEFycmF5LmlzQXJyYXkoYW5pbWF0aW9uLnZhbHVlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFuaW1hdGlvbi52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUpOyB9KS5qb2luKCc7JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIuY29uY2F0KGFuaW1hdGlvbi52YWx1ZXMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhhbmltYXRpb24uZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogXCJcIi5jb25jYXQoYW5pbWF0aW9uLmZyb20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IFwiXCIuY29uY2F0KGFuaW1hdGlvbi50bylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVTdWJDbGFzc0FuaW1hdGlvbnMoKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdC5wcm90b3R5cGUudXBkYXRlUGF0dGVyblRyYW5zZm9ybSA9IGZ1bmN0aW9uIChjb3JuZXIsIHBsYW5lVmlldykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dHVyZSkge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMucHJvcHMudGV4dHVyZS5oZWlnaHRcbiAgICAgICAgICAgICAgICA/IFwiXCIuY29uY2F0KHRoaXMucHJvcHMudGV4dHVyZS5oZWlnaHQgKiB0aGlzLmRhdGEuc2NhbGUpXG4gICAgICAgICAgICAgICAgOiAnMTAwJSc7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnByb3BzLnRleHR1cmUud2lkdGhcbiAgICAgICAgICAgICAgICA/IFwiXCIuY29uY2F0KHRoaXMucHJvcHMudGV4dHVyZS53aWR0aCAqIHRoaXMuZGF0YS5zY2FsZSlcbiAgICAgICAgICAgICAgICA6ICcxMDAlJztcbiAgICAgICAgICAgIHZhciBzaGlmdCA9IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50KDAsIDAsIHtcbiAgICAgICAgICAgICAgICByOiAoKF9hID0gdGhpcy5wcm9wcy50ZXh0dXJlLnNoaWZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmlnaHQpIHx8IDAsXG4gICAgICAgICAgICAgICAgbDogKChfYiA9IHRoaXMucHJvcHMudGV4dHVyZS5zaGlmdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlZnQpIHx8IDAsXG4gICAgICAgICAgICAgICAgdDogKChfYyA9IHRoaXMucHJvcHMudGV4dHVyZS5zaGlmdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRvcCkgfHwgMFxuICAgICAgICAgICAgfSwgdGhpcy5kYXRhLnNjYWxlKTtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBnZXRQYXR0ZXJuVHJhbnNmb3JtKHtcbiAgICAgICAgICAgICAgICB4OiByb3VuZChjb3JuZXIueCArIHNoaWZ0LngsIERFQ0lNQUxTKSxcbiAgICAgICAgICAgICAgICB5OiByb3VuZChjb3JuZXIueSArIHNoaWZ0LnksIERFQ0lNQUxTKVxuICAgICAgICAgICAgfSwgdGhpcy5wcm9wcy50ZXh0dXJlLnBsYW5lVmlldyB8fCBwbGFuZVZpZXcsIHRoaXMucHJvcHMudGV4dHVyZS5zY2FsZSwgdGhpcy5wcm9wcy50ZXh0dXJlLnJvdGF0aW9uKTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5wYXR0ZXJuLCB7XG4gICAgICAgICAgICAgICAgJ3BhdHRlcm5UcmFuc2Zvcm0nOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodCxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiB3aWR0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMucGF0dGVybi5maXJzdENoaWxkLCB7XG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodCxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiB3aWR0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLCBcImZpbGxDb2xvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZmlsbENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5maWxsQ29sb3IgPSB2YWx1ZTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgJ2ZpbGwnOiB0aGlzLnByb3BzLnRleHR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyBcInVybCgjXCIuY29uY2F0KHRoaXMucGF0dGVybklkLCBcIikgXCIpLmNvbmNhdCh0aGlzLmZpbGxDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmZpbGxDb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LnByb3RvdHlwZSwgXCJmaWxsT3BhY2l0eVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZmlsbE9wYWNpdHk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmZpbGxPcGFjaXR5ID0gdmFsdWU7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwgeyAnZmlsbC1vcGFjaXR5JzogXCJcIi5jb25jYXQodGhpcy5maWxsT3BhY2l0eSkgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LnByb3RvdHlwZSwgXCJ0ZXh0dXJlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXh0dXJlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGhhc1RleHR1cmUgPSAhIXRoaXMucHJvcHMudGV4dHVyZTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMudGV4dHVyZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGhhc1RleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUZXh0dXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVRleHR1cmUodGhpcy5wcm9wcy50ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdC5wcm90b3R5cGUsIFwic3Ryb2tlQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN0cm9rZUNvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5zdHJva2VDb2xvciA9IHZhbHVlO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLmVsZW1lbnQsIHsgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlQ29sb3IgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LnByb3RvdHlwZSwgXCJzdHJva2VEYXNoQXJyYXlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN0cm9rZURhc2hBcnJheTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc3Ryb2tlRGFzaEFycmF5ID0gdmFsdWU7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwgeyAnc3Ryb2tlLWRhc2hhcnJheSc6IHRoaXMuc3Ryb2tlRGFzaEFycmF5LmpvaW4oJyAnKSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLCBcInN0cm9rZUxpbmVjYXBcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN0cm9rZUxpbmVjYXA7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnN0cm9rZUxpbmVjYXAgPSBMaW5lQ2FwW3ZhbHVlXTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5lbGVtZW50LCB7ICdzdHJva2UtbGluZWNhcCc6IHRoaXMuc3Ryb2tlTGluZWNhcCB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLCBcInN0cm9rZUxpbmVqb2luXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zdHJva2VMaW5lam9pbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc3Ryb2tlTGluZWpvaW4gPSBMaW5lSm9pblt2YWx1ZV07XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwgeyAnc3Ryb2tlLWxpbmVqb2luJzogdGhpcy5zdHJva2VMaW5lam9pbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLCBcInN0cm9rZU9wYWNpdHlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnN0cm9rZU9wYWNpdHkgPSB2YWx1ZTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5lbGVtZW50LCB7ICdzdHJva2Utb3BhY2l0eSc6IFwiXCIuY29uY2F0KHRoaXMuc3Ryb2tlT3BhY2l0eSkgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LnByb3RvdHlwZSwgXCJzdHJva2VXaWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc3Ryb2tlV2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnN0cm9rZVdpZHRoID0gdmFsdWU7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwgeyAnc3Ryb2tlLXdpZHRoJzogXCJcIi5jb25jYXQodGhpcy5zdHJva2VXaWR0aCkgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLmdldFBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdHRlcm47XG4gICAgfTtcbiAgICBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QucHJvdG90eXBlLnVwZGF0ZVRleHR1cmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGhhc1RleHR1cmUgPSAhIXRoaXMucHJvcHMudGV4dHVyZTtcbiAgICAgICAgaWYgKGhhc1RleHR1cmUgfHwgdmFsdWUudXJsKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnQgPSB2YWx1ZS5zaGlmdCwgcm90YXRpb24gPSB2YWx1ZS5yb3RhdGlvbiwgbmV3UHJvcHMgPSBfX3Jlc3QodmFsdWUsIFtcInNoaWZ0XCIsIFwicm90YXRpb25cIl0pO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50ZXh0dXJlID0gaGFzVGV4dHVyZVxuICAgICAgICAgICAgICAgID8gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMucHJvcHMudGV4dHVyZSksIG5ld1Byb3BzKSA6IF9fYXNzaWduKHt9LCBuZXdQcm9wcyk7XG4gICAgICAgICAgICBpZiAoc2hpZnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnRleHR1cmUuc2hpZnQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHRoaXMucHJvcHMudGV4dHVyZS5zaGlmdCB8fCB7fSkpLCBzaGlmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnRleHR1cmUucm90YXRpb24gPSByb3RhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUZXh0dXJlKHRoaXMucHJvcHMudGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdC5wcm90b3R5cGUuYWRkQW5pbWF0aW9uID0gZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChfX2Fzc2lnbih7fSwgYW5pbWF0aW9uKSk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0LnByb3RvdHlwZS5yZW1vdmVBbmltYXRpb25CeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5hbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5lbGVtZW50ICYmIGFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGFuaW1hdGlvbi5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdC5wcm90b3R5cGUucmVtb3ZlQW5pbWF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKDApO1xuICAgICAgICBhbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5lbGVtZW50ICYmIGFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGFuaW1hdGlvbi5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdDtcbn0oSXNvbWV0cmljRWxlbWVudEFic3RyYWN0KSk7XG5leHBvcnQgeyBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QgfTtcbiIsImV4cG9ydCB7IElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdCB9IGZyb20gJy4vSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0JztcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5pbXBvcnQgeyBlbGVtZW50SGFzU1ZHUGFyZW50IH0gZnJvbSAnQHV0aWxzL3N2Zyc7XG5pbXBvcnQgeyBJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNFbGVtZW50QWJzdHJhY3QnO1xuaW1wb3J0IHsgSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0IH0gZnJvbSAnQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0JztcbnZhciBJc29tZXRyaWNDb250YWluZXJBYnN0cmFjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0KHN2Z0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc3ZnRWxlbWVudCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLmdldENoaWxkSW5kZXggPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgIH07XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLnRocm93Q2hpbGRFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHByb3ZpZGUgYSBjaGlsZCB0aGF0IGlzIG5vdCBhIGNoaWxkcmVuIG9mIHRoZSBjb250YWluZXInKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5yZW1vdmVTVkdDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgc3ZnQ2hpbGQgPSBjaGlsZC5nZXRFbGVtZW50KCk7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdCkge1xuICAgICAgICAgICAgdmFyIHN2Z1BhdHRlcm5DaGlsZCA9IGNoaWxkLmdldFBhdHRlcm4oKTtcbiAgICAgICAgICAgIGlmIChzdmdQYXR0ZXJuQ2hpbGQgJiYgc3ZnUGF0dGVybkNoaWxkLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnUGF0dGVybkNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ZnQ2hpbGQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHN2Z0NoaWxkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLmluc2VydFBhdHRlcm4gPSBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICBpZiAocGF0dGVybikge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShwYXR0ZXJuLCB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNDb250YWluZXJBYnN0cmFjdC5wcm90b3R5cGUsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChlbGVtZW50SGFzU1ZHUGFyZW50KHRoaXMuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZGF0YSA9IF90aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgY2hpbGQudXBkYXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uc3BsaWNlKDApO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlU1ZHQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJc29tZXRyaWNDb250YWluZXJBYnN0cmFjdC5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgY2hpbGQuZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIElzb21ldHJpY0dyYXBoaWNBYnN0cmFjdCkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRQYXR0ZXJuKGNoaWxkLmdldFBhdHRlcm4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkLmdldEVsZW1lbnQoKSk7XG4gICAgICAgIGNoaWxkLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5hZGRDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBfdGhpcy5hZGRDaGlsZChjaGlsZCk7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShjaGlsZEluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU1ZHQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0NoaWxkRXJyb3IoKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRJbmRleCA9IF90aGlzLmdldENoaWxkSW5kZXgoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKGNoaWxkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3dDaGlsZEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5yZW1vdmVDaGlsZEJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVNWR0NoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5zZXRDaGlsZEluZGV4ID0gZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICB2YXIgY2hpbGRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgaW5kZXgpLCB0aGlzLl9jaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHZhciBtb3ZlZEVsZW1lbnQgPSBjaGlsZC5nZXRFbGVtZW50KCk7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZWRFbGVtZW50ID0gdGhpcy5fY2hpbGRyZW5baW5kZXhdLmdldEVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGlsZHJlbltpbmRleF0gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGNoaWxkSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZEluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShtb3ZlZEVsZW1lbnQsIHJlcGxhY2VkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVwbGFjZWRFbGVtZW50Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG1vdmVkRWxlbWVudCwgcmVwbGFjZWRFbGVtZW50Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChtb3ZlZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0NoaWxkRXJyb3IoKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0LnByb3RvdHlwZS5icmluZ0NoaWxkVG9Gcm9udCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hpbGRJbmRleChjaGlsZCwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRocm93Q2hpbGRFcnJvcigpO1xuICAgIH07XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLmJyaW5nQ2hpbGRGb3J3YXJkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZEluZGV4ID0gdGhpcy5nZXRDaGlsZEluZGV4KGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgaWYgKGNoaWxkSW5kZXggPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZEluZGV4KGNoaWxkLCBjaGlsZEluZGV4ICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRocm93Q2hpbGRFcnJvcigpO1xuICAgIH07XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLnNlbmRDaGlsZFRvQmFjayA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hpbGRJbmRleChjaGlsZCwgMCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRocm93Q2hpbGRFcnJvcigpO1xuICAgIH07XG4gICAgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QucHJvdG90eXBlLnNlbmRDaGlsZEJhY2t3YXJkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZEluZGV4ID0gdGhpcy5nZXRDaGlsZEluZGV4KGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgaWYgKGNoaWxkSW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZEluZGV4KGNoaWxkLCBjaGlsZEluZGV4IC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRocm93Q2hpbGRFcnJvcigpO1xuICAgIH07XG4gICAgcmV0dXJuIElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0O1xufShJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0IH07XG4iLCJleHBvcnQgeyBJc29tZXRyaWNDb250YWluZXJBYnN0cmFjdCB9IGZyb20gJy4vSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QnO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBTVkdfTkFNRVNQQUNFLCBTVkdfRUxFTUVOVFMsIFNWR19QUk9QRVJUSUVTLCBERUZBVUxUX1dJRFRILCBERUZBVUxUX0hFSUdIVCwgQ29sb3JzIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBhZGRTVkdQcm9wZXJ0aWVzIH0gZnJvbSAnQHV0aWxzL3N2Zyc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BzdG9yZSc7XG5pbXBvcnQgeyBJc29tZXRyaWNDb250YWluZXJBYnN0cmFjdCB9IGZyb20gJ0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY29udGFpbmVyOiAnYm9keScsXG4gICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgc2NhbGU6IDEsXG4gICAgaGVpZ2h0OiBERUZBVUxUX0hFSUdIVCxcbiAgICB3aWR0aDogREVGQVVMVF9XSURUSFxufTtcbnZhciBJc29tZXRyaWNDYW52YXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJc29tZXRyaWNDYW52YXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljQ2FudmFzKHByb3BzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHByb3BzID09PSB2b2lkIDApIHsgcHJvcHMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTVkdfRUxFTUVOVFMuc3ZnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMpLCBwcm9wcyk7XG4gICAgICAgIF90aGlzLmlzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5kYXRhID0gbmV3IFN0b3JlKF90aGlzLnByb3BzLndpZHRoLCBfdGhpcy5wcm9wcy5oZWlnaHQsIF90aGlzLnByb3BzLnNjYWxlKTtcbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhfdGhpcy5lbGVtZW50LCAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW1NWR19QUk9QRVJUSUVTLnZpZXdCb3hdID0gXCIwIDAgXCIuY29uY2F0KF90aGlzLmRhdGEud2lkdGgsIFwiIFwiKS5jb25jYXQoX3RoaXMuZGF0YS5oZWlnaHQpLFxuICAgICAgICAgICAgX2Eud2lkdGggPSBcIlwiLmNvbmNhdChfdGhpcy5kYXRhLndpZHRoLCBcInB4XCIpLFxuICAgICAgICAgICAgX2EuaGVpZ2h0ID0gXCJcIi5jb25jYXQoX3RoaXMuZGF0YS5oZWlnaHQsIFwicHhcIiksXG4gICAgICAgICAgICBfYSkpO1xuICAgICAgICBfdGhpcy5iYWNrZ3JvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUy5yZWN0KTtcbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhfdGhpcy5iYWNrZ3JvdW5kLCB7XG4gICAgICAgICAgICBmaWxsOiBfdGhpcy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICB4OiAnMCcsXG4gICAgICAgICAgICB5OiAnMCcsXG4gICAgICAgICAgICB3aWR0aDogXCJcIi5jb25jYXQoX3RoaXMuZGF0YS53aWR0aCwgXCJweFwiKSxcbiAgICAgICAgICAgIGhlaWdodDogXCJcIi5jb25jYXQoX3RoaXMuZGF0YS5oZWlnaHQsIFwicHhcIilcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoX3RoaXMuYmFja2dyb3VuZCk7XG4gICAgICAgIHZhciBjb250YWluZXJFbGVtZW50ID0gdHlwZW9mIF90aGlzLnByb3BzLmNvbnRhaW5lciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGhpcy5wcm9wcy5jb250YWluZXIpXG4gICAgICAgICAgICA6IF90aGlzLnByb3BzLmNvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChfdGhpcy5lbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJc29tZXRyaWNDYW52YXMucHJvdG90eXBlLmdldFNWR0NvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQub3V0ZXJIVE1MO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY0NhbnZhcy5wcm90b3R5cGUsIFwiYmFja2dyb3VuZENvbG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmJhY2tncm91bmRDb2xvciA9IHZhbHVlO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLmJhY2tncm91bmQsIHsgZmlsbDogdGhpcy5iYWNrZ3JvdW5kQ29sb3IgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljQ2FudmFzLnByb3RvdHlwZSwgXCJzY2FsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zY2FsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zY2FsZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNDYW52YXMucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwgKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbU1ZHX1BST1BFUlRJRVMudmlld0JveF0gPSBcIjAgMCBcIi5jb25jYXQodGhpcy5kYXRhLndpZHRoLCBcIiBcIikuY29uY2F0KHRoaXMuZGF0YS5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIF9hLmhlaWdodCA9IFwiXCIuY29uY2F0KHRoaXMuZGF0YS5oZWlnaHQsIFwicHhcIiksXG4gICAgICAgICAgICAgICAgX2EpKTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5iYWNrZ3JvdW5kLCB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIlwiLmNvbmNhdCh0aGlzLmRhdGEuaGVpZ2h0LCBcInB4XCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljQ2FudmFzLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS53aWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS53aWR0aCA9IHZhbHVlO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLmVsZW1lbnQsIChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW1NWR19QUk9QRVJUSUVTLnZpZXdCb3hdID0gXCIwIDAgXCIuY29uY2F0KHRoaXMuZGF0YS53aWR0aCwgXCIgXCIpLmNvbmNhdCh0aGlzLmRhdGEuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBfYS53aWR0aCA9IFwiXCIuY29uY2F0KHRoaXMuZGF0YS53aWR0aCwgXCJweFwiKSxcbiAgICAgICAgICAgICAgICBfYSkpO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLmJhY2tncm91bmQsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogXCJcIi5jb25jYXQodGhpcy5kYXRhLndpZHRoLCBcInB4XCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljQ2FudmFzLnByb3RvdHlwZSwgXCJhbmltYXRlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBbmltYXRlZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIElzb21ldHJpY0NhbnZhcy5wcm90b3R5cGUucGF1c2VBbmltYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ZnID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBpZiAodHlwZW9mIHN2Zy5wYXVzZUFuaW1hdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN2Zy5wYXVzZUFuaW1hdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJc29tZXRyaWNDYW52YXMucHJvdG90eXBlLnJlc3VtZUFuaW1hdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdmcgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGlmICh0eXBlb2Ygc3ZnLnVucGF1c2VBbmltYXRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdmcudW5wYXVzZUFuaW1hdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBJc29tZXRyaWNDYW52YXM7XG59KElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0KSk7XG5leHBvcnQgeyBJc29tZXRyaWNDYW52YXMgfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vSXNvbWV0cmljQ2FudmFzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuIiwiZXhwb3J0IHZhciBhcHBseU1peGlucyA9IGZ1bmN0aW9uIChCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29uc3RydWN0b3IucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlQ2xhc3MucHJvdG90eXBlLCBuYW1lLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgbmFtZSkpO1xuICAgIH0pO1xufTtcbiIsImV4cG9ydCB2YXIgTk9fTElNSVRTID0gW1xuICAgIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG5dO1xuZXhwb3J0IHZhciBEUkFHX0VWRU5UO1xuKGZ1bmN0aW9uIChEUkFHX0VWRU5UKSB7XG4gICAgRFJBR19FVkVOVFtcIkRSQUdfU1RBUlRcIl0gPSBcImRyYWdzdGFydFwiO1xuICAgIERSQUdfRVZFTlRbXCJEUkFHXCJdID0gXCJkcmFnXCI7XG4gICAgRFJBR19FVkVOVFtcIkRSQUdfRU5EXCJdID0gXCJkcmFnZW5kXCI7XG59KShEUkFHX0VWRU5UIHx8IChEUkFHX0VWRU5UID0ge30pKTtcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgRVZFTlRTLCBERUNJTUFMUywgUGxhbmVWaWV3LCBUeXBlb2YgfSBmcm9tICdAY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFRvcFBsYW5lUG9pbnRGcm9tQ29vcmRpbmF0ZXMsIGdldEZyb250UGxhbmVQb2ludEZyb21Db29yZGluYXRlcywgZ2V0U2lkZVBsYW5lUG9pbnRGcm9tQ29vcmRpbmF0ZXMsIHJvdW5kIH0gZnJvbSAnQHV0aWxzL21hdGgnO1xuaW1wb3J0IHsgSXNvbWV0cmljRWxlbWVudEFic3RyYWN0IH0gZnJvbSAnQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljRWxlbWVudEFic3RyYWN0JztcbmltcG9ydCB7IE5PX0xJTUlUUywgRFJBR19FVkVOVCB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBfaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gVHlwZW9mLlVOREVGSU5FRDtcbnZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gX2lzQnJvd3NlclxuICAgID8gKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICA6IG51bGw7XG52YXIgX2RyYWdTdG9yZURlZmF1bHQgPSB7XG4gICAgcmlnaHQ6IDAsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgeDogMCxcbiAgICB5OiAwXG59O1xudmFyIGlzTW91c2VFdmVudCA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gJ2NsaWVudFgnIGluIGV2ZW50OyB9O1xudmFyIGdldENsaWVudENvb3JkcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50KSB7XG4gICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNsaWVudFg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgICAgICAgY2xpZW50WTogZXZlbnQuY2xpZW50WVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xpZW50WDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudDtcbn07XG52YXIgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhcnREcmFnID0gdGhpcy5zdGFydERyYWcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdG9wRHJhZyA9IHRoaXMuc3RvcERyYWcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5tb3ZlRWxlbWVudCA9IHRoaXMubW92ZUVsZW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kcm9wRWxlbWVudCA9IHRoaXMuZHJvcEVsZW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hbmltYXRlID0gdGhpcy5hbmltYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fYm91bmRzID09PSBUeXBlb2YuVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICB0aGlzLl9ib3VuZHMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2RyYWdTdG9yZSA9PT0gVHlwZW9mLlVOREVGSU5FRCkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ1N0b3JlID0gX2RyYWdTdG9yZURlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb29yZHMgPT09IFR5cGVvZi5VTkRFRklORUQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvb3JkcyA9IHt9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuYmV0d2VlbkJvdW5kcyA9IGZ1bmN0aW9uICh2YWx1ZSwgYm91bmRzKSB7XG4gICAgICAgIHZhciBvcmRlcmVkQm91bmRzID0gX19zcHJlYWRBcnJheShbXSwgYm91bmRzLCB0cnVlKS5zb3J0KCk7XG4gICAgICAgIHJldHVybiByb3VuZChNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgb3JkZXJlZEJvdW5kc1swXSksIG9yZGVyZWRCb3VuZHNbMV0pLCBERUNJTUFMUyk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuZ2V0UmlnaHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuX2JvdW5kcyAmJiB0aGlzLl9ib3VuZHMucmlnaHQgfHwgTk9fTElNSVRTO1xuICAgICAgICByZXR1cm4gdGhpcy5iZXR3ZWVuQm91bmRzKHRoaXMuX2RyYWdTdG9yZS5yaWdodCArIHZhbHVlIC8gdGhpcy5kYXRhLnNjYWxlLCBib3VuZHMpO1xuICAgIH07XG4gICAgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLmdldExlZnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuX2JvdW5kcyAmJiB0aGlzLl9ib3VuZHMubGVmdCB8fCBOT19MSU1JVFM7XG4gICAgICAgIHJldHVybiB0aGlzLmJldHdlZW5Cb3VuZHModGhpcy5fZHJhZ1N0b3JlLmxlZnQgKyB2YWx1ZSAvIHRoaXMuZGF0YS5zY2FsZSwgYm91bmRzKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0LnByb3RvdHlwZS5nZXRUb3AgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuX2JvdW5kcyAmJiB0aGlzLl9ib3VuZHMudG9wIHx8IE5PX0xJTUlUUztcbiAgICAgICAgcmV0dXJuIHRoaXMuYmV0d2VlbkJvdW5kcyh0aGlzLl9kcmFnU3RvcmUudG9wICsgdmFsdWUgLyB0aGlzLmRhdGEuc2NhbGUsIGJvdW5kcyk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuZ2V0Rml4ZWRDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvb3JkcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVudHJ5KSB7XG4gICAgICAgICAgICB2YXIgZml4ZWRDb29yZHMgPSBfX2Fzc2lnbih7fSwgYWNjKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZW50cnlbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkQ29vcmRzLnJpZ2h0ID0gX3RoaXMuZ2V0UmlnaHQoZW50cnlbMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgZml4ZWRDb29yZHMubGVmdCA9IF90aGlzLmdldExlZnQoZW50cnlbMV0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBmaXhlZENvb3Jkcy50b3AgPSBfdGhpcy5nZXRUb3AoZW50cnlbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpeGVkQ29vcmRzO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICAgICAgdmFyIGRyYWdFdmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudFR5cGUsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IGV2ZW50VHlwZSA9PT0gRFJBR19FVkVOVC5EUkFHLFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMuX2Nvb3Jkcy5yaWdodCB8fCB0aGlzLnJpZ2h0LFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuX2Nvb3Jkcy5sZWZ0IHx8IHRoaXMubGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMuX2Nvb3Jkcy50b3AgfHwgdGhpcy50b3BcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KGRyYWdFdmVudCk7XG4gICAgICAgIHJldHVybiBkcmFnRXZlbnQ7XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2Nvb3Jkcy5yaWdodCA9PT0gVHlwZW9mLk5VTUJFUikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5fY29vcmRzLnJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2Nvb3Jkcy5sZWZ0ID09PSBUeXBlb2YuTlVNQkVSKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IHRoaXMuX2Nvb3Jkcy5sZWZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2Nvb3Jkcy50b3AgPT09IFR5cGVvZi5OVU1CRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLl9jb29yZHMudG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLnN0YXJ0RHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgX2EgPSBnZXRDbGllbnRDb29yZHMoZXZlbnQpLCBjbGllbnRYID0gX2EuY2xpZW50WCwgY2xpZW50WSA9IF9hLmNsaWVudFk7XG4gICAgICAgIHRoaXMuX2RyYWdTdG9yZS54ID0gY2xpZW50WDtcbiAgICAgICAgdGhpcy5fZHJhZ1N0b3JlLnkgPSBjbGllbnRZO1xuICAgICAgICB0aGlzLl9kcmFnU3RvcmUucmlnaHQgPSB0aGlzLnJpZ2h0O1xuICAgICAgICB0aGlzLl9kcmFnU3RvcmUubGVmdCA9IHRoaXMubGVmdDtcbiAgICAgICAgdGhpcy5fZHJhZ1N0b3JlLnRvcCA9IHRoaXMudG9wO1xuICAgICAgICB0aGlzLl91cGRhdGUgPSB0cnVlO1xuICAgICAgICB0aGlzLm1vdmVFbGVtZW50KHsgY2xpZW50WDogY2xpZW50WCwgY2xpZW50WTogY2xpZW50WSB9KTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRTLlRPVUNIX01PVkUsIHRoaXMubW92ZUVsZW1lbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihFVkVOVFMuVE9VQ0hfRU5ELCB0aGlzLmRyb3BFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihFVkVOVFMuTU9VU0VfTU9WRSwgdGhpcy5tb3ZlRWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRTLk1PVVNFX1VQLCB0aGlzLmRyb3BFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGUpO1xuICAgIH07XG4gICAgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLm1vdmVFbGVtZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYSA9IGdldENsaWVudENvb3JkcyhldmVudCksIGNsaWVudFggPSBfYS5jbGllbnRYLCBjbGllbnRZID0gX2EuY2xpZW50WTtcbiAgICAgICAgdmFyIGRpZmZYID0gY2xpZW50WCAtIHRoaXMuX2RyYWdTdG9yZS54O1xuICAgICAgICB2YXIgZGlmZlkgPSBjbGllbnRZIC0gdGhpcy5fZHJhZ1N0b3JlLnk7XG4gICAgICAgIGlmICh0aGlzLl9kcmFnID09PSBQbGFuZVZpZXcuVE9QKSB7XG4gICAgICAgICAgICB0aGlzLl9jb29yZHMgPSB0aGlzLmdldEZpeGVkQ29vcmRpbmF0ZXMoZ2V0VG9wUGxhbmVQb2ludEZyb21Db29yZGluYXRlcyhkaWZmWCwgZGlmZlkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9kcmFnID09PSBQbGFuZVZpZXcuRlJPTlQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvb3JkcyA9IHRoaXMuZ2V0Rml4ZWRDb29yZGluYXRlcyhnZXRGcm9udFBsYW5lUG9pbnRGcm9tQ29vcmRpbmF0ZXMoZGlmZlgsIGRpZmZZKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb29yZHMgPSB0aGlzLmdldEZpeGVkQ29vcmRpbmF0ZXMoZ2V0U2lkZVBsYW5lUG9pbnRGcm9tQ29vcmRpbmF0ZXMoZGlmZlgsIGRpZmZZKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRyYWdFdmVudDtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgRXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KERSQUdfRVZFTlQuRFJBR19TVEFSVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICBkcmFnRXZlbnQgPSB0aGlzLmRpc3BhdGNoRXZlbnQoRFJBR19FVkVOVC5EUkFHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2ZW50ZWQgPSAhIShkcmFnRXZlbnQgJiYgZHJhZ0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpO1xuICAgIH07XG4gICAgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLmRyb3BFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl91cGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoRVZFTlRTLlRPVUNIX01PVkUsIHRoaXMubW92ZUVsZW1lbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuVE9VQ0hfRU5ELCB0aGlzLmRyb3BFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuTU9VU0VfTU9WRSwgdGhpcy5tb3ZlRWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoRVZFTlRTLk1PVVNFX1VQLCB0aGlzLmRyb3BFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KERSQUdfRVZFTlQuRFJBR19FTkQpO1xuICAgIH07XG4gICAgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLmJlZ2luRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRTLlRPVUNIX1NUQVJULCB0aGlzLnN0YXJ0RHJhZywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKEVWRU5UUy5NT1VTRV9ET1dOLCB0aGlzLnN0YXJ0RHJhZywgdHJ1ZSk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUuc3RvcERyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKEVWRU5UUy5UT1VDSF9TVEFSVCwgdGhpcy5zdGFydERyYWcsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuVE9VQ0hfTU9WRSwgdGhpcy5tb3ZlRWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKEVWRU5UUy5UT1VDSF9FTkQsIHRoaXMuZHJvcEVsZW1lbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuTU9VU0VfRE9XTiwgdGhpcy5zdGFydERyYWcsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKEVWRU5UUy5NT1VTRV9NT1ZFLCB0aGlzLm1vdmVFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuTU9VU0VfVVAsIHRoaXMuZHJvcEVsZW1lbnQsIHRydWUpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0LnByb3RvdHlwZSwgXCJyaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5yaWdodCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJpZ2h0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUsIFwibGVmdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubGVmdDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmxlZnQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5sZWZ0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdC5wcm90b3R5cGUsIFwidG9wXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50b3A7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b3AgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy50b3AgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0LnByb3RvdHlwZSwgXCJkcmFnXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhZyB8fCBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fZHJhZyA9PT0gVHlwZW9mLlVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RyYWcgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChfaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wRHJhZygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmVnaW5EcmFnKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QucHJvdG90eXBlLCBcImJvdW5kc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kcyB8fCBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kcyA9IHZhbHVlO1xuICAgICAgICAgICAgdmFyIGJvdW5kc1JpZ2h0ID0gdGhpcy5fYm91bmRzICYmIHRoaXMuX2JvdW5kcy5yaWdodCB8fCBOT19MSU1JVFM7XG4gICAgICAgICAgICB2YXIgYm91bmRzTGVmdCA9IHRoaXMuX2JvdW5kcyAmJiB0aGlzLl9ib3VuZHMubGVmdCB8fCBOT19MSU1JVFM7XG4gICAgICAgICAgICB2YXIgYm91bmRzVG9wID0gdGhpcy5fYm91bmRzICYmIHRoaXMuX2JvdW5kcy50b3AgfHwgTk9fTElNSVRTO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMuYmV0d2VlbkJvdW5kcyh0aGlzLnJpZ2h0LCBib3VuZHNSaWdodCk7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLmJldHdlZW5Cb3VuZHModGhpcy5sZWZ0LCBib3VuZHNMZWZ0KTtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdGhpcy5iZXR3ZWVuQm91bmRzKHRoaXMudG9wLCBib3VuZHNUb3ApO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0O1xufShJc29tZXRyaWNFbGVtZW50QWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0IH07XG4iLCJleHBvcnQgeyBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCB9IGZyb20gJy4vSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QnO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBTVkdfRUxFTUVOVFMgfSBmcm9tICdAY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFBvaW50RnJvbUlzb21ldHJpY1BvaW50IH0gZnJvbSAnQHV0aWxzL21hdGgnO1xuaW1wb3J0IHsgZWxlbWVudEhhc1NWR1BhcmVudCwgYWRkU1ZHUHJvcGVydGllcyB9IGZyb20gJ0B1dGlscy9zdmcnO1xuaW1wb3J0IHsgYXBwbHlNaXhpbnMgfSBmcm9tICdAdXRpbHMvb3RoZXInO1xuaW1wb3J0IHsgSXNvbWV0cmljQ29udGFpbmVyQWJzdHJhY3QgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNDb250YWluZXJBYnN0cmFjdCc7XG5pbXBvcnQgeyBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCB9IGZyb20gJ0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcmlnaHQ6IDAsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG59O1xudmFyIElzb21ldHJpY0dyb3VwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSXNvbWV0cmljR3JvdXAsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljR3JvdXAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzID09PSB2b2lkIDApIHsgcHJvcHMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTVkdfRUxFTUVOVFMuZ3JvdXApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRQcm9wcyksIHByb3BzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJc29tZXRyaWNHcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZWxlbWVudEhhc1NWR1BhcmVudCh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBnZXRQb2ludEZyb21Jc29tZXRyaWNQb2ludCgwLCAwLCB7XG4gICAgICAgICAgICAgICAgcjogdGhpcy5wcm9wcy5yaWdodCxcbiAgICAgICAgICAgICAgICBsOiB0aGlzLnByb3BzLmxlZnQsXG4gICAgICAgICAgICAgICAgdDogdGhpcy5wcm9wcy50b3BcbiAgICAgICAgICAgIH0sIHRoaXMuZGF0YS5zY2FsZSk7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHBvaW50LngsIFwiLCBcIikuY29uY2F0KHBvaW50LnksIFwiKVwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gSXNvbWV0cmljR3JvdXA7XG59KElzb21ldHJpY0NvbnRhaW5lckFic3RyYWN0KSk7XG5leHBvcnQgeyBJc29tZXRyaWNHcm91cCB9O1xuYXBwbHlNaXhpbnMoSXNvbWV0cmljR3JvdXAsIElzb21ldHJpY0RyYWdnYWJsZUFic3RyYWN0KTtcbiIsImV4cG9ydCB7IElzb21ldHJpY0dyb3VwIH0gZnJvbSAnLi9Jc29tZXRyaWNHcm91cCc7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgYWRkU1ZHUHJvcGVydGllcywgZ2V0U1ZHUGF0aCwgZ2V0VGV4dHVyZUNvcm5lciwgZWxlbWVudEhhc1NWR1BhcmVudCB9IGZyb20gJ0B1dGlscy9zdmcnO1xuaW1wb3J0IHsgSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0IH0gZnJvbSAnLi4vSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0JztcbnZhciBJc29tZXRyaWNQYXRoQWJzdHJhY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJc29tZXRyaWNQYXRoQWJzdHJhY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljUGF0aEFic3RyYWN0KHByb3BzLCBzdmdFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcywgc3ZnRWxlbWVudCkgfHwgdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljUGF0aEFic3RyYWN0LnByb3RvdHlwZS51cGRhdGVHcmFwaGljID0gZnVuY3Rpb24gKHBsYW5lVmlldywgYXV0b2Nsb3NlKSB7XG4gICAgICAgIGlmIChhdXRvY2xvc2UgPT09IHZvaWQgMCkgeyBhdXRvY2xvc2UgPSB0cnVlOyB9XG4gICAgICAgIGlmIChlbGVtZW50SGFzU1ZHUGFyZW50KHRoaXMuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHZhciBjb21tYW5kcyA9IHRoaXMuZ2V0Q29tbWFuZHMoKTtcbiAgICAgICAgICAgIHZhciBjb3JuZXIgPSBnZXRUZXh0dXJlQ29ybmVyKGNvbW1hbmRzLCB0aGlzLmRhdGEuY2VudGVyWCwgdGhpcy5kYXRhLmNlbnRlclksIHRoaXMuZGF0YS5zY2FsZSk7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGQ6IGdldFNWR1BhdGgoY29tbWFuZHMsIHRoaXMuZGF0YS5jZW50ZXJYLCB0aGlzLmRhdGEuY2VudGVyWSwgdGhpcy5kYXRhLnNjYWxlLCBhdXRvY2xvc2UpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGF0dGVyblRyYW5zZm9ybShjb3JuZXIsIHBsYW5lVmlldyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFuaW1hdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIElzb21ldHJpY1BhdGhBYnN0cmFjdDtcbn0oSXNvbWV0cmljR3JhcGhpY0Fic3RyYWN0KSk7XG5leHBvcnQgeyBJc29tZXRyaWNQYXRoQWJzdHJhY3QgfTtcbiIsImV4cG9ydCB7IElzb21ldHJpY1BhdGhBYnN0cmFjdCB9IGZyb20gJy4vSXNvbWV0cmljUGF0aEFic3RyYWN0JztcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsgU1ZHX0VMRU1FTlRTIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBhZGRTVkdQcm9wZXJ0aWVzIH0gZnJvbSAnQHV0aWxzL3N2Zyc7XG5pbXBvcnQgeyBhcHBseU1peGlucyB9IGZyb20gJ0B1dGlscy9vdGhlcic7XG5pbXBvcnQgeyBJc29tZXRyaWNQYXRoQWJzdHJhY3QgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNQYXRoQWJzdHJhY3QnO1xuaW1wb3J0IHsgSXNvbWV0cmljRHJhZ2dhYmxlQWJzdHJhY3QgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAgIHJpZ2h0OiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxufTtcbnZhciBJc29tZXRyaWNTaGFwZUFic3RyYWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSXNvbWV0cmljU2hhcGVBYnN0cmFjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJc29tZXRyaWNTaGFwZUFic3RyYWN0KHByb3BzKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdFByb3BzKSwgcHJvcHMpLCBTVkdfRUxFTUVOVFMucGF0aCkgfHwgdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljU2hhcGVBYnN0cmFjdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUdyYXBoaWModGhpcy5wbGFuZVZpZXcpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY1NoYXBlQWJzdHJhY3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgZDogJydcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY1NoYXBlQWJzdHJhY3QucHJvdG90eXBlLCBcInBsYW5lVmlld1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucGxhbmVWaWV3O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5wbGFuZVZpZXcgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gSXNvbWV0cmljU2hhcGVBYnN0cmFjdDtcbn0oSXNvbWV0cmljUGF0aEFic3RyYWN0KSk7XG5leHBvcnQgeyBJc29tZXRyaWNTaGFwZUFic3RyYWN0IH07XG5hcHBseU1peGlucyhJc29tZXRyaWNTaGFwZUFic3RyYWN0LCBJc29tZXRyaWNEcmFnZ2FibGVBYnN0cmFjdCk7XG4iLCJleHBvcnQgeyBJc29tZXRyaWNTaGFwZUFic3RyYWN0IH0gZnJvbSAnLi9Jc29tZXRyaWNTaGFwZUFic3RyYWN0JztcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgQ29tbWFuZCwgUGxhbmVWaWV3LCBTVkdfRUxFTUVOVFMsIFNWR19OQU1FU1BBQ0UsIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRTVkdQYXRoLCB0cmFuc2xhdGVDb21tYW5kUG9pbnRzLCBhZGRTVkdQcm9wZXJ0aWVzLCBpc1NWR1Byb3BlcnR5IH0gZnJvbSAnQHV0aWxzL3N2Zyc7XG5pbXBvcnQgeyBJc29tZXRyaWNTaGFwZUFic3RyYWN0IH0gZnJvbSAnQGNsYXNzZXMvYWJzdHJhY3QvSXNvbWV0cmljU2hhcGVBYnN0cmFjdCc7XG52YXIgSXNvbWV0cmljUmVjdGFuZ2xlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSXNvbWV0cmljUmVjdGFuZ2xlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElzb21ldHJpY1JlY3RhbmdsZShwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LCB3aWR0aCA9IHByb3BzLndpZHRoLCByZXN0ID0gX19yZXN0KHByb3BzLCBbXCJoZWlnaHRcIiwgXCJ3aWR0aFwiXSk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcmVzdCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIF90aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljUmVjdGFuZ2xlLnByb3RvdHlwZS5nZXRDb21tYW5kcyA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciByaWdodCA9IChhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MucmlnaHQpIHx8IHRoaXMucmlnaHQ7XG4gICAgICAgIHZhciBsZWZ0ID0gKGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5sZWZ0KSB8fCB0aGlzLmxlZnQ7XG4gICAgICAgIHZhciB0b3AgPSAoYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLnRvcCkgfHwgdGhpcy50b3A7XG4gICAgICAgIHZhciB3aWR0aCA9IChhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3Mud2lkdGgpIHx8IHRoaXMud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSAoYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmhlaWdodCkgfHwgdGhpcy5oZWlnaHQ7XG4gICAgICAgIHZhciBjb21tYW5kcyA9IFt7IGNvbW1hbmQ6IENvbW1hbmQubW92ZSwgcG9pbnQ6IHsgcjogMCwgbDogMCwgdDogMCB9IH1dO1xuICAgICAgICBzd2l0Y2ggKHRoaXMucGxhbmVWaWV3KSB7XG4gICAgICAgICAgICBjYXNlIFBsYW5lVmlldy5GUk9OVDpcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogQ29tbWFuZC5saW5lLCBwb2ludDogeyByOiAwLCBsOiB3aWR0aCwgdDogMCB9IH0sIHsgY29tbWFuZDogQ29tbWFuZC5saW5lLCBwb2ludDogeyByOiAwLCBsOiB3aWR0aCwgdDogaGVpZ2h0IH0gfSwgeyBjb21tYW5kOiBDb21tYW5kLmxpbmUsIHBvaW50OiB7IHI6IDAsIGw6IDAsIHQ6IGhlaWdodCB9IH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQbGFuZVZpZXcuU0lERTpcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogQ29tbWFuZC5saW5lLCBwb2ludDogeyByOiB3aWR0aCwgbDogMCwgdDogMCB9IH0sIHsgY29tbWFuZDogQ29tbWFuZC5saW5lLCBwb2ludDogeyByOiB3aWR0aCwgbDogMCwgdDogaGVpZ2h0IH0gfSwgeyBjb21tYW5kOiBDb21tYW5kLmxpbmUsIHBvaW50OiB7IHI6IDAsIGw6IDAsIHQ6IGhlaWdodCB9IH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQbGFuZVZpZXcuVE9QOlxuICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goeyBjb21tYW5kOiBDb21tYW5kLmxpbmUsIHBvaW50OiB7IHI6IHdpZHRoLCBsOiAwLCB0OiAwIH0gfSwgeyBjb21tYW5kOiBDb21tYW5kLmxpbmUsIHBvaW50OiB7IHI6IHdpZHRoLCBsOiBoZWlnaHQsIHQ6IDAgfSB9LCB7IGNvbW1hbmQ6IENvbW1hbmQubGluZSwgcG9pbnQ6IHsgcjogMCwgbDogaGVpZ2h0LCB0OiAwIH0gfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNsYXRlQ29tbWFuZFBvaW50cyhjb21tYW5kcywgcmlnaHQsIGxlZnQsIHRvcCk7XG4gICAgICAgIHJldHVybiBjb21tYW5kcztcbiAgICB9O1xuICAgIElzb21ldHJpY1JlY3RhbmdsZS5wcm90b3R5cGUuZ2V0UmVjdGFuZ2xlUGF0aCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBjb21tYW5kcyA9IHRoaXMuZ2V0Q29tbWFuZHMoYXJncyk7XG4gICAgICAgIHJldHVybiBnZXRTVkdQYXRoKGNvbW1hbmRzLCB0aGlzLmRhdGEuY2VudGVyWCwgdGhpcy5kYXRhLmNlbnRlclksIHRoaXMuZGF0YS5zY2FsZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICBJc29tZXRyaWNSZWN0YW5nbGUucHJvdG90eXBlLnVwZGF0ZVN1YkNsYXNzQW5pbWF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgdmFyIGlzTmF0aXZlU1ZHUHJvcGVydHkgPSBpc1NWR1Byb3BlcnR5KGFuaW1hdGlvbi5wcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAoIWlzTmF0aXZlU1ZHUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcHNfMSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IF90aGlzLnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdGhpcy5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IF90aGlzLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF90aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF90aGlzLmhlaWdodFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wc18xLCBhbmltYXRpb24ucHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eV8xID0gYW5pbWF0aW9uLnByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFuaW1hdGlvbi52YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBhbmltYXRpb24udmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RpZmllZEFyZ3MgPSBfX2Fzc2lnbih7fSwgcHJvcHNfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFyZ3NbcHJvcGVydHlfMV0gPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0UmVjdGFuZ2xlUGF0aChtb2RpZmllZEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCc7JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGlmaWVkQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wc18xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IF90aGlzLmdldFJlY3RhbmdsZVBhdGgobW9kaWZpZWRBcmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbUFyZ3MgPSBfX2Fzc2lnbih7fSwgcHJvcHNfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9BcmdzID0gX19hc3NpZ24oe30sIHByb3BzXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLmZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0FyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLnRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBfdGhpcy5nZXRSZWN0YW5nbGVQYXRoKGZyb21BcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogX3RoaXMuZ2V0UmVjdGFuZ2xlUGF0aCh0b0FyZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUy5hbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoYW5pbWF0aW9uLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcygnZCcsIGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXMoYW5pbWF0aW9uLmVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljUmVjdGFuZ2xlLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljUmVjdGFuZ2xlLnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBJc29tZXRyaWNSZWN0YW5nbGUucHJvdG90eXBlLmFkZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuYWRkQW5pbWF0aW9uLmNhbGwodGhpcywgYW5pbWF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBJc29tZXRyaWNSZWN0YW5nbGU7XG59KElzb21ldHJpY1NoYXBlQWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY1JlY3RhbmdsZSB9O1xuIiwiZXhwb3J0IHsgSXNvbWV0cmljUmVjdGFuZ2xlIH0gZnJvbSAnLi9Jc29tZXRyaWNSZWN0YW5nbGUnO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBDb21tYW5kLCBQbGFuZVZpZXcsIFNWR19FTEVNRU5UUywgU1ZHX05BTUVTUEFDRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0U1ZHUGF0aCwgdHJhbnNsYXRlQ29tbWFuZFBvaW50cywgYWRkU1ZHUHJvcGVydGllcywgaXNTVkdQcm9wZXJ0eSB9IGZyb20gJ0B1dGlscy9zdmcnO1xuaW1wb3J0IHsgSXNvbWV0cmljU2hhcGVBYnN0cmFjdCB9IGZyb20gJ0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY1NoYXBlQWJzdHJhY3QnO1xudmFyIElzb21ldHJpY0NpcmNsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElzb21ldHJpY0NpcmNsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJc29tZXRyaWNDaXJjbGUocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJhZGl1cyA9IHByb3BzLnJhZGl1cywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wicmFkaXVzXCJdKTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCByZXN0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmFkaXVzID0gcmFkaXVzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIElzb21ldHJpY0NpcmNsZS5wcm90b3R5cGUuZ2V0Q29tbWFuZHMgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmlnaHQgPSAoYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLnJpZ2h0KSB8fCB0aGlzLnJpZ2h0O1xuICAgICAgICB2YXIgbGVmdCA9IChhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MubGVmdCkgfHwgdGhpcy5sZWZ0O1xuICAgICAgICB2YXIgdG9wID0gKGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy50b3ApIHx8IHRoaXMudG9wO1xuICAgICAgICB2YXIgcmFkaXVzID0gKGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5yYWRpdXMpIHx8IHRoaXMucmFkaXVzO1xuICAgICAgICB2YXIgY29tbWFuZHMgPSBbXTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnBsYW5lVmlldykge1xuICAgICAgICAgICAgY2FzZSBQbGFuZVZpZXcuRlJPTlQ6XG4gICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQubW92ZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHsgcjogMCwgbDogcmFkaXVzLCB0OiAwIH1cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQuY3VydmUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50OiB7IHI6IDAsIGw6IC1yYWRpdXMsIHQ6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbDogeyByOiAwLCBsOiAwLCB0OiAtcmFkaXVzIH1cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQuY3VydmUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50OiB7IHI6IDAsIGw6IHJhZGl1cywgdDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sOiB7IHI6IDAsIGw6IDAsIHQ6IHJhZGl1cyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBsYW5lVmlldy5TSURFOlxuICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLm1vdmUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50OiB7IHI6IC1yYWRpdXMsIGw6IDAsIHQ6IDAgfVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogQ29tbWFuZC5jdXJ2ZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHsgcjogcmFkaXVzLCBsOiAwLCB0OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2w6IHsgcjogMCwgbDogMCwgdDogLXJhZGl1cyB9XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLmN1cnZlLFxuICAgICAgICAgICAgICAgICAgICBwb2ludDogeyByOiAtcmFkaXVzLCBsOiAwLCB0OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2w6IHsgcjogMCwgbDogMCwgdDogcmFkaXVzIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGxhbmVWaWV3LlRPUDpcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogQ29tbWFuZC5tb3ZlLFxuICAgICAgICAgICAgICAgICAgICBwb2ludDogeyByOiAwLCBsOiByYWRpdXMsIHQ6IDAgfVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogQ29tbWFuZC5jdXJ2ZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHsgcjogMCwgbDogLXJhZGl1cywgdDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sOiB7IHI6IHJhZGl1cywgbDogMCwgdDogMCB9XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLmN1cnZlLFxuICAgICAgICAgICAgICAgICAgICBwb2ludDogeyByOiAwLCBsOiByYWRpdXMsIHQ6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbDogeyByOiAtcmFkaXVzLCBsOiAwLCB0OiAwIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2xhdGVDb21tYW5kUG9pbnRzKGNvbW1hbmRzLCByaWdodCwgbGVmdCwgdG9wKTtcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzO1xuICAgIH07XG4gICAgSXNvbWV0cmljQ2lyY2xlLnByb3RvdHlwZS5nZXRDaXJjbGVQYXRoID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIGNvbW1hbmRzID0gdGhpcy5nZXRDb21tYW5kcyhhcmdzKTtcbiAgICAgICAgcmV0dXJuIGdldFNWR1BhdGgoY29tbWFuZHMsIHRoaXMuZGF0YS5jZW50ZXJYLCB0aGlzLmRhdGEuY2VudGVyWSwgdGhpcy5kYXRhLnNjYWxlLCB0cnVlKTtcbiAgICB9O1xuICAgIElzb21ldHJpY0NpcmNsZS5wcm90b3R5cGUudXBkYXRlU3ViQ2xhc3NBbmltYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgaXNOYXRpdmVTVkdQcm9wZXJ0eSA9IGlzU1ZHUHJvcGVydHkoYW5pbWF0aW9uLnByb3BlcnR5KTtcbiAgICAgICAgICAgIGlmICghaXNOYXRpdmVTVkdQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wc18xID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogX3RoaXMucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IF90aGlzLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogX3RoaXMudG9wLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IF90aGlzLnJhZGl1c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wc18xLCBhbmltYXRpb24ucHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eV8xID0gYW5pbWF0aW9uLnByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFuaW1hdGlvbi52YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBhbmltYXRpb24udmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RpZmllZEFyZ3MgPSBfX2Fzc2lnbih7fSwgcHJvcHNfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFyZ3NbcHJvcGVydHlfMV0gPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0Q2lyY2xlUGF0aChtb2RpZmllZEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCc7JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGlmaWVkQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wc18xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IF90aGlzLmdldENpcmNsZVBhdGgobW9kaWZpZWRBcmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbUFyZ3MgPSBfX2Fzc2lnbih7fSwgcHJvcHNfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9BcmdzID0gX19hc3NpZ24oe30sIHByb3BzXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLmZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0FyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLnRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBfdGhpcy5nZXRDaXJjbGVQYXRoKGZyb21BcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogX3RoaXMuZ2V0Q2lyY2xlUGF0aCh0b0FyZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUy5hbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoYW5pbWF0aW9uLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcygnZCcsIGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXMoYW5pbWF0aW9uLmVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljQ2lyY2xlLnByb3RvdHlwZSwgXCJyYWRpdXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYWRpdXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpdXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBJc29tZXRyaWNDaXJjbGUucHJvdG90eXBlLmFkZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuYWRkQW5pbWF0aW9uLmNhbGwodGhpcywgYW5pbWF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBJc29tZXRyaWNDaXJjbGU7XG59KElzb21ldHJpY1NoYXBlQWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY0NpcmNsZSB9O1xuIiwiZXhwb3J0IHsgSXNvbWV0cmljQ2lyY2xlIH0gZnJvbSAnLi9Jc29tZXRyaWNDaXJjbGUnO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCB7IENvbW1hbmQsIFNWR19FTEVNRU5UUywgU1ZHX05BTUVTUEFDRSB9IGZyb20gJ0Bjb25zdGFudHMnO1xuaW1wb3J0IHsgYWRkU1ZHUHJvcGVydGllcywgcGFyc2VEcmF3Q29tbWFuZHMsIGdldFNWR1BhdGggfSBmcm9tICdAdXRpbHMvc3ZnJztcbmltcG9ydCB7IElzb21ldHJpY1BhdGhBYnN0cmFjdCB9IGZyb20gJ0BjbGFzc2VzL2Fic3RyYWN0L0lzb21ldHJpY1BhdGhBYnN0cmFjdCc7XG52YXIgSXNvbWV0cmljUGF0aCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElzb21ldHJpY1BhdGgsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljUGF0aChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkgeyBwcm9wcyA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzLCBTVkdfRUxFTUVOVFMucGF0aCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZ2V0UGF0aEZyb21Db21tYW5kcyA9IGZ1bmN0aW9uIChjb21tYW5kcykgeyByZXR1cm4gZ2V0U1ZHUGF0aChwYXJzZURyYXdDb21tYW5kcyhjb21tYW5kcyksIF90aGlzLmRhdGEuY2VudGVyWCwgX3RoaXMuZGF0YS5jZW50ZXJZLCBfdGhpcy5kYXRhLnNjYWxlLCBfdGhpcy5fYXV0b2Nsb3NlKTsgfTtcbiAgICAgICAgX3RoaXMuY29tbWFuZHMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2F1dG9jbG9zZSA9ICdhdXRvY2xvc2UnIGluIHByb3BzXG4gICAgICAgICAgICA/IHByb3BzLmF1dG9jbG9zZVxuICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLnVwZGF0ZVN1YkNsYXNzQW5pbWF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5wcm9wZXJ0eSA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogQXJyYXkuaXNBcnJheShhbmltYXRpb24udmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYW5pbWF0aW9uLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRQYXRoRnJvbUNvbW1hbmRzKFwiXCIuY29uY2F0KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignOycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdGhpcy5nZXRQYXRoRnJvbUNvbW1hbmRzKFwiXCIuY29uY2F0KGFuaW1hdGlvbi52YWx1ZXMpKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IF90aGlzLmdldFBhdGhGcm9tQ29tbWFuZHMoXCJcIi5jb25jYXQoYW5pbWF0aW9uLmZyb20pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBfdGhpcy5nZXRQYXRoRnJvbUNvbW1hbmRzKFwiXCIuY29uY2F0KGFuaW1hdGlvbi50bykpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgU1ZHX0VMRU1FTlRTLmFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChhbmltYXRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcygnZCcsIGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhhbmltYXRpb24uZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSXNvbWV0cmljUGF0aC5wcm90b3R5cGUuZ2V0Q29tbWFuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRzO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY1BhdGgucHJvdG90eXBlLCBcImF1dG9jbG9zZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9jbG9zZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2F1dG9jbG9zZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVHcmFwaGljKHVuZGVmaW5lZCwgdGhpcy5hdXRvY2xvc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbW1hbmRzLnNwbGljZSgwKTtcbiAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIGQ6ICcnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLm1vdmVUbyA9IGZ1bmN0aW9uIChyaWdodCwgbGVmdCwgdG9wKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICBjb21tYW5kOiBDb21tYW5kLm1vdmUsXG4gICAgICAgICAgICBwb2ludDogeyByOiByaWdodCwgbDogbGVmdCwgdDogdG9wIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSXNvbWV0cmljUGF0aC5wcm90b3R5cGUubGluZVRvID0gZnVuY3Rpb24gKHJpZ2h0LCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQubGluZSxcbiAgICAgICAgICAgIHBvaW50OiB7IHI6IHJpZ2h0LCBsOiBsZWZ0LCB0OiB0b3AgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJc29tZXRyaWNQYXRoLnByb3RvdHlwZS5jdXJ2ZVRvID0gZnVuY3Rpb24gKGNvbnRyb2xSaWdodCwgY29udHJvbExlZnQsIGNvbnRyb2xUb3AsIHJpZ2h0LCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbW1hbmQ6IENvbW1hbmQuY3VydmUsXG4gICAgICAgICAgICBjb250cm9sOiB7IHI6IGNvbnRyb2xSaWdodCwgbDogY29udHJvbExlZnQsIHQ6IGNvbnRyb2xUb3AgfSxcbiAgICAgICAgICAgIHBvaW50OiB7IHI6IHJpZ2h0LCBsOiBsZWZ0LCB0OiB0b3AgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJc29tZXRyaWNQYXRoLnByb3RvdHlwZS5tdCA9IGZ1bmN0aW9uIChyaWdodCwgbGVmdCwgdG9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdmVUbyhyaWdodCwgbGVmdCwgdG9wKTtcbiAgICB9O1xuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gKHJpZ2h0LCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZVRvKHJpZ2h0LCBsZWZ0LCB0b3ApO1xuICAgIH07XG4gICAgSXNvbWV0cmljUGF0aC5wcm90b3R5cGUuY3QgPSBmdW5jdGlvbiAoY29udHJvbFJpZ2h0LCBjb250cm9sTGVmdCwgY29udHJvbFRvcCwgcmlnaHQsIGxlZnQsIHRvcCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJ2ZVRvKGNvbnRyb2xSaWdodCwgY29udHJvbExlZnQsIGNvbnRyb2xUb3AsIHJpZ2h0LCBsZWZ0LCB0b3ApO1xuICAgIH07XG4gICAgSXNvbWV0cmljUGF0aC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjb21tYW5kcykge1xuICAgICAgICB0aGlzLmNvbW1hbmRzID0gcGFyc2VEcmF3Q29tbWFuZHMoY29tbWFuZHMpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIElzb21ldHJpY1BhdGgucHJvdG90eXBlLmFkZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuYWRkQW5pbWF0aW9uLmNhbGwodGhpcywgYW5pbWF0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBJc29tZXRyaWNQYXRoO1xufShJc29tZXRyaWNQYXRoQWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY1BhdGggfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vSXNvbWV0cmljUGF0aCc7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IFNWR19OQU1FU1BBQ0UsIFNWR19FTEVNRU5UUywgT1JJR0lOIH0gZnJvbSAnQGNvbnN0YW50cyc7XG5pbXBvcnQgeyBJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QgfSBmcm9tICdAY2xhc3Nlcy9hYnN0cmFjdC9Jc29tZXRyaWNHcmFwaGljQWJzdHJhY3QnO1xuaW1wb3J0IHsgZ2V0UG9pbnRGcm9tSXNvbWV0cmljUG9pbnQgfSBmcm9tICdAdXRpbHMvbWF0aCc7XG5pbXBvcnQgeyBhZGRTVkdQcm9wZXJ0aWVzLCBlbGVtZW50SGFzU1ZHUGFyZW50LCBnZXRQYXR0ZXJuVHJhbnNmb3JtLCBpc1NWR1Byb3BlcnR5IH0gZnJvbSAnQHV0aWxzL3N2Zyc7XG52YXIgSXNvbWV0cmljVGV4dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElzb21ldHJpY1RleHQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNvbWV0cmljVGV4dChwcm9wcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwbGFuZVZpZXcgPSBwcm9wcy5wbGFuZVZpZXcsIF9iID0gcHJvcHMudGV4dCwgdGV4dCA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iLCBfYyA9IHByb3BzLmZvbnRGYW1pbHksIGZvbnRGYW1pbHkgPSBfYyA9PT0gdm9pZCAwID8gJ0FyaWFsJyA6IF9jLCBfZCA9IHByb3BzLmZvbnRTaXplLCBmb250U2l6ZSA9IF9kID09PSB2b2lkIDAgPyAxMiA6IF9kLCBfZSA9IHByb3BzLmZvbnRTdHlsZSwgZm9udFN0eWxlID0gX2UgPT09IHZvaWQgMCA/ICdub3JtYWwnIDogX2UsIF9mID0gcHJvcHMuZm9udFdlaWdodCwgZm9udFdlaWdodCA9IF9mID09PSB2b2lkIDAgPyAnbm9ybWFsJyA6IF9mLCBfZyA9IHByb3BzLm9yaWdpbiwgb3JpZ2luID0gX2cgPT09IHZvaWQgMCA/IFsnY2VudGVyJywgJ2NlbnRlciddIDogX2csIF9oID0gcHJvcHMucmlnaHQsIHJpZ2h0ID0gX2ggPT09IHZvaWQgMCA/IDAgOiBfaCwgX2ogPSBwcm9wcy5sZWZ0LCBsZWZ0ID0gX2ogPT09IHZvaWQgMCA/IDAgOiBfaiwgX2sgPSBwcm9wcy50b3AsIHRvcCA9IF9rID09PSB2b2lkIDAgPyAwIDogX2ssIF9sID0gcHJvcHMucm90YXRpb24sIHJvdGF0aW9uID0gX2wgPT09IHZvaWQgMCA/IDAgOiBfbCwgX20gPSBwcm9wcy5zZWxlY3RhYmxlLCBzZWxlY3RhYmxlID0gX20gPT09IHZvaWQgMCA/IHRydWUgOiBfbSwgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wicGxhbmVWaWV3XCIsIFwidGV4dFwiLCBcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRTdHlsZVwiLCBcImZvbnRXZWlnaHRcIiwgXCJvcmlnaW5cIiwgXCJyaWdodFwiLCBcImxlZnRcIiwgXCJ0b3BcIiwgXCJyb3RhdGlvblwiLCBcInNlbGVjdGFibGVcIl0pO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlc3QsIFNWR19FTEVNRU5UUy5ncm91cCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX29yaWdpbkhhc2ggPSAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW09SSUdJTi5DRU5URVJdID0gJ21pZGRsZScsXG4gICAgICAgICAgICBfYVtPUklHSU4uTEVGVF0gPSAnc3RhcnQnLFxuICAgICAgICAgICAgX2FbT1JJR0lOLlJJR0hUXSA9ICdlbmQnLFxuICAgICAgICAgICAgX2FbT1JJR0lOLlRPUF0gPSAnaGFuZ2luZycsXG4gICAgICAgICAgICBfYVtPUklHSU4uQk9UVE9NXSA9ICdiYXNlbGluZScsXG4gICAgICAgICAgICBfYSk7XG4gICAgICAgIF90aGlzLmNvbW1vbkFuaW1hdGlvbkF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAndHJhbnNmb3JtJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZVR5cGU6ICdYTUwnLFxuICAgICAgICAgICAgYWRkaXRpdmU6ICdzdW0nLFxuICAgICAgICAgICAgZmlsbDogJ2ZyZWV6ZSdcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZ2V0TWF0cml4VHJhbnNmb3JtID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtTWF0cml4ID0gZ2V0UGF0dGVyblRyYW5zZm9ybShfdGhpcy5nZXRQb3NpdGlvblRyYW5zZm9ybShwcm9wcyksIF90aGlzLnBsYW5lVmlldywgMSk7XG4gICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodHJhbnNmb3JtTWF0cml4LCBcIiByb3RhdGUoXCIpLmNvbmNhdChfdGhpcy5yb3RhdGlvbiwgXCIpXCIpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fdGV4dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgU1ZHX0VMRU1FTlRTLnRleHQpO1xuICAgICAgICBfdGhpcy5fdHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgU1ZHX0VMRU1FTlRTLnRzcGFuKTtcbiAgICAgICAgX3RoaXMuX3RleHRFbGVtZW50LmFwcGVuZENoaWxkKF90aGlzLl90c3Bhbik7XG4gICAgICAgIF90aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoX3RoaXMuX3RleHRFbGVtZW50KTtcbiAgICAgICAgX3RoaXMucGxhbmVWaWV3ID0gcGxhbmVWaWV3O1xuICAgICAgICBfdGhpcy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgICAgX3RoaXMuZm9udFNpemUgPSBmb250U2l6ZTtcbiAgICAgICAgX3RoaXMuZm9udFN0eWxlID0gZm9udFN0eWxlO1xuICAgICAgICBfdGhpcy5mb250V2VpZ2h0ID0gZm9udFdlaWdodDtcbiAgICAgICAgX3RoaXMuc2VsZWN0YWJsZSA9IHNlbGVjdGFibGU7XG4gICAgICAgIF90aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgX3RoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgX3RoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIF90aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgX3RoaXMucm90YXRpb24gPSByb3RhdGlvbjtcbiAgICAgICAgX3RoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSXNvbWV0cmljVGV4dC5wcm90b3R5cGUuZ2V0UG9zaXRpb25UcmFuc2Zvcm0gPSBmdW5jdGlvbiAocHJvcHMsIGZyb21DZW50ZXIpIHtcbiAgICAgICAgaWYgKGZyb21DZW50ZXIgPT09IHZvaWQgMCkgeyBmcm9tQ2VudGVyID0gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gZ2V0UG9pbnRGcm9tSXNvbWV0cmljUG9pbnQoZnJvbUNlbnRlclxuICAgICAgICAgICAgPyB0aGlzLmRhdGEuY2VudGVyWFxuICAgICAgICAgICAgOiAwLCBmcm9tQ2VudGVyXG4gICAgICAgICAgICA/IHRoaXMuZGF0YS5jZW50ZXJZXG4gICAgICAgICAgICA6IDAsIHtcbiAgICAgICAgICAgIHI6IHByb3BzLnJpZ2h0LFxuICAgICAgICAgICAgbDogcHJvcHMubGVmdCxcbiAgICAgICAgICAgIHQ6IHByb3BzLnRvcFxuICAgICAgICB9LCB0aGlzLmRhdGEuc2NhbGUpO1xuICAgIH07XG4gICAgSXNvbWV0cmljVGV4dC5wcm90b3R5cGUudXBkYXRlU3ViQ2xhc3NBbmltYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgdmFyIGlzTmF0aXZlU1ZHUHJvcGVydHkgPSBpc1NWR1Byb3BlcnR5KGFuaW1hdGlvbi5wcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAoIWlzTmF0aXZlU1ZHUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBhbmltYXRpb24ucHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eV8xID0gYW5pbWF0aW9uLnByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNSb3RhdGlvbl8xID0gcHJvcGVydHlfMSA9PT0gJ3JvdGF0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1vblByb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIF90aGlzLmNvbW1vbkFuaW1hdGlvbkF0dHJpYnV0ZXMpLCB7IHR5cGU6IGlzUm90YXRpb25fMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JvdGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0cmFuc2xhdGUnLCBiZWdpbjogJ2luZGVmaW5pdGUnIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFuaW1hdGlvbi52YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IF9fYXNzaWduKHsgdmFsdWVzOiBhbmltYXRpb24udmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JvdGF0aW9uXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGlmaWVkQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRBcmdzW3Byb3BlcnR5XzFdID0gK3ZhbHVlIC0gX3RoaXNbcHJvcGVydHlfMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IF90aGlzLmdldFBvc2l0aW9uVHJhbnNmb3JtKG1vZGlmaWVkQXJncywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChjb29yZHMueCwgXCIsXCIpLmNvbmNhdChjb29yZHMueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJzsnKSB9LCBjb21tb25Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSb3RhdGlvbl8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBfX2Fzc2lnbih7IHZhbHVlczogXCJcIi5jb25jYXQoYW5pbWF0aW9uLnZhbHVlcykgfSwgY29tbW9uUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGlmaWVkQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkQXJnc1twcm9wZXJ0eV8xXSA9ICthbmltYXRpb24udmFsdWVzIC0gX3RoaXNbcHJvcGVydHlfMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBfdGhpcy5nZXRQb3NpdGlvblRyYW5zZm9ybShtb2RpZmllZEFyZ3MsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IF9fYXNzaWduKHsgdmFsdWVzOiBcIlwiLmNvbmNhdChjb29yZHMueCwgXCIsXCIpLmNvbmNhdChjb29yZHMueSkgfSwgY29tbW9uUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JvdGF0aW9uXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gX19hc3NpZ24oeyBmcm9tOiBcIlwiLmNvbmNhdChhbmltYXRpb24uZnJvbSksIHRvOiBcIlwiLmNvbmNhdChhbmltYXRpb24udG8pIH0sIGNvbW1vblByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9tQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvQXJncyA9IF9fYXNzaWduKHt9LCBwcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLmZyb20gLSBfdGhpc1twcm9wZXJ0eV8xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0FyZ3NbcHJvcGVydHlfMV0gPSArYW5pbWF0aW9uLnRvIC0gX3RoaXNbcHJvcGVydHlfMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3Jkc0Zyb20gPSBfdGhpcy5nZXRQb3NpdGlvblRyYW5zZm9ybShmcm9tQXJncywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHNUbyA9IF90aGlzLmdldFBvc2l0aW9uVHJhbnNmb3JtKHRvQXJncywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBfX2Fzc2lnbih7IGZyb206IFwiXCIuY29uY2F0KGNvb3Jkc0Zyb20ueCwgXCIsXCIpLmNvbmNhdChjb29yZHNGcm9tLnkpLCB0bzogXCJcIi5jb25jYXQoY29vcmRzVG8ueCwgXCIsXCIpLmNvbmNhdChjb29yZHNUby55KSB9LCBjb21tb25Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb24uZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgU1ZHX0VMRU1FTlRTLmFuaW1hdGVUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEFuaW1hdGlvbkJhc2ljUHJvcGVydGllcygndHJhbnNmb3JtJywgYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyhhbmltYXRpb24uZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUm90YXRpb25fMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0RWxlbWVudC5hcHBlbmRDaGlsZChhbmltYXRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGFuaW1hdGlvbi5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5lbGVtZW50LmJlZ2luRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSXNvbWV0cmljVGV4dC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZWxlbWVudEhhc1NWR1BhcmVudCh0aGlzLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5nZXRNYXRyaXhUcmFuc2Zvcm0oe1xuICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnJpZ2h0LFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMudG9wXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5fdGV4dEVsZW1lbnQsIHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0gfSk7XG4gICAgICAgICAgICB0aGlzLl90c3Bhbi50ZXh0Q29udGVudCA9IHRoaXMuX3RleHQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhdHRlcm5UcmFuc2Zvcm0oeyB4OiAwLCB5OiAwIH0sIHRoaXMucGxhbmVWaWV3KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9ucygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSXNvbWV0cmljVGV4dC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGV4dCA9ICcnO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJ0ZXh0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RleHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljVGV4dC5wcm90b3R5cGUsIFwicGxhbmVWaWV3XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGxhbmVWaWV3O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcGxhbmVWaWV3ID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY1RleHQucHJvdG90eXBlLCBcImZvbnRGYW1pbHlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb250RmFtaWx5O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZm9udEZhbWlseSA9IHZhbHVlO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLl90c3Bhbiwge1xuICAgICAgICAgICAgICAgICdmb250LWZhbWlseSc6IHRoaXMuX2ZvbnRGYW1pbHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY1RleHQucHJvdG90eXBlLCBcImZvbnRTaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udFNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9mb250U2l6ZSA9IHZhbHVlO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLl90c3Bhbiwge1xuICAgICAgICAgICAgICAgICdmb250LXNpemUnOiBcIlwiLmNvbmNhdCh0aGlzLl9mb250U2l6ZSwgXCJweFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljVGV4dC5wcm90b3R5cGUsIFwiZm9udFN0eWxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udFN0eWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZm9udFN0eWxlID0gdmFsdWU7XG4gICAgICAgICAgICBhZGRTVkdQcm9wZXJ0aWVzKHRoaXMuX3RzcGFuLCB7XG4gICAgICAgICAgICAgICAgJ2ZvbnQtc3R5bGUnOiBcIlwiLmNvbmNhdCh0aGlzLl9mb250U3R5bGUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJmb250V2VpZ2h0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udFdlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZvbnRXZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5fdHNwYW4sIHtcbiAgICAgICAgICAgICAgICAnZm9udC13ZWlnaHQnOiBcIlwiLmNvbmNhdCh0aGlzLl9mb250V2VpZ2h0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXNvbWV0cmljVGV4dC5wcm90b3R5cGUsIFwic2VsZWN0YWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGFibGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RhYmxlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZFNWR1Byb3BlcnRpZXModGhpcy5fdGV4dEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXVzZXItc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICctbW96LXVzZXItc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICctbXMtdXNlci1zZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb2ludGVyLWV2ZW50cydcbiAgICAgICAgICAgICAgICAgICAgXS5tYXAoZnVuY3Rpb24gKGRlY2wpIHsgcmV0dXJuIFwiXCIuY29uY2F0KGRlY2wsIFwiOiBub25lXCIpOyB9KS5qb2luKCc7JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJvcmlnaW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcmlnaW47XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9vcmlnaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuX29yaWdpbiwgdGV4dEFuY2hvciA9IF9hWzBdLCBhbGlnbm1lbnRCYXNlbGluZSA9IF9hWzFdO1xuICAgICAgICAgICAgYWRkU1ZHUHJvcGVydGllcyh0aGlzLl90c3Bhbiwge1xuICAgICAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6IHRoaXMuX29yaWdpbkhhc2hbdGV4dEFuY2hvcl0sXG4gICAgICAgICAgICAgICAgJ2FsaWdubWVudC1iYXNlbGluZSc6IHRoaXMuX29yaWdpbkhhc2hbYWxpZ25tZW50QmFzZWxpbmVdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJyaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JpZ2h0ICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JpZ2h0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJsZWZ0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGVmdDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWZ0ICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xlZnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KElzb21ldHJpY1RleHQucHJvdG90eXBlLCBcInRvcFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RvcDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90b3AgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9wID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJc29tZXRyaWNUZXh0LnByb3RvdHlwZSwgXCJyb3RhdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW9uICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBJc29tZXRyaWNUZXh0O1xufShJc29tZXRyaWNHcmFwaGljQWJzdHJhY3QpKTtcbmV4cG9ydCB7IElzb21ldHJpY1RleHQgfTtcbiIsImV4cG9ydCB7IElzb21ldHJpY1RleHQgfSBmcm9tICcuL0lzb21ldHJpY1RleHQnO1xuIiwiZXhwb3J0IHsgTGluZUNhcCwgTGluZUpvaW4sIFBsYW5lVmlldywgQXhpcyB9IGZyb20gJ0Bjb25zdGFudHMnO1xuZXhwb3J0IHsgSXNvbWV0cmljQ2FudmFzIH0gZnJvbSAnQGNsYXNzZXMvcHVibGljL0lzb21ldHJpY0NhbnZhcyc7XG5leHBvcnQgeyBJc29tZXRyaWNHcm91cCB9IGZyb20gJ0BjbGFzc2VzL3B1YmxpYy9Jc29tZXRyaWNHcm91cCc7XG5leHBvcnQgeyBJc29tZXRyaWNSZWN0YW5nbGUgfSBmcm9tICdAY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljUmVjdGFuZ2xlJztcbmV4cG9ydCB7IElzb21ldHJpY0NpcmNsZSB9IGZyb20gJ0BjbGFzc2VzL3B1YmxpYy9Jc29tZXRyaWNDaXJjbGUnO1xuZXhwb3J0IHsgSXNvbWV0cmljUGF0aCB9IGZyb20gJ0BjbGFzc2VzL3B1YmxpYy9Jc29tZXRyaWNQYXRoJztcbmV4cG9ydCB7IElzb21ldHJpY1RleHQgfSBmcm9tICdAY2xhc3Nlcy9wdWJsaWMvSXNvbWV0cmljVGV4dCc7XG4iLCJleHBvcnQgZGVmYXVsdCAoIElzb21ldHJpY01vZHVsZSwgY29udGFpbmVyICkgPT4ge1xuXG4gICAgY29uc3QgeyBJc29tZXRyaWNDYW52YXMsIElzb21ldHJpY1JlY3RhbmdsZSwgUGxhbmVWaWV3IH0gPSBJc29tZXRyaWNNb2R1bGU7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDb2xvcigpIHtcbiAgICAgICAgdGhpcy5maWxsQ29sb3IgPSB0aGlzLmZpbGxDb2xvciA9PT0gJ3doaXRlJyA/ICcjRUVFJyA6ICd3aGl0ZSc7XG4gICAgfVxuXG4gICAgY29uc3QgY3ViZSA9IG5ldyBJc29tZXRyaWNDYW52YXMoe1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNDQ0MnLFxuICAgICAgICBzY2FsZTogMTIwLFxuICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICBoZWlnaHQ6IDMyMFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29tbW9uUHJvcHMgPSB7aGVpZ2h0OiAxLCB3aWR0aDogMX07XG4gICAgY29uc3QgdG9wUGllY2UgPSBuZXcgSXNvbWV0cmljUmVjdGFuZ2xlKHsuLi5jb21tb25Qcm9wcywgcGxhbmVWaWV3OiBQbGFuZVZpZXcuVE9QfSk7XG4gICAgY29uc3QgcmlnaHRQaWVjZSA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoey4uLmNvbW1vblByb3BzLCBwbGFuZVZpZXc6IFBsYW5lVmlldy5GUk9OVH0pO1xuICAgIGNvbnN0IGxlZnRQaWVjZSA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoey4uLmNvbW1vblByb3BzLCBwbGFuZVZpZXc6IFBsYW5lVmlldy5TSURFfSk7XG5cbiAgICB0b3BQaWVjZS50b3AgPSAxO1xuICAgIHRvcFBpZWNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlQ29sb3IsIHRydWUpO1xuXG4gICAgcmlnaHRQaWVjZS5yaWdodCA9IDE7XG4gICAgcmlnaHRQaWVjZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZUNvbG9yLCB0cnVlKTtcblxuICAgIGxlZnRQaWVjZS5sZWZ0ID0gMTtcbiAgICBsZWZ0UGllY2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVDb2xvciwgdHJ1ZSk7XG5cbiAgICBjdWJlXG4gICAgICAgIC5hZGRDaGlsZCh0b3BQaWVjZSlcbiAgICAgICAgLmFkZENoaWxkKHJpZ2h0UGllY2UpXG4gICAgICAgIC5hZGRDaGlsZChsZWZ0UGllY2UpO1xuXG59OyIsImV4cG9ydCBkZWZhdWx0ICggSXNvbWV0cmljTW9kdWxlLCBjb250YWluZXIgKSA9PiB7XG5cbiAgICBjb25zdCB7IElzb21ldHJpY0NhbnZhcywgSXNvbWV0cmljUGF0aCwgSXNvbWV0cmljUmVjdGFuZ2xlLCBQbGFuZVZpZXcgfSA9IElzb21ldHJpY01vZHVsZTtcblxuICAgIGNvbnN0IGN1YmUgPSBuZXcgSXNvbWV0cmljQ2FudmFzKHtcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjQ0NDJyxcbiAgICAgICAgc2NhbGU6IDEyMCxcbiAgICAgICAgd2lkdGg6IDUwMCxcbiAgICAgICAgaGVpZ2h0OiAzMjBcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbW1vblByb3BzID0ge2hlaWdodDogMSwgd2lkdGg6IDF9O1xuXG4gICAgY29uc3QgZHVyYXRpb24gPSAzO1xuXG4gICAgY29uc3QgcmVjdGFuZ2xlQW5pbWF0aW9uUHJvcHMgPSB7XG4gICAgICAgIHByb3BlcnR5OiAnaGVpZ2h0JyxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIHZhbHVlczogWzEsIDAuNSwgMV1cbiAgICB9O1xuXG4gICAgY29uc3QgY29sb3JBbmltYXRpb25Qcm9wcyA9IHtcbiAgICAgICAgcHJvcGVydHk6ICdmaWxsQ29sb3InLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgdmFsdWVzOiBbJyNGRkYnLCAnI0RERCcsICcjRkZGJ11cbiAgICB9O1xuXG4gICAgY29uc3QgdG9wUGllY2UgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHJpZ2h0UGllY2UgPSBuZXcgSXNvbWV0cmljUmVjdGFuZ2xlKHsuLi5jb21tb25Qcm9wcywgcGxhbmVWaWV3OiBQbGFuZVZpZXcuRlJPTlQsIHJpZ2h0OiAxfSk7XG4gICAgY29uc3QgbGVmdFBpZWNlID0gbmV3IElzb21ldHJpY1JlY3RhbmdsZSh7Li4uY29tbW9uUHJvcHMsIHBsYW5lVmlldzogUGxhbmVWaWV3LlNJREUsIGxlZnQ6IDF9KTtcblxuICAgIHRvcFBpZWNlXG4gICAgICAgIC5tb3ZlVG8oMCwgMCwgMSlcbiAgICAgICAgLmxpbmVUbygxLCAwLCAxKVxuICAgICAgICAubGluZVRvKDEsIDEsIDEpXG4gICAgICAgIC5saW5lVG8oMCwgMSwgMSk7XG5cbiAgICB0b3BQaWVjZVxuICAgICAgICAuYWRkQW5pbWF0aW9uKHtcbiAgICAgICAgICAgIHByb3BlcnR5OiAncGF0aCcsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHZhbHVlczogW1xuICAgICAgICAgICAgICAgICdNMCAwIDEgTDEgMCAxIEwxIDEgMSBMMCAxIDEnLFxuICAgICAgICAgICAgICAgICdNMCAwIDAuNSBMMSAwIDAuNSBMMSAxIDAuNSBMMCAxIDAuNScsXG4gICAgICAgICAgICAgICAgJ00wIDAgMSBMMSAwIDEgTDEgMSAxIEwwIDEgMSdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgICAgLmFkZEFuaW1hdGlvbihjb2xvckFuaW1hdGlvblByb3BzKTtcblxuICAgIHJpZ2h0UGllY2VcbiAgICAgICAgLmFkZEFuaW1hdGlvbihyZWN0YW5nbGVBbmltYXRpb25Qcm9wcylcbiAgICAgICAgLmFkZEFuaW1hdGlvbihjb2xvckFuaW1hdGlvblByb3BzKTtcblxuICAgIGxlZnRQaWVjZVxuICAgICAgICAuYWRkQW5pbWF0aW9uKHJlY3RhbmdsZUFuaW1hdGlvblByb3BzKVxuICAgICAgICAuYWRkQW5pbWF0aW9uKGNvbG9yQW5pbWF0aW9uUHJvcHMpO1xuXG4gICAgY3ViZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5hbmltYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZUFuaW1hdGlvbnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lQW5pbWF0aW9ucygpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjdWJlLmFkZENoaWxkcmVuKHRvcFBpZWNlLCByaWdodFBpZWNlLCBsZWZ0UGllY2UpO1xuXG59OyIsImltcG9ydCAnLi4vaW1hZ2VzL2Jsb2NrX3NpZGUucG5nJztcbmltcG9ydCAnLi4vaW1hZ2VzL2Jsb2NrX3RvcC5wbmcnO1xuXG5leHBvcnQgZGVmYXVsdCAoIElzb21ldHJpY01vZHVsZSwgY29udGFpbmVyICkgPT4ge1xuXG4gICAgY29uc3QgeyBJc29tZXRyaWNDYW52YXMsIElzb21ldHJpY1JlY3RhbmdsZSwgSXNvbWV0cmljVGV4dCwgUGxhbmVWaWV3IH0gPSBJc29tZXRyaWNNb2R1bGU7XG5cbiAgICBjb25zdCBjdWJlID0gbmV3IElzb21ldHJpY0NhbnZhcyh7XG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0NDQycsXG4gICAgICAgIHNjYWxlOiAxMjAsXG4gICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgIGhlaWdodDogMzIwXG4gICAgfSk7XG5cbiAgICBjb25zdCByZWN0YW5nbGVDb21tb25Qcm9wcyA9IHsgaGVpZ2h0OiAxLCB3aWR0aDogMSB9O1xuXG4gICAgY29uc3QgdGV4dENvbW1vblByb3BzID0ge1xuICAgICAgICBmb250U2l6ZTogMTUsXG4gICAgICAgIGZpbGxDb2xvcjogJyM2NjYnLFxuICAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgcmlnaHQ6IDAuNSxcbiAgICAgICAgbGVmdDogMC41LFxuICAgICAgICB0b3A6IDAuNSxcbiAgICAgICAgc2VsZWN0YWJsZTogZmFsc2VcbiAgICB9O1xuXG4gICAgY29uc3QgcGllY2VzID0gW1BsYW5lVmlldy5UT1AsIFBsYW5lVmlldy5GUk9OVCwgUGxhbmVWaWV3LlNJREVdLm1hcCgodmlldywgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZhY2U6IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoey4uLnJlY3RhbmdsZUNvbW1vblByb3BzLCBwbGFuZVZpZXc6IHZpZXd9KSxcbiAgICAgICAgICAgIGxhYmVsOiBuZXcgSXNvbWV0cmljVGV4dCh7Li4udGV4dENvbW1vblByb3BzLCBwbGFuZVZpZXc6IHZpZXd9KSxcbiAgICAgICAgICAgIHByb3BlcnR5OiBbJ3RvcCcsICdyaWdodCcsICdsZWZ0J11baW5kZXhdXG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICBwaWVjZXMuZm9yRWFjaCgocGllY2UpID0+IHtcblxuICAgICAgICBjb25zdCB7IGZhY2UsIGxhYmVsLCBwcm9wZXJ0eSB9ID0gcGllY2U7XG5cbiAgICAgICAgZmFjZVtwcm9wZXJ0eV0gPSAxO1xuICAgICAgICBsYWJlbFtwcm9wZXJ0eV0gPSAxO1xuICAgICAgICBsYWJlbC50ZXh0ID0gYCR7cHJvcGVydHkudG9VcHBlckNhc2UoKX0gMMK6YDtcblxuICAgICAgICBmYWNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBsYWJlbC5yb3RhdGlvbiArIDQ1O1xuICAgICAgICAgICAgbGFiZWwucm90YXRpb24gPSByb3RhdGlvbiA9PT0gMzYwID8gMCA6IHJvdGF0aW9uO1xuICAgICAgICAgICAgbGFiZWwudGV4dCA9IGxhYmVsLnRleHQucmVwbGFjZSgvXFxkKy8sIGxhYmVsLnJvdGF0aW9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3ViZS5hZGRDaGlsZChwaWVjZS5mYWNlKTtcbiAgICAgICAgY3ViZS5hZGRDaGlsZChwaWVjZS5sYWJlbCk7XG4gICAgfSk7XG5cbn07IiwiZXhwb3J0IGRlZmF1bHQgKCBJc29tZXRyaWNNb2R1bGUsIGNvbnRhaW5lciApID0+IHtcblxuICAgIGNvbnN0IHsgSXNvbWV0cmljQ2FudmFzLCBJc29tZXRyaWNHcm91cCwgSXNvbWV0cmljUGF0aCB9ID0gSXNvbWV0cmljTW9kdWxlO1xuXG4gICAgY29uc3QgaXNvbWV0cmljID0gbmV3IElzb21ldHJpY0NhbnZhcyh7XG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0NDQycsXG4gICAgICAgIHNjYWxlOiAxMjAsXG4gICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgIGhlaWdodDogMzIwXG4gICAgfSk7XG5cbiAgICBjb25zdCBib3R0b21UID0gbmV3IElzb21ldHJpY1BhdGgoKTtcbiAgICBjb25zdCBib3R0b21SID0gbmV3IElzb21ldHJpY1BhdGgoKTtcbiAgICBjb25zdCBib3R0b21MID0gbmV3IElzb21ldHJpY1BhdGgoKTtcblxuICAgIGNvbnN0IHRvcFQgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcFIgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcEwgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuXG4gICAgYm90dG9tVC5tdCgwLCAwLCAuNSkubHQoMSwgMCwgLjUpLmx0KDEsIDEsIC41KS5sdCgwLCAxLCAuNSk7XG4gICAgYm90dG9tUi5tdCgxLCAwLCAuNSkubHQoMSwgMCwgMCkubHQoMSwgMSwgMCkubHQoMSwgMSwgLjUpO1xuICAgIGJvdHRvbUwubXQoMSwgMSwgLjUpLmx0KDEsIDEsIDApLmx0KDAsIDEsIDApLmx0KDAsIDEsIC41KTtcblxuICAgIHRvcFQubXQoLjI1LCAuMjUsIDEpLmx0KC43NSwgLjI1LCAxKS5sdCguNzUsIC43NSwgLjc1KS5sdCguMjUsIC43NSwgLjc1KTtcbiAgICB0b3BSLm10KC43NSwgLjI1LCAxKS5sdCguNzUsIC43NSwgLjc1KS5sdCguNzUsIC43NSwgLjI1KS5sdCguNzUsIC4yNSwgLjI1KTtcbiAgICB0b3BMLm10KC43NSwgLjc1LCAuNzUpLmx0KC4yNSwgLjc1LCAuNzUpLmx0KC4yNSwgLjc1LCAuMjUpLmx0KC43NSwgLjc1LCAuMjUpO1xuXG4gICAgY29uc3QgYm90dG9tUGllY2UgPSBuZXcgSXNvbWV0cmljR3JvdXAoKTtcbiAgICBjb25zdCB0b3BQaWVjZSA9IG5ldyBJc29tZXRyaWNHcm91cCgpO1xuICAgIHRvcFBpZWNlLnRvcCA9IC4yNTtcblxuICAgIGJvdHRvbVBpZWNlLmFkZENoaWxkcmVuKGJvdHRvbVQsIGJvdHRvbVIsIGJvdHRvbUwpO1xuICAgIHRvcFBpZWNlLmFkZENoaWxkcmVuKHRvcFQsIHRvcFIsIHRvcEwpO1xuXG4gICAgbGV0IGZsaXAgPSB0cnVlO1xuXG4gICAgdG9wUGllY2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucmlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmlnaHQgPSBmbGlwID8gMC4yNSA6IC0wLjI1O1xuICAgICAgICBmbGlwID0gIWZsaXA7XG4gICAgfSk7XG5cbiAgICBpc29tZXRyaWMuYWRkQ2hpbGRyZW4oYm90dG9tUGllY2UsIHRvcFBpZWNlKTtcblxufTsiLCJleHBvcnQgZGVmYXVsdCAoIElzb21ldHJpY01vZHVsZSwgY29udGFpbmVyICkgPT4ge1xuXG4gICAgY29uc3QgeyBJc29tZXRyaWNDYW52YXMsIElzb21ldHJpY1BhdGggfSA9IElzb21ldHJpY01vZHVsZTtcblxuICAgIGNvbnN0IGlzb21ldHJpYyA9IG5ldyBJc29tZXRyaWNDYW52YXMoe1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNDQ0MnLFxuICAgICAgICBzY2FsZTogMTIwLFxuICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICBoZWlnaHQ6IDMyMFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmlnaHQgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcDEgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcDIgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcDMgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IHRvcDQgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IGxlZnQxID0gbmV3IElzb21ldHJpY1BhdGgoKTtcbiAgICBjb25zdCBsZWZ0MiA9IG5ldyBJc29tZXRyaWNQYXRoKCk7XG5cbiAgICAvLyBNIHIgbCB0IChNb3ZlIHRvIHJpZ2h0IGxlZnQgdG9wKVxuICAgIC8vIEwgciBsIHQgKExpbmUgdG8gcmlnaHQgbGVmdCB0b3ApXG4gICAgLy8gQyBjciBjbCBjdCByIGwgdCAoQ3VydmUgdG8gY29udHJvbC1yaWdodCBjb250cm9sLWxlZnQgY29udHJvbC10b3AgcmlnaHQgbGVmdCB0b3ApXG4gICAgcmlnaHQuZHJhdygnTTEgMCAwIEwxIDEgMCBMMSAxIDAuMjUgTDEgMC41IDAuMjUgTDEgMC41IDEgTDEgMCAxJyk7XG4gICAgdG9wMS5kcmF3KCdNMC4yNSAwLjUgMSBDMC41IDAuNSAwLjc1IDAuNzUgMC41IDEgTDAuNzUgMCAxIEMwLjUgMCAwLjc1IDAuMjUgMCAxIEwwLjI1IDAuNSAxJyk7XG4gICAgdG9wMi5kcmF3KCdNMSAwIDEgTDAuNzUgMCAxIEwwLjc1IDAuNSAxIEwxIDAuNSAxIEwxIDAgMSBNMCAwIDEgTDAuMjUgMCAxIEwwLjI1IDAuNSAxIEwwIDAuNSAxIEwwIDAgMScpO1xuICAgIHRvcDMuZHJhdygnTTAgMC41IDAuNSBMMC41IDAuNSAwLjUgTDAuNSAxIDAuNSBMMCAxIDAuNScpO1xuICAgIHRvcDQuZHJhdygnTTAuNSAwLjUgMC41IEwxIDAuNSAwLjI1IEwxIDEgMC4yNSBMMC41IDEgMC41Jyk7XG4gICAgbGVmdDEuZHJhdygnTTAgMC41IDEgTDAgMC41IDAuNSBMMC41IDAuNSAwLjUgTDEgMC41IDAuMjUgTDEgMC41IDEgTDAuNzUgMC41IDEgQzAuNSAwLjUgMC43NSAwLjI1IDAuNSAxIEwwIDAuNSAxJyk7XG4gICAgbGVmdDIuZHJhdygnTTAgMSAwLjUgTDAuNSAxIDAuNSBMMSAxIDAuMjUgTDEgMSAwIEwwIDEgMCcpO1xuXG4gICAgaXNvbWV0cmljLmFkZENoaWxkcmVuKHJpZ2h0LCB0b3AxLCB0b3AyLCB0b3AzLCB0b3A0LCBsZWZ0MSwgbGVmdDIpO1xuXG59OyIsImV4cG9ydCBkZWZhdWx0ICggSXNvbWV0cmljTW9kdWxlLCBjb250YWluZXIgKSA9PiB7XG5cbiAgICBjb25zdCB7IElzb21ldHJpY0NhbnZhcywgSXNvbWV0cmljUGF0aCB9ID0gSXNvbWV0cmljTW9kdWxlO1xuXG4gICAgY29uc3QgY3ViZSA9IG5ldyBJc29tZXRyaWNDYW52YXMoe1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNDQ0MnLFxuICAgICAgICBzY2FsZTogMTIwLFxuICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICBoZWlnaHQ6IDMyMFxuICAgIH0pO1xuXG4gICAgY29uc3QgdW5kZXIgPSBuZXcgSXNvbWV0cmljUGF0aCh7IGZpbGxDb2xvcjogJyNFRUUnIH0pO1xuICAgIGNvbnN0IHRvcCA9IG5ldyBJc29tZXRyaWNQYXRoKCk7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuICAgIGNvbnN0IGxlZnQgPSBuZXcgSXNvbWV0cmljUGF0aCgpO1xuXG4gICAgdW5kZXJcbiAgICAgICAgLm10KDAsIDAsIDEpXG4gICAgICAgIC5tdCgwLjI1LCAwLCAxKS5jdCgwLjUsIDAsIDAuNzUsIDAuNzUsIDAsIDEpLmx0KDEsIDAsIDEpXG4gICAgICAgIC5sdCgxLCAwLCAwLjc1KS5jdCgwLjc1LCAwLCAwLjUsIDEsIDAsIDAuMjUpLmx0KDEsIDAsIDApXG4gICAgICAgIC5sdCgxLCAwLjI1LCAwKS5jdCgwLjc1LCAwLjUsIDAsIDEsIDAuNzUsIDApLmx0KDEsIDEsIDApXG4gICAgICAgIC5sdCgwLjc1LCAxLCAwKS5jdCgwLjUsIDAuNzUsIDAsIDAuMjUsIDEsIDApLmx0KDAsIDEsIDApXG4gICAgICAgIC5sdCgwLCAxLCAwLjI1KS5jdCgwLCAwLjc1LCAwLjUsIDAsIDEsIDAuNzUpLmx0KDAsIDEsIDEpXG4gICAgICAgIC5sdCgwLCAwLjc1LCAxKS5jdCgwLCAwLjUsIDAuNzUsIDAsIDAuMjUsIDEpLmx0KDAsIDAsIDEpO1xuXG4gICAgdG9wXG4gICAgICAgIC5tdCgwLCAwLCAxKVxuICAgICAgICAubHQoMC4yNSwgMCwgMSkuY3QoMC41LCAwLjI1LCAxLCAwLjc1LCAwLCAxKS5sdCgxLCAwLCAxKVxuICAgICAgICAubHQoMSwgMC4yNSwgMSkuY3QoMC43NSwgMC41LCAxLCAxLCAwLjc1LCAxKS5sdCgxLCAxLCAxKVxuICAgICAgICAubHQoMC43NSwgMSwgMSkuY3QoMC41LCAwLjc1LCAxLCAwLjI1LCAxLCAxKS5sdCgwLCAxLCAxKVxuICAgICAgICAubHQoMCwgMC43NSwgMSkuY3QoMC4yNSwgMC41LCAxLCAwLCAwLjI1LCAxKS5sdCgwLCAwLCAxKTtcblxuICAgIHJpZ2h0XG4gICAgICAgIC5tdCgxLCAwLCAxKVxuICAgICAgICAubHQoMSwgMCwgMC43NSkuY3QoMSwgMC4yNSwgMC41LCAxLCAwLCAwLjI1KS5sdCgxLCAwLCAwKVxuICAgICAgICAubHQoMSwgMC4yNSwgMCkuY3QoMSwgMC41LCAwLjI1LCAxLCAwLjc1LCAwKS5sdCgxLCAxLCAwKVxuICAgICAgICAubHQoMSwgMSwgMC4yNSkuY3QoMSwgMC43NSwgMC41LCAxLCAxLCAwLjc1KS5sdCgxLCAxLCAxKVxuICAgICAgICAubHQoMSwgMC43NSwgMSkuY3QoMSwgMC41LCAwLjc1LCAxLCAwLjI1LCAxKS5sdCgxLCAwLCAxKTtcblxuICAgIGxlZnRcbiAgICAgICAgLm10KDEsIDEsIDEpXG4gICAgICAgIC5sdCgxLCAxLCAwLjc1KS5jdCgwLjc1LCAxLCAwLjUsIDEsIDEsIDAuMjUpLmx0KDEsIDEsIDApXG4gICAgICAgIC5sdCgwLjc1LCAxLCAwKS5jdCgwLjUsIDEsIDAuMjUsIDAuMjUsIDEsIDApLmx0KDAsIDEsIDApXG4gICAgICAgIC5sdCgwLCAxLCAwLjI1KS5jdCgwLjI1LCAxLCAwLjUsIDAsIDEsIDAuNzUpLmx0KDAsIDEsIDEpXG4gICAgICAgIC5sdCgwLjI1LCAxLCAxKS5jdCgwLjUsIDEsIDAuNzUsIDAuNzUsIDEsIDEpLmx0KDEsIDEsIDEpO1xuXG4gICAgY3ViZS5hZGRDaGlsZHJlbih1bmRlciwgdG9wLCByaWdodCwgbGVmdCk7XG5cbn07IiwiZXhwb3J0IGRlZmF1bHQgKCBJc29tZXRyaWNNb2R1bGUsIGNvbnRhaW5lciApID0+IHtcblxuICAgIGNvbnN0IHsgSXNvbWV0cmljQ2FudmFzLCBJc29tZXRyaWNHcm91cCwgSXNvbWV0cmljUmVjdGFuZ2xlLCBQbGFuZVZpZXcgfSA9IElzb21ldHJpY01vZHVsZTtcblxuICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBJc29tZXRyaWNDYW52YXMoe1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNDQ0MnLFxuICAgICAgICBzY2FsZTogMjAsXG4gICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgIGhlaWdodDogMzIwXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZXNldFBsYW5lcygpIHtcbiAgICAgICAgY3ViZS5yaWdodCA9IGN1YmUubGVmdCA9IGN1YmUudG9wID0gMDtcbiAgICAgICAgcGxhbmVUb3AuZmlsbE9wYWNpdHkgPSBwbGFuZVJpZ2h0LmZpbGxPcGFjaXR5ID0gcGxhbmVMZWZ0LmZpbGxPcGFjaXR5ID0gMC4yNTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VQbGFuZSgpIHtcbiAgICAgICAgcmVzZXRQbGFuZXMoKTtcbiAgICAgICAgdGhpcy5maWxsT3BhY2l0eSA9IDE7XG4gICAgICAgIGN1YmUuZHJhZyA9IHRoaXMucGxhbmVWaWV3O1xuICAgIH1cblxuICAgIGNvbnN0IHBsYW5lUHJvcHMgPSB7IGhlaWdodDogNiwgd2lkdGg6IDYsIGZpbGxPcGFjaXR5OiAwLjI1IH07XG4gICAgY29uc3QgcGxhbmVUb3AgPSBuZXcgSXNvbWV0cmljUmVjdGFuZ2xlKHsgLi4ucGxhbmVQcm9wcywgcGxhbmVWaWV3OiBQbGFuZVZpZXcuVE9QLCBmaWxsT3BhY2l0eTogMSB9KTtcbiAgICBjb25zdCBwbGFuZVJpZ2h0ID0gbmV3IElzb21ldHJpY1JlY3RhbmdsZSh7IC4uLnBsYW5lUHJvcHMsIHBsYW5lVmlldzogUGxhbmVWaWV3LkZST05UIH0pO1xuICAgIGNvbnN0IHBsYW5lTGVmdCA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoeyAuLi5wbGFuZVByb3BzLCBwbGFuZVZpZXc6IFBsYW5lVmlldy5TSURFIH0pO1xuXG4gICAgY29uc3QgY3ViZVByb3BzID0geyBoZWlnaHQ6IDEsIHdpZHRoOiAxIH07XG4gICAgY29uc3QgY3ViZVRvcCA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoeyAuLi5jdWJlUHJvcHMsIHBsYW5lVmlldzogUGxhbmVWaWV3LlRPUCwgdG9wOiAxIH0pO1xuICAgIGNvbnN0IGN1YmVSaWdodCA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoeyAuLi5jdWJlUHJvcHMsIHBsYW5lVmlldzogUGxhbmVWaWV3LkZST05ULCByaWdodDogMSB9KTtcbiAgICBjb25zdCBjdWJlTGVmdCA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoeyAuLi5jdWJlUHJvcHMsIHBsYW5lVmlldzogUGxhbmVWaWV3LlNJREUsIGxlZnQ6IDEgfSk7XG5cbiAgICBjb25zdCBjdWJlID0gbmV3IElzb21ldHJpY0dyb3VwKCk7XG5cbiAgICBjb25zdCBib3VuZHMgPSBbMCwgNV07XG4gICAgY3ViZS5kcmFnID0gJ1RPUCc7XG4gICAgY3ViZS5ib3VuZHMgPSB7IHRvcDogYm91bmRzLCByaWdodDogYm91bmRzLCBsZWZ0OiBib3VuZHMgfTtcblxuICAgIHBsYW5lVG9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlUGxhbmUsIHRydWUpO1xuICAgIHBsYW5lUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VQbGFuZSwgdHJ1ZSk7XG4gICAgcGxhbmVMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlUGxhbmUsIHRydWUpO1xuXG4gICAgY3ViZS5hZGRDaGlsZHJlbihjdWJlVG9wLCBjdWJlUmlnaHQsIGN1YmVMZWZ0KTtcbiAgICBjYW52YXMuYWRkQ2hpbGRyZW4ocGxhbmVUb3AsIHBsYW5lUmlnaHQsIHBsYW5lTGVmdCwgY3ViZSk7XG5cbn07IiwiaW1wb3J0ICcuLi9pbWFnZXMvYmxvY2tfc2lkZS5wbmcnO1xuaW1wb3J0ICcuLi9pbWFnZXMvYmxvY2tfdG9wLnBuZyc7XG5cbmV4cG9ydCBkZWZhdWx0ICggSXNvbWV0cmljTW9kdWxlLCBjb250YWluZXIgKSA9PiB7XG5cbiAgICBjb25zdCB7IElzb21ldHJpY0NhbnZhcywgSXNvbWV0cmljUGF0aCwgSXNvbWV0cmljUmVjdGFuZ2xlLCBQbGFuZVZpZXcsIEF4aXMgfSA9IElzb21ldHJpY01vZHVsZTtcblxuICAgIGNvbnN0IGlzb21ldHJpYyA9IG5ldyBJc29tZXRyaWNDYW52YXMoe1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM4QUFBM0YnLFxuICAgICAgICBzY2FsZTogMTIwLFxuICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICBoZWlnaHQ6IDMyMFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29tbW9uVGV4dHVyZVByb3BzID0ge1xuICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBwaXhlbGF0ZWQ6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3QgdGV4dHVyZVNpZGVzID0ge1xuICAgICAgICB1cmw6ICdpbWFnZXMvYmxvY2tfc2lkZS5wbmcnLFxuICAgICAgICAuLi5jb21tb25UZXh0dXJlUHJvcHNcbiAgICB9O1xuXG4gICAgY29uc3QgdGV4dHVyZVRvcCA9IHtcbiAgICAgICAgdXJsOiAnaW1hZ2VzL2Jsb2NrX3RvcC5wbmcnLFxuICAgICAgICBwbGFuZVZpZXc6IFBsYW5lVmlldy5UT1AsXG4gICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgICBheGlzOiBBeGlzLkxFRlQsXG4gICAgICAgICAgICB2YWx1ZTogMjYuNTY1MFxuICAgICAgICB9LFxuICAgICAgICAuLi5jb21tb25UZXh0dXJlUHJvcHNcbiAgICB9O1xuXG4gICAgY29uc3Qgc2lkZSA9IG5ldyBJc29tZXRyaWNQYXRoKHtcbiAgICAgICAgdGV4dHVyZToge1xuICAgICAgICAgICAgcGxhbmVWaWV3OiBQbGFuZVZpZXcuU0lERSxcbiAgICAgICAgICAgIC4uLnRleHR1cmVTaWRlc1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBmcm9udCA9IG5ldyBJc29tZXRyaWNSZWN0YW5nbGUoe1xuICAgICAgICBwbGFuZVZpZXc6IFBsYW5lVmlldy5GUk9OVCxcbiAgICAgICAgaGVpZ2h0OiAwLjUsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICB0ZXh0dXJlOiB0ZXh0dXJlU2lkZXNcbiAgICB9KTtcblxuICAgIGNvbnN0IGNob3AgPSBuZXcgSXNvbWV0cmljUGF0aCh7XG4gICAgICAgIHRleHR1cmU6IHRleHR1cmVUb3BcbiAgICB9KTtcblxuICAgIHNpZGUuZHJhdygnTTEgMSAwIEwxIDEgMC41IEwwIDEgMSBMMCAxIDAnKTtcbiAgICBjaG9wLmRyYXcoJ00xIDEgMC41IEwwIDEgMSBMMCAwIDEgTDEgMCAwLjUnKTtcblxuICAgIHNpZGUubGVmdCA9IDE7XG4gICAgZnJvbnQucmlnaHQgPSAxO1xuXG4gICAgaXNvbWV0cmljLmFkZENoaWxkcmVuKHNpZGUsIGZyb250LCBjaG9wKTtcblxufTsiLCJpbXBvcnQgJ2dvb2dsZS1jb2RlLXByZXR0aWZ5L2Jpbi9ydW5fcHJldHRpZnkubWluJztcbmltcG9ydCAnLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jb2RlLXByZXR0aWZ5L2Jpbi9wcmV0dGlmeS5taW4uY3NzJztcbmltcG9ydCAnLi90b21vcnJvdy5taW4uY3NzJztcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgKiBhcyBJc29tZXRyaWNNb2R1bGUgZnJvbSAnLi4vc3JjJztcbmltcG9ydCBkZW1vMSBmcm9tICcuL2RlbW8xJztcbmltcG9ydCBkZW1vMiBmcm9tICcuL2RlbW8yJztcbmltcG9ydCBkZW1vMyBmcm9tICcuL2RlbW8zJztcbmltcG9ydCBkZW1vNCBmcm9tICcuL2RlbW80JztcbmltcG9ydCBkZW1vNSBmcm9tICcuL2RlbW81JztcbmltcG9ydCBkZW1vNiBmcm9tICcuL2RlbW82JztcbmltcG9ydCBkZW1vNyBmcm9tICcuL2RlbW83JztcbmltcG9ydCBkZW1vOCBmcm9tICcuL2RlbW84JztcblxuY29uc3QgZnVuY3Rpb1RvU3RyaW5nID0gKGZuKSA9PiB7XG4gICAgY29uc3QgYXJ0aWNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnKTtcbiAgICBjb25zdCBwcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTtcbiAgICBhcnRpY2xlLmNsYXNzTGlzdC5hZGQoJ2Z1bmN0aW9uLWNvbnRhaW5lcicpO1xuICAgIHByZS5jbGFzc0xpc3QuYWRkKCdwcmV0dHlwcmludCcpO1xuICAgIGFydGljbGUuYXBwZW5kQ2hpbGQocHJlKTtcbiAgICBwcmUuaW5uZXJIVE1MID0gZm4udG9TdHJpbmcoKTtcbiAgICByZXR1cm4gYXJ0aWNsZTtcbn07XG5cbmNvbnN0IGRlbW9zID0gbmV3IE1hcChbXG4gICAgWydkZW1vMScsIGRlbW8xXSxcbiAgICBbJ2RlbW8yJywgZGVtbzJdLFxuICAgIFsnZGVtbzMnLCBkZW1vM10sXG4gICAgWydkZW1vNCcsIGRlbW80XSxcbiAgICBbJ2RlbW81JywgZGVtbzVdLFxuICAgIFsnZGVtbzYnLCBkZW1vNl0sXG4gICAgWydkZW1vNycsIGRlbW83XSxcbiAgICBbJ2RlbW84JywgZGVtbzhdLFxuXSk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBkZW1vcy5mb3JFYWNoKChtb2R1bGUsIGRpdikgPT4ge1xuICAgICAgICBjb25zdCBkZW1vID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2KTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZGVtby1jb250YWluZXInKTtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdkZW1vLXdyYXBwZXInKTtcblxuICAgICAgICBtb2R1bGUoSXNvbWV0cmljTW9kdWxlLCB3cmFwcGVyKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgICBkZW1vLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIGRlbW8uYXBwZW5kQ2hpbGQoZnVuY3Rpb1RvU3RyaW5nKG1vZHVsZSkpO1xuICAgIH0pO1xuXG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///531\n')},538:(module,exports)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(){var r=null;\n(function(){function X(e){function j(){try{J.doScroll("left")}catch(e){P(j,50);return}w("poll")}function w(j){if(!(j.type=="readystatechange"&&x.readyState!="complete")&&((j.type=="load"?n:x)[z](i+j.type,w,!1),!m&&(m=!0)))e.call(n,j.type||j)}var Y=x.addEventListener,m=!1,C=!0,t=Y?"addEventListener":"attachEvent",z=Y?"removeEventListener":"detachEvent",i=Y?"":"on";if(x.readyState=="complete")e.call(n,"lazy");else{if(x.createEventObject&&J.doScroll){try{C=!n.frameElement}catch(A){}C&&j()}x[t](i+"DOMContentLoaded",\nw,!1);x[t](i+"readystatechange",w,!1);n[t](i+"load",w,!1)}}function Q(){S&&X(function(){var e=K.length;$(e?function(){for(var j=0;j<e;++j)(function(e){P(function(){n.exports[K[e]].apply(n,arguments)},0)})(j)}:void 0)})}for(var n=window,P=n.setTimeout,x=document,J=x.documentElement,L=x.head||x.getElementsByTagName("head")[0]||J,z="",A=x.scripts,m=A.length;--m>=0;){var M=A[m],T=M.src.match(/^[^#?]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);if(T){z=T[1]||"";M.parentNode.removeChild(M);break}}var S=!0,D=\n[],N=[],K=[];z.replace(/[&?]([^&=]+)=([^&]+)/g,function(e,j,w){w=decodeURIComponent(w);j=decodeURIComponent(j);j=="autorun"?S=!/^[0fn]/i.test(w):j=="lang"?D.push(w):j=="skin"?N.push(w):j=="callback"&&K.push(w)});m=0;for(z=D.length;m<z;++m)(function(){var e=x.createElement("script");e.onload=e.onerror=e.onreadystatechange=function(){if(e&&(!e.readyState||/loaded|complete/.test(e.readyState)))e.onerror=e.onload=e.onreadystatechange=r,--R,R||P(Q,0),e.parentNode&&e.parentNode.removeChild(e),e=r};e.type=\n"text/javascript";e.src="https://google-code-prettify.googlecode.com/svn/loader/lang-"+encodeURIComponent(D[m])+".js";L.insertBefore(e,L.firstChild)})(D[m]);for(var R=D.length,A=[],m=0,z=N.length;m<z;++m)A.push("https://google-code-prettify.googlecode.com/svn/loader/skins/"+encodeURIComponent(N[m])+".css");A.push("https://google-code-prettify.googlecode.com/svn/loader/prettify.css");(function(e){function j(m){if(m!==w){var n=x.createElement("link");n.rel="stylesheet";n.type="text/css";if(m+1<w)n.error=\nn.onerror=function(){j(m+1)};n.href=e[m];L.appendChild(n)}}var w=e.length;j(0)})(A);var $=function(){window.PR_SHOULD_USE_CONTINUATION=!0;var e;(function(){function j(a){function d(f){var b=f.charCodeAt(0);if(b!==92)return b;var a=f.charAt(1);return(b=i[a])?b:"0"<=a&&a<="7"?parseInt(f.substring(1),8):a==="u"||a==="x"?parseInt(f.substring(2),16):f.charCodeAt(1)}function h(f){if(f<32)return(f<16?"\\\\x0":"\\\\x")+f.toString(16);f=String.fromCharCode(f);return f==="\\\\"||f==="-"||f==="]"||f==="^"?"\\\\"+f:\nf}function b(f){var b=f.substring(1,f.length-1).match(/\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\S\\s]|[^\\\\]/g),f=[],a=b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,g=b.length;a<g;++a){var k=b[a];if(/\\\\[bdsw]/i.test(k))c.push(k);else{var k=d(k),o;a+2<g&&"-"===b[a+1]?(o=d(b[a+2]),a+=2):o=k;f.push([k,o]);o<65||k>122||(o<65||k>90||f.push([Math.max(65,k)|32,Math.min(o,90)|32]),o<97||k>122||f.push([Math.max(97,k)&-33,Math.min(o,122)&-33]))}}f.sort(function(f,a){return f[0]-\na[0]||a[1]-f[1]});b=[];g=[];for(a=0;a<f.length;++a)k=f[a],k[0]<=g[1]+1?g[1]=Math.max(g[1],k[1]):b.push(g=k);for(a=0;a<b.length;++a)k=b[a],c.push(h(k[0])),k[1]>k[0]&&(k[1]+1>k[0]&&c.push("-"),c.push(h(k[1])));c.push("]");return c.join("")}function e(f){for(var a=f.source.match(/\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*]|\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\\\d+|\\\\[^\\dux]|\\(\\?[!:=]|[()^]|[^()[\\\\^]+/g),c=a.length,d=[],g=0,k=0;g<c;++g){var o=a[g];o==="("?++k:"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&(o<=k?d[o]=-1:a[g]=h(o))}for(g=\n1;g<d.length;++g)-1===d[g]&&(d[g]=++j);for(k=g=0;g<c;++g)o=a[g],o==="("?(++k,d[k]||(a[g]="(?:")):"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&o<=k&&(a[g]="\\\\"+d[o]);for(g=0;g<c;++g)"^"===a[g]&&"^"!==a[g+1]&&(a[g]="");if(f.ignoreCase&&F)for(g=0;g<c;++g)o=a[g],f=o.charAt(0),o.length>=2&&f==="["?a[g]=b(o):f!=="\\\\"&&(a[g]=o.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var j=0,F=!1,l=!1,I=0,c=a.length;I<c;++I){var p=a[I];if(p.ignoreCase)l=\n!0;else if(/[a-z]/i.test(p.source.replace(/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^UXux]/gi,""))){F=!0;l=!1;break}}for(var i={b:8,t:9,n:10,v:11,f:12,r:13},q=[],I=0,c=a.length;I<c;++I){p=a[I];if(p.global||p.multiline)throw Error(""+p);q.push("(?:"+e(p)+")")}return RegExp(q.join("|"),l?"gi":"g")}function m(a,d){function h(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)h(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)e[l]="\\n",F[l<<1]=j++,F[l++<<1|1]=a}}else if(c==\n3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\\r\\n?/g,"\\n"):c.replace(/[\\t\\n\\r ]+/g," "),e[l]=c,F[l<<1]=j,j+=c.length,F[l++<<1|1]=a)}var b=/(?:^|\\s)nocode(?:\\s|$)/,e=[],j=0,F=[],l=0;h(a);return{a:e.join("").replace(/\\n$/,""),d:F}}function n(a,d,h,b){d&&(a={a:d,e:a},h(a),b.push.apply(b,a.g))}function x(a){for(var d=void 0,h=a.firstChild;h;h=h.nextSibling)var b=h.nodeType,d=b===1?d?a:h:b===3?S.test(h.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function h(a){for(var l=a.e,j=[l,"pln"],c=\n0,p=a.a.match(e)||[],m={},q=0,f=p.length;q<f;++q){var B=p[q],y=m[B],u=void 0,g;if(typeof y==="string")g=!1;else{var k=b[B.charAt(0)];if(k)u=B.match(k[1]),y=k[0];else{for(g=0;g<i;++g)if(k=d[g],u=B.match(k[1])){y=k[0];break}u||(y="pln")}if((g=y.length>=5&&"lang-"===y.substring(0,5))&&!(u&&typeof u[1]==="string"))g=!1,y="src";g||(m[B]=y)}k=c;c+=B.length;if(g){g=u[1];var o=B.indexOf(g),H=o+g.length;u[2]&&(H=B.length-u[2].length,o=H-g.length);y=y.substring(5);n(l+k,B.substring(0,o),h,j);n(l+k+o,g,A(y,\ng),j);n(l+k+H,B.substring(H),h,j)}else j.push(l+k,y)}a.g=j}var b={},e;(function(){for(var h=a.concat(d),l=[],i={},c=0,p=h.length;c<p;++c){var m=h[c],q=m[3];if(q)for(var f=q.length;--f>=0;)b[q.charAt(f)]=m;m=m[1];q=""+m;i.hasOwnProperty(q)||(l.push(m),i[q]=r)}l.push(/[\\S\\s]/);e=j(l)})();var i=d.length;return h}function t(a){var d=[],h=[];a.tripleQuotedStrings?d.push(["str",/^(?:\'\'\'(?:[^\'\\\\]|\\\\[\\S\\s]|\'\'?(?=[^\']))*(?:\'\'\'|$)|"""(?:[^"\\\\]|\\\\[\\S\\s]|""?(?=[^"]))*(?:"""|$)|\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$))/,\nr,"\'\\""]):a.multiLineStrings?d.push(["str",/^(?:\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/,r,"\'\\"`"]):d.push(["str",/^(?:\'(?:[^\\n\\r\'\\\\]|\\\\.)*(?:\'|$)|"(?:[^\\n\\r"\\\\]|\\\\.)*(?:"|$))/,r,"\\"\'"]);a.verbatimStrings&&h.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,r]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,r,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\n\\r]*)/,\nr,"#"]),h.push(["str",/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,r])):d.push(["com",/^#[^\\n\\r]*/,r,"#"]));a.cStyleComments&&(h.push(["com",/^\\/\\/[^\\n\\r]*/,r]),h.push(["com",/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/,r]));if(b=a.regexLiterals){var e=(b=b>1?"":"\\n\\r")?".":"[\\\\S\\\\s]";h.push(["lang-regex",RegExp("^(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*("+\n("/(?=[^/*"+b+"])(?:[^/\\\\x5B\\\\x5C"+b+"]|\\\\x5C"+e+"|\\\\x5B(?:[^\\\\x5C\\\\x5D"+b+"]|\\\\x5C"+e+")*(?:\\\\x5D|$))+/")+")")])}(b=a.types)&&h.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&h.push(["kwd",RegExp("^(?:"+b.replace(/[\\s,]+/g,"|")+")\\\\b"),r]);d.push(["pln",/^\\s+/,r," \\r\\n\\t\\u00a0"]);b="^.[^\\\\s\\\\w.$@\'\\"`/\\\\\\\\]*";a.regexLiterals&&(b+="(?!s*/)");h.push(["lit",/^@[$_a-z][\\w$@]*/i,r],["typ",/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/,r],["pln",/^[$_a-z][\\w$@]*/i,r],["lit",/^(?:0x[\\da-f]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+-]?\\d+)?)[a-z]*/i,\nr,"0123456789"],["pln",/^\\\\[\\S\\s]?/,r],["pun",RegExp(b),r]);return C(d,h)}function z(a,d,h){function b(a){var c=a.nodeType;if(c==1&&!j.test(a.className))if("br"===a.nodeName)e(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&h){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(l.createTextNode(d),a.nextSibling),e(a),c||a.parentNode.removeChild(a)}}\nfunction e(a){function b(a,c){var d=c?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),h=a.nextSibling;f.appendChild(d);for(var e=h;e;e=h)h=e.nextSibling,f.appendChild(e)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var j=/(?:^|\\s)nocode(?:\\s|$)/,m=/\\r\\n?|\\n/,l=a.ownerDocument,i=l.createElement("li");a.firstChild;)i.appendChild(a.firstChild);for(var c=[i],p=0;p<c.length;++p)b(c[p]);d===(d|0)&&c[0].setAttribute("value",\nd);var n=l.createElement("ol");n.className="linenums";for(var d=Math.max(0,d-1|0)||0,p=0,q=c.length;p<q;++p)i=c[p],i.className="L"+(p+d)%10,i.firstChild||i.appendChild(l.createTextNode("\\u00a0")),n.appendChild(i);a.appendChild(n)}function i(a,d){for(var h=d.length;--h>=0;){var b=d[h];U.hasOwnProperty(b)?V.console&&console.warn("cannot override language handler %s",b):U[b]=a}}function A(a,d){if(!a||!U.hasOwnProperty(a))a=/^\\s*</.test(d)?"default-markup":"default-code";return U[a]}function D(a){var d=\na.h;try{var h=m(a.c,a.i),b=h.a;a.a=b;a.d=h.d;a.e=0;A(d,b)(a);var e=/\\bMSIE\\s(\\d+)/.exec(navigator.userAgent),e=e&&+e[1]<=8,d=/\\n/g,i=a.a,j=i.length,h=0,l=a.d,n=l.length,b=0,c=a.g,p=c.length,t=0;c[p]=j;var q,f;for(f=q=0;f<p;)c[f]!==c[f+2]?(c[q++]=c[f++],c[q++]=c[f++]):f+=2;p=q;for(f=q=0;f<p;){for(var x=c[f],y=c[f+1],u=f+2;u+2<=p&&c[u+1]===y;)u+=2;c[q++]=x;c[q++]=y;f=u}c.length=q;var g=a.c,k;if(g)k=g.style.display,g.style.display="none";try{for(;b<n;){var o=l[b+2]||j,H=c[t+2]||j,u=Math.min(o,H),E=l[b+\n1],W;if(E.nodeType!==1&&(W=i.substring(h,u))){e&&(W=W.replace(d,"\\r"));E.nodeValue=W;var Z=E.ownerDocument,s=Z.createElement("span");s.className=c[t+1];var z=E.parentNode;z.replaceChild(s,E);s.appendChild(E);h<o&&(l[b+1]=E=Z.createTextNode(i.substring(u,o)),z.insertBefore(E,s.nextSibling))}h=u;h>=o&&(b+=2);h>=H&&(t+=2)}}finally{if(g)g.style.display=k}}catch(v){V.console&&console.log(v&&v.stack||v)}}var V=window,G=["break,continue,do,else,for,if,return,while"],O=[[G,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],\n"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],J=[O,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],K=[O,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],\nL=[K,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],O=[O,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],M=[G,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],\nN=[G,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],R=[G,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],G=[G,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],Q=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/,\nS=/\\S/,T=t({keywords:[J,L,O,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",M,N,G],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),U={};i(T,["default-code"]);i(C([],[["pln",/^[^<?]+/],["dec",/^<!\\w[^>]*(?:>|$)/],["com",/^<\\!--[\\S\\s]*?(?:--\\>|$)/],["lang-",/^<\\?([\\S\\s]+?)(?:\\?>|$)/],["lang-",/^<%([\\S\\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",\n/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i],["lang-js",/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i],["lang-css",/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i],["lang-in.tag",/^(<\\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);i(C([["pln",/^\\s+/,r," \\t\\r\\n"],["atv",/^(?:"[^"]*"?|\'[^\']*\'?)/,r,"\\"\'"]],[["tag",/^^<\\/?[a-z](?:[\\w-.:]*\\w)?|\\/?>$/i],["atn",/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],["lang-uq.val",/^=\\s*([^\\s"\'>]*(?:[^\\s"\'/>]|\\/(?=\\s)))/],["pun",/^[/<->]+/],\n["lang-js",/^on\\w+\\s*=\\s*"([^"]+)"/i],["lang-js",/^on\\w+\\s*=\\s*\'([^\']+)\'/i],["lang-js",/^on\\w+\\s*=\\s*([^\\s"\'>]+)/i],["lang-css",/^style\\s*=\\s*"([^"]+)"/i],["lang-css",/^style\\s*=\\s*\'([^\']+)\'/i],["lang-css",/^style\\s*=\\s*([^\\s"\'>]+)/i]]),["in.tag"]);i(C([],[["atv",/^[\\S\\s]+/]]),["uq.val"]);i(t({keywords:J,hashComments:!0,cStyleComments:!0,types:Q}),["c","cc","cpp","cxx","cyc","m"]);i(t({keywords:"null,true,false"}),["json"]);i(t({keywords:L,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:Q}),\n["cs"]);i(t({keywords:K,cStyleComments:!0}),["java"]);i(t({keywords:G,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);i(t({keywords:M,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);i(t({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);i(t({keywords:N,\nhashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);i(t({keywords:O,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);i(t({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);i(t({keywords:R,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);\ni(C([],[["str",/^[\\S\\s]+/]]),["regex"]);var X=V.PR={createSimpleLexer:C,registerLangHandler:i,sourceDecorator:t,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:function(a,d,e){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;e&&z(b,e,!0);D({h:d,j:e,c:b,i:1});return b.innerHTML},\nprettyPrint:e=e=function(a,d){function e(){for(var b=V.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;p<j.length&&c.now()<b;p++){for(var d=j[p],m=k,l=d;l=l.previousSibling;){var n=l.nodeType,s=(n===7||n===8)&&l.nodeValue;if(s?!/^\\??prettify\\b/.test(s):n!==3||/\\S/.test(l.nodeValue))break;if(s){m={};s.replace(/\\b(\\w+)=([\\w%+\\-.:]+)/g,function(a,b,c){m[b]=c});break}}l=d.className;if((m!==k||f.test(l))&&!w.test(l)){n=!1;for(s=d.parentNode;s;s=s.parentNode)if(g.test(s.tagName)&&s.className&&f.test(s.className)){n=\n!0;break}if(!n){d.className+=" prettyprinted";n=m.lang;if(!n){var n=l.match(q),A;if(!n&&(A=x(d))&&u.test(A.tagName))n=A.className.match(q);n&&(n=n[1])}if(y.test(d.tagName))s=1;else var s=d.currentStyle,v=i.defaultView,s=(s=s?s.whiteSpace:v&&v.getComputedStyle?v.getComputedStyle(d,r).getPropertyValue("white-space"):0)&&"pre"===s.substring(0,3);v=m.linenums;if(!(v=v==="true"||+v))v=(v=l.match(/\\blinenums\\b(?::(\\d+))?/))?v[1]&&v[1].length?+v[1]:!0:!1;v&&z(d,v,s);t={h:n,c:d,j:v,i:s};D(t)}}}p<j.length?\nP(e,250):"function"===typeof a&&a()}for(var b=d||document.body,i=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],j=[],m=0;m<b.length;++m)for(var l=0,n=b[m].length;l<n;++l)j.push(b[m][l]);var b=r,c=Date;c.now||(c={now:function(){return+new Date}});var p=0,t,q=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/,f=/\\bprettyprint\\b/,w=/\\bprettyprinted\\b/,y=/pre|xmp/i,u=/^code$/i,g=/^(?:pre|code|xmp)$/i,k={};e()}}; true&&\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return X}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))})();return e}();R||P(Q,0)})();}()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///538\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__.d=(I,g)=>{for(var C in g)__webpack_require__.o(g,C)&&!__webpack_require__.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),__webpack_require__.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},(()=>{var I;__webpack_require__.g.importScripts&&(I=__webpack_require__.g.location+"");var g=__webpack_require__.g.document;if(!I&&g&&(g.currentScript&&(I=g.currentScript.src),!I)){var C=g.getElementsByTagName("script");C.length&&(I=C[C.length-1].src)}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=I+"../"})();var __webpack_exports__=__webpack_require__(531),__webpack_export_target__=window;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();